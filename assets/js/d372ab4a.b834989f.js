"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[5875],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const d={},i=s.createContext(d);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},76993:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/02.24.02.JsonMethodology","title":"JSON Methodology","description":"The JSON data type produced depends on the Java object type being serialized.","source":"@site/docs-staging/topics/02.24.02.JsonMethodology.md","sourceDirName":"topics","slug":"/topics/02.24.02.JsonMethodology","permalink":"/docs/topics/02.24.02.JsonMethodology","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.24.02.JsonMethodology.md","tags":[],"version":"current","frontMatter":{"title":"JSON Methodology"},"sidebar":"mainSidebar","previous":{"title":"2.24.1. JSON Basics","permalink":"/docs/topics/02.24.01.JsonBasics"},"next":{"title":"2.24.3. JSON Serializers","permalink":"/docs/topics/02.24.03.JsonSerializers"}}');var d=n(74848),i=n(28453);const r={title:"JSON Methodology"},o=void 0,c={},l=[{value:"Data type conversions:",id:"data-type-conversions",level:5}];function a(e){const t={code:"code",h5:"h5",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.p,{children:"The JSON data type produced depends on the Java object type being serialized."}),"\n",(0,d.jsxs)(t.ul,{children:["\n",(0,d.jsx)(t.li,{children:"Primitives and primitive objects are converted to JSON primitives."}),"\n",(0,d.jsxs)(t.li,{children:["Beans and ",(0,d.jsx)(t.code,{children:"Maps"})," are converted to JSON objects."]}),"\n",(0,d.jsxs)(t.li,{children:[(0,d.jsx)(t.code,{children:"Collections"})," and arrays are converted to JSON arrays."]}),"\n",(0,d.jsx)(t.li,{children:"Anything else is converted to JSON strings."}),"\n"]}),"\n",(0,d.jsx)(t.h5,{id:"data-type-conversions",children:"Data type conversions:"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"POJO type"}),(0,d.jsx)(t.th,{children:"JSON type"}),(0,d.jsx)(t.th,{children:"Example"}),(0,d.jsx)(t.th,{children:"Serialized form"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"String"}),(0,d.jsx)(t.td,{children:"String"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:'serialize("foobar");'})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"'foobar'"})})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"Number"}),(0,d.jsx)(t.td,{children:"Number"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"serialize(123);"})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"123"})})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"Boolean"}),(0,d.jsx)(t.td,{children:"Boolean"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"serialize(true);"})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"true"})})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"Null"}),(0,d.jsx)(t.td,{children:"Null"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"serialize(null);"})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"null"})})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:"Beans with properties of any type on this list"}),(0,d.jsx)(t.td,{children:"Object"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"serialize(new MyBean());"})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"{p1:'val1',p2:true}"})})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsxs)(t.td,{children:[(0,d.jsx)(t.code,{children:"Maps"})," with values of any type on this list"]}),(0,d.jsx)(t.td,{children:"Object"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"serialize(new TreeMap());"})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"{key1:'val1',key2:true}"})})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsxs)(t.td,{children:[(0,d.jsx)(t.code,{children:"Collections"})," and arrays of any type on this list"]}),(0,d.jsx)(t.td,{children:"Array"}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:'serialize(new Object[]{1,"foo",true});'})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"[1,'foo',true]"})})]})]})]}),"\n",(0,d.jsxs)(t.p,{children:["In addition, swaps can be used to convert non-serializable POJOs into serializable forms, such as converting ",(0,d.jsx)(t.code,{children:"Calendar"}),"\nobject to ISO8601 strings, or ",(0,d.jsx)(t.code,{children:"byte[]"})," arrays to Base-64 encoded strings."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}}}]);