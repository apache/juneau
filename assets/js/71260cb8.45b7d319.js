"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[9686],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(96540);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}},59464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/01.03.00.EndToEndRest","title":"End-to-End REST","description":"The juneau-rest-server and juneau-rest-client libraries provide server and client side REST capabilities that can be","source":"@site/docs-staging/topics/01.03.00.EndToEndRest.md","sourceDirName":"topics","slug":"/topics/01.03.00.EndToEndRest","permalink":"/docs/topics/01.03.00.EndToEndRest","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs/docs-staging/topics/01.03.00.EndToEndRest.md","tags":[],"version":"current","frontMatter":{"title":"End-to-End REST"},"sidebar":"mainSidebar","previous":{"title":"1.2. Marshalling","permalink":"/docs/topics/01.02.00.Marshalling"},"next":{"title":"1.4. REST Server","permalink":"/docs/topics/01.04.00.RestServer"}}');var a=n(74848),r=n(28453);const o={title:"End-to-End REST"},i=void 0,c={},l=[];function d(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.a,{href:"/docs/topics/TODO",children:"juneau-rest-server"})," and ",(0,a.jsx)(t.a,{href:"/docs/topics/TODO",children:"juneau-rest-client"})," libraries provide server and client side REST capabilities that can be\nused by themselves, or together to create simplified yet sophisticated Java-based REST communications layers that\ncompletely hide away the complexities of the REST protocol."]}),"\n",(0,a.jsx)(t.p,{children:"A typical pattern is to define a REST API on the server side:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Rest(path="/petstore")\npublic class PetStoreRest {\n\n    @RestPost(path="/pets", guards=AdminGuard.class)\n    public Ok addPet(\n        @Content CreatePet createPetBean,\n        @Header("E-Tag") UUID etag,\n        @Query("debug") boolean debug\n    ) throws BadRequest, Unauthorized, InternalServerError {\n        // Process request here.\n        return Ok.OK;  // Standard 400-OK response.\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Then define a Java interface that can be provided to consumers of your API to access your REST API:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Remote(path="/petstore")\npublic interface PetStoreClient {\n\n    @RemotePost("/pets")\n    Ok addPet(\n        @Content CreatePet createPet,\n        @Header("E-Tag") UUID etag,\n        @Query("debug") boolean debug\n    ) throws BadRequest, Unauthorized, InternalServerError;\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Note that you may choose to have your service class implement your interface.\nThe REST libraries will happily look for annotations defined on methods of parent classes and interfaces.\nIt's up to you how you want to design it."}),"\n",(0,a.jsxs)(t.p,{children:["Finally, the ",(0,a.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestClient.html",children:"RestClient"})," class is used to construct a\nremote proxy to our REST service:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'// Use a RestClient with default JSON 5 support and BASIC auth.\nRestClient client = RestClient.create().json5().basicAuth(...).build();\n\n// Instantiate our proxy interface.\nPetStoreClient store = client.getRemote(PetStoreClient.class, "http://localhost:10000");\n\n// Use it to create a pet.\nCreatePet createPet = new CreatePet("Fluffy", 9.99);\nPet pet = store.addPet(createPet, UUID.randomUUID(), true);\n'})}),"\n",(0,a.jsx)(t.p,{children:"The call above translates to the following REST call:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",children:"POST http://localhost:10000/petstore/pets?debug=true HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nE-Tag: 475588d4-0b27-4f56-9296-cc683251d314\n\n{\n    name: 'Fluffy',\n    price: 9.99\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"It looks simplistic but the server and client APIs are highly sophisticated libraries that allow you to perform complex\ntasks using very little code."})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);