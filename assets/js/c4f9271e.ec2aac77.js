"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[4774],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var a=s(96540);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}},78062:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"topics/02.03.00.SerializersAndParsers","title":"Serializers and Parsers","description":"One of the goals of Juneau was to make serialization as simple as possible.","source":"@site/docs/topics/02.03.00.SerializersAndParsers.md","sourceDirName":"topics","slug":"/topics/SerializersAndParsers","permalink":"/docs/topics/SerializersAndParsers","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/02.03.00.SerializersAndParsers.md","tags":[],"version":"current","frontMatter":{"title":"Serializers and Parsers","slug":"SerializersAndParsers"},"sidebar":"mainSidebar","previous":{"title":"2.2. Marshallers","permalink":"/docs/topics/Marshallers"},"next":{"title":"2.4.1. Bean Context Basics","permalink":"/docs/topics/BeanContextBasics"}}');var r=s(74848),i=s(28453);const o={title:"Serializers and Parsers",slug:"SerializersAndParsers"},t=void 0,l={},c=[];function p(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"One of the goals of Juneau was to make serialization as simple as possible.\nIn a single line of code, you should be able to serialize and parse most POJOs."}),"\n",(0,r.jsx)(n.p,{children:"Despite this simplicity, Juneau provides lots of extensibility and configuration properties for tailoring how POJOs are\nserialized and parsed."}),"\n",(0,r.jsx)(n.p,{children:"The built-in serializers in Juneau are fast, efficient, and highly configurable.\nThey work by serializing POJOs directly to streams instead of using intermediate Document Object Model objects."}),"\n",(0,r.jsx)(n.p,{children:"In most cases, you can serialize objects in one line of code by using one of the default serializers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// A simple bean\npublic class Person {\n    public String name = "John Smith";\n    public int age = 21;\n}\n\n// Serialize to JSON, XML, or HTML\nPerson person = new Person();\n\n// Produces:\n//  "{\\"name\\":\\"John Smith\\",\\"age\\":21}"\nString json = JsonSerializer.DEFAULT.serialize(person);\n\n// Produces:\n//  "{name:\'John Smith\',age:21}"\nString json = Json5Serializer.DEFAULT.serialize(person);\n\n// Produces:\n//  John Smith\n//  21\nString xml = XmlSerializer.DEFAULT.serialize(person);\n\n// Produces:\n//  keyvalue\n//  nameJohn Smith\n//  age21\n//\nString html = HtmlSerializer.DEFAULT.serialize(person);\n\n// Produces:\n//  "(name=\'John Smith\',age=21)"\nString uon = UonSerializer.DEFAULT.serialize(person);\n\n// Produces:\n//  "name=\'John+Smith\'&age=21"\nString urlencoding = UrlEncodingSerializer.DEFAULT.serialize(person);\n\n// Produces:\n//  82 A4 6E 61 6D 65 AA 4A 6F 68 6E 20 53 6D 69 74 68 A3 61 67 65 15\nbyte[] bytes = MsgPackSerializer.DEFAULT.serialize(person);\n'})}),"\n",(0,r.jsx)(n.p,{children:"In addition to the default serializers, customized serializers can be created using various built-in options:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Use one of the default serializers to serialize a POJO\nString json = JsonSerializer.DEFAULT.serialize(someObject);\n\n// Create a custom serializer for lax syntax using single quote characters\nJsonSerializer serializer = JsonSerializer.create().simple().sq().build();\n\n// Clone an existing serializer and modify it to use single-quotes\nJsonSerializer serializer = JsonSerializer.DEFAULT.copy().sq().build();\n\n// Serialize a POJO to JSON\nString json = serializer.serialize(someObject);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Default serialization support is provided for Java primitives, ",(0,r.jsx)(n.code,{children:"Maps"}),", ",(0,r.jsx)(n.code,{children:"Collections"}),", beans, and arrays.\nExtensible support for other data types such as ",(0,r.jsx)(n.code,{children:"Calendars"}),", ",(0,r.jsx)(n.code,{children:"Dates"}),", ",(0,r.jsx)(n.code,{children:"Iterators"})," is available through the use of POJO\nswaps (described later)."]}),"\n",(0,r.jsx)(n.p,{children:"Parsers work by parsing input directly into POJOs instead of having to create intermediate Document Object Models.\nThis allows them to parse input with minimal object creation."}),"\n",(0,r.jsx)(n.p,{children:"Like the serializers, you can often parse objects in one line of code by using one of the default parsers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Use one of the predefined parsers.\nParser parser = JsonParser.DEFAULT;\n\n// Parse a JSON object as a bean.\nString json = \"{name:'John Smith',age:21}\";\nPerson person = parser.parse(json, Person.class);\n\n// Or parse it into a generic Map.\nMap map = parser.parse(json, Map.class);\n\n// Parse a JSON string.\njson = \"'foobar'\";\nString string = parser.parse(json, String.class);\n\n// Parse a JSON number as a Long or Float.\njson = \"123\";\nLong _long = parser.parse(json, Long.class);\nFloat _float = parser.parse(json, Float.class);\n\n// Parse a JSON object as a HashMap.\njson = \"{a:{name:'John Smith',age:21},b:{name:'Joe Smith',age:42}}\";\nMap map2 = parser.parse(json, HashMap.class, String.class, Person.class)\n\n// Parse a JSON object as a HashMap>.\njson = \"{a:[{name:'John Smith',age:21},{name:'Joe Smith',age:42}]}\";\nMap> map3 = parser.parse(json, HashMap.class, String.class,\n    LinkedList.class, Person.class)\n\n// Parse a JSON array of integers as a Collection of Integers or int[] array.\njson = \"[1,2,3]\";\nList list = parser.parse(json, LinkedList.class, Integer.class);\nint[] ints = parser.parse(json, int[].class);\n"})}),"\n",(0,r.jsx)(n.p,{children:"The parsers can also be used to populating existing bean and collection objects:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Use one of the predefined parsers.\nParser parser = JsonParser.DEFAULT;\n\n// Populate the properties on an existing bean from a JSON object.\nString json = \"{name:'John Smith',age:21}\";\nPerson person = new Person();\nparser.parseIntoBean(json, person);\n\n// Populate an existing list from a JSON array of numbers.\njson = \"[1,2,3]\";\nList list = new LinkedList();\nparser.parseIntoCollection(json, list, Integer.class);\n\n// Populate an existing map from a JSON object containing beans.\njson = \"{a:{name:'John Smith',age:21},b:{name:'Joe Smith',age:42}}\";\nMap map = new TreeMap();\nparser.parseIntoMap(json, map, String.class, Person.class);\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["In the example above, we're parsing JSON5 (single quotes, unquoted attributes).\nThe ",(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/JsonParser.html",target:"_blank",children:"JSON parser"})," can handle any valid JSON syntax (such as quoted or unquoted attributes, single or double quotes).\nIt can also handle JSON fragments and embedded Javascript comments."]}),(0,r.jsx)(n.p,{children:"Many of the JSON examples provided will use JSON5 syntax which is easier to read since we don't have to deal with escapes."})]}),"\n",(0,r.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,r.jsxs)("tree",{children:[(0,r.jsxs)("node-0",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/examples/serializer/ImageSerializer.html",target:"_blank",children:"ImageSerializer"})})," - Example of a custom serializer."]}),(0,r.jsxs)("node-0",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/examples/parser/ImageParser.html",target:"_blank",children:"ImageParser"})})," - Example of a custom parser."]})]})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);