"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[8734],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(96540);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}},95616:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"topics/05.11.04.CustomStores","title":"Custom ConfigStores","description":"The ConfigStore API has been written to allow easy development of custom configuration storage classes.","source":"@site/docs-staging/topics/05.11.04.CustomStores.md","sourceDirName":"topics","slug":"/topics/05.11.04.CustomStores","permalink":"/docs/topics/05.11.04.CustomStores","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/05.11.04.CustomStores.md","tags":[],"version":"current","frontMatter":{"title":"Custom ConfigStores"},"sidebar":"mainSidebar","previous":{"title":"5.11.3. File Store","permalink":"/docs/topics/05.11.03.FileStore"},"next":{"title":"5.11.5. Store Listeners","permalink":"/docs/topics/05.11.05.StoreListeners"}}');var r=t(74848),a=t(28453);const i={title:"Custom ConfigStores"},s=void 0,l={},c=[];function u(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ConfigStore"})," API has been written to allow easy development of custom configuration storage classes.\nThe example below shows a starting point for an implementation based on polling a relational database.\nThe source can be found here: ",(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/examples/core/config/store/SqlStore.html",children:"SqlStore"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Completing it is left as an exercise:"}),"\n",(0,r.jsx)(n.admonition,{title:"Example Store Class",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class SqlStore extends ConfigStore {\n\n    private final String jdbcUrl;\n    private final String tableName, nameColumn, valueColumn;\n    private final Timer watcher;\n    private final ConcurrentHashMap cache = new ConcurrentHashMap();\n\n    protected SqlStore(ConfigStore.Builder builder) {\n        super(builder);\n        this.jdbcUrl = builder.jdbcUrl;\n        this.tableName = builder.tableName;\n        this.nameColumn = builder.nameColumn;\n        this.valueColumn = builder.valueColumn;\n\n        int pollInterval = builder.pollInterval;\n\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                SqlStore.this.poll();\n            }\n        };\n\n        this.watcher = new Timer("MyTimer");\n        watcher.scheduleAtFixedRate(timerTask, 0, pollInterval * 1000);\n    }\n\n    synchronized void poll() {\n        // Loop through all our entries and find the latest values.\n        for (Map.Entry e : cache.entrySet()) {\n            String name = e.getKey();\n            String cacheContents = e.getValue();\n            String newContents = getDatabaseValue(name);\n\n            // Change detected!\n            if (! cacheContents.equals(newContents))\n                update(name, newContents);\n        }\n    }\n\n    // Reads the value from the database.\n    protected String getDatabaseValue(String name) {\n        // Implement me!\n        return null;\n    }\n\n    @Override /* ConfigStore */\n    public boolean exists(String name) {\n        // Implement me!\n        return false;\n    }\n\n    @Override /* ConfigStore */\n    public synchronized String read(String name) {\n        String contents = cache.get(name);\n        if (contents == null) {\n            contents = getDatabaseValue(name);\n            update(name, contents);\n        }\n        return contents;\n    }\n\n    @Override /* ConfigStore */\n    public synchronized String write(String name, String expectedContents, String newContents) {\n\n        // This is a no-op.\n        if (StringUtils.eq(expectedContents, newContents))\n            return null;\n\n        String currentContents = read(name);\n\n        if (expectedContents != null && StringUtils.ne(currentContents, expectedContents))\n            return currentContents;\n\n        update(name, newContents);\n\n        // Success!\n        return null;\n    }\n\n    @Override /* ConfigStore */\n    public synchronized SqlStore update(String name, String newContents) {\n        cache.put(name, newContents);\n        super.update(name, newContents);  // Trigger any listeners.\n        return this;\n    }\n\n    @Override /* Closeable */\n    public synchronized void close() {\n        if (watcher != null)\n            watcher.cancel();\n    }\n}\n'})})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);