"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[1911],{28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var a=t(96540);const n={},r=a.createContext(n);function i(e){const s=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(r.Provider,{value:s},e.children)}},90286:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"topics/02.33.00.BestPractices","title":"Best Practices","description":"- Reuse instances of serializers and parsers whenever possible.","source":"@site/docs-staging/topics/02.33.00.BestPractices.md","sourceDirName":"topics","slug":"/topics/02.33.00.BestPractices","permalink":"/docs/topics/02.33.00.BestPractices","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs/docs-staging/topics/02.33.00.BestPractices.md","tags":[],"version":"current","frontMatter":{"title":"Best Practices"},"sidebar":"mainSidebar","previous":{"title":"2.32.4. OpenAPI Parsers","permalink":"/docs/topics/02.32.04.OpenApiParsers"},"next":{"title":"3. juneau-marshall-rdf","permalink":"/docs/topics/03.01.00.Module-juneau-marshall-rdf"}}');var n=t(74848),r=t(28453);const i={title:"Best Practices"},c=void 0,o={},l=[];function d(e){const s={a:"a",br:"br",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:["Reuse instances of serializers and parsers whenever possible.",(0,n.jsx)(s.br,{}),"\n","They are designed to be thread safe and maintain internal caches of bean metadata to increase performance."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/BeanTraverseContext/Builder.html#detectRecursions()",children:"BeanTraverseContext.Builder.detectRecursions()"})," option can cause a performance penalty of around 20%.\nTherefore, it's recommended that this option be used only when necessary."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"In general, JSON serialization and parsing is about 20% faster than XML.\nJSON is also more compact than XML.\nMessagePack is fastest and most compact of all."}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:"The RDF parsers are SLOW.\nRDF simply isn't efficient with node traversal, so creating tree structures out of RDF models is highly inefficient."}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/parser/Parser.html",children:"Parser"})," methods that take in ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/ClassMeta.html",children:"ClassMeta"})," parameters are slightly faster than methods that take in ",(0,n.jsx)(s.a,{href:"../apidocs/java/lang/Class.html",children:"Class"})," or ",(0,n.jsx)(s.a,{href:"../apidocs/java/lang/Object.html",children:"Object"})," parameters, since the latter methods involve hash lookups to resolve to ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/ClassMeta.html",children:"ClassMeta"})," parameters."]}),"\n"]}),"\n"]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);