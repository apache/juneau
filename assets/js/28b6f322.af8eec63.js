"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[2872],{28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>i});var n=s(96540);const a={},o=n.createContext(a);function r(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(o.Provider,{value:t},e.children)}},58857:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"topics/11.05.00.ResponseStatus","title":"Response Status","description":"After execution using RestRequest.run() or RestRequest.complete(), the following methods can be used to get the response status:","source":"@site/docs/topics/11.05.00.ResponseStatus.md","sourceDirName":"topics","slug":"/topics/ResponseStatus","permalink":"/docs/topics/ResponseStatus","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/11.05.00.ResponseStatus.md","tags":[],"version":"current","frontMatter":{"title":"Response Status","slug":"ResponseStatus"},"sidebar":"mainSidebar","previous":{"title":"11.4. Request Content","permalink":"/docs/topics/RequestContent"},"next":{"title":"11.6. Response Headers","permalink":"/docs/topics/ResponseHeaders"}}');var a=s(74848),o=s(28453);const r={title:"Response Status",slug:"ResponseStatus"},i=void 0,c={},l=[];function u(e){const t={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["After execution using ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestRequest.html#run()",target:"_blank",children:"RestRequest.run()"})," or ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestRequest.html#complete()",target:"_blank",children:"RestRequest.complete()"}),", the following methods can be used to get the response status:"]}),"\n",(0,a.jsxs)("tree",{children:[(0,a.jsx)("node-0",{children:(0,a.jsx)("java-class",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestResponse.html",target:"_blank",children:"RestResponse"})})}),(0,a.jsxs)("node-1",{children:[(0,a.jsx)("java-method",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestResponse.html#getStatusLine()",target:"_blank",children:"getStatusLine()"})})," \u2192 ",(0,a.jsx)("a",{href:"https://hc.apache.org/httpcomponents-core-4.4.x/current/httpcore/apidocs/org/apache/http/StatusLine.html",target:"_blank",children:"StatusLine"})]}),(0,a.jsxs)("node-1",{children:[(0,a.jsx)("java-method",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestResponse.html#getStatusCode()",target:"_blank",children:"getStatusCode()"})})," \u2192 ",(0,a.jsx)(t.code,{children:"int"})]}),(0,a.jsxs)("node-1",{children:[(0,a.jsx)("java-method",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestResponse.html#getReasonPhrase()",target:"_blank",children:"getReasonPhrase()"})})," \u2192 ",(0,a.jsx)(t.code,{children:"String"})]}),(0,a.jsxs)("node-1",{children:[(0,a.jsx)("java-method",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestResponse.html#assertStatus()",target:"_blank",children:"assertStatus()"})})," \u2192 ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/assertion/FluentResponseStatusLineAssertion.html",target:"_blank",children:"FluentResponseStatusLineAssertion"})]})]}),"\n",(0,a.jsx)(t.admonition,{title:"Example",type:"tip",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Only interested in status code.\nint statusCode = client.get(URI).complete().getStatusCode();\n"})})}),"\n",(0,a.jsx)(t.p,{children:"Equivalent methods with mutable parameters are provided to allow access to status values without breaking fluent call\nchains."}),"\n",(0,a.jsx)(t.admonition,{title:"Example",type:"tip",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'// Interested in multiple values.\nValue statusCode = Value.empty();\nValue reasonPhrase = Value.empty();\n\nclient.get(URI).complete().getStatusCode(statusCode).getReasonPhrase(reasonPhrase);\nSystem.err.println("statusCode="+statusCode.get()+", reasonPhrase="+reasonPhrase.get());\n'})})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["If you are only interested in the response status and not the response body, be sure to use ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestRequest.html#complete()",target:"_blank",children:"RestRequest.complete()"})," instead of ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestRequest.html#run()",target:"_blank",children:"RestRequest.run()"})," to make sure the response body gets automatically cleaned up.\nOtherwise you must consume the response yourself."]})}),"\n",(0,a.jsx)(t.p,{children:"The assertion method is provided for quickly asserting status codes in fluent calls."}),"\n",(0,a.jsx)(t.admonition,{title:"Example",type:"tip",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Status assertion using a static value.\nString content1 = client.get(URI)\n    .run()\n    .assertStatus().asCode().isBetween(200,399)\n    .getContent().asString();\n\n// Status assertion using a predicate.\nString content2 = client.get(URI)\n    .run()\n    .assertStatus().asCode().is(x -> x<400)\n    .getContent().asString();\n"})})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);