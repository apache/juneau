"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[2149],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var a=i(96540);const t={},r=a.createContext(t);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},61839:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"topics/09.05.08.HttpPartValidation","title":"HTTP Part Validation","description":"HTTP parts can be automatically validated against their schema definitions using format validation and Jakarta Bean Validation constraints.","source":"@site/docs/topics/09.05.08.HttpPartValidation.md","sourceDirName":"topics","slug":"/topics/HttpPartValidation","permalink":"/docs/topics/HttpPartValidation","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/09.05.08.HttpPartValidation.md","tags":[],"version":"current","frontMatter":{"title":"HTTP Part Validation","slug":"HttpPartValidation"},"sidebar":"mainSidebar","previous":{"title":"9.5.7. HTTP Part APIs","permalink":"/docs/topics/HttpPartApis"},"next":{"title":"9.6. Marshalling","permalink":"/docs/topics/Marshalling"}}');var t=i(74848),r=i(28453);const s={title:"HTTP Part Validation",slug:"HttpPartValidation"},l=void 0,d={},o=[{value:"Format Validation",id:"format-validation",level:2},{value:"Supported Formats",id:"supported-formats",level:3},{value:"Email Formats",id:"email-formats",level:4},{value:"Hostname Formats",id:"hostname-formats",level:4},{value:"IP Address Formats",id:"ip-address-formats",level:4},{value:"URI/IRI Formats",id:"uriiri-formats",level:4},{value:"Other Formats",id:"other-formats",level:4},{value:"Transformation Formats",id:"transformation-formats",level:4},{value:"Format Validation Examples",id:"format-validation-examples",level:3},{value:"Validation Behavior",id:"validation-behavior",level:3},{value:"Jakarta Bean Validation Integration",id:"jakarta-bean-validation-integration",level:2},{value:"Supported Constraints",id:"supported-constraints",level:3},{value:"Jakarta Validation Examples",id:"jakarta-validation-examples",level:3},{value:"How It Works",id:"how-it-works",level:3},{value:"Validation on REST Parameters",id:"validation-on-rest-parameters",level:3},{value:"Validation with Remote Proxies",id:"validation-with-remote-proxies",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Combining Validation Approaches",id:"combining-validation-approaches",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Testing with Validation",id:"testing-with-validation",level:3},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"HTTP parts can be automatically validated against their schema definitions using format validation and Jakarta Bean Validation constraints."}),"\n",(0,t.jsx)(n.h2,{id:"format-validation",children:"Format Validation"}),"\n",(0,t.jsxs)(n.p,{children:["Juneau supports comprehensive format validation for HTTP parts based on JSON Schema Draft 2020-12 and OpenAPI 3.x specifications. When a ",(0,t.jsx)(n.code,{children:"format"})," is specified in a ",(0,t.jsx)(n.code,{children:"@Schema"})," annotation, the value is automatically validated against that format."]}),"\n",(0,t.jsx)(n.h3,{id:"supported-formats",children:"Supported Formats"}),"\n",(0,t.jsx)(n.p,{children:"The following format types are supported:"}),"\n",(0,t.jsx)(n.h4,{id:"email-formats",children:"Email Formats"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"email"})," - Email address (RFC 5321)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"idn-email"})," - Internationalized email address (RFC 6531)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"hostname-formats",children:"Hostname Formats"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hostname"})," - Internet host name (RFC 1123)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"idn-hostname"})," - Internationalized host name (RFC 5890)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"ip-address-formats",children:"IP Address Formats"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ipv4"})," - IPv4 address (RFC 2673)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ipv6"})," - IPv6 address (RFC 4291)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"uriiri-formats",children:"URI/IRI Formats"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"uri"})," - Universal Resource Identifier (RFC 3986)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"uri-reference"})," - URI Reference (RFC 3986)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"iri"})," - Internationalized Resource Identifier (RFC 3987)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"iri-reference"})," - IRI Reference (RFC 3987)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"other-formats",children:"Other Formats"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"uuid"})," - Universally Unique Identifier (RFC 4122)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"uri-template"})," - URI Template (RFC 6570)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"json-pointer"})," - JSON Pointer (RFC 6901)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"relative-json-pointer"})," - Relative JSON Pointer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"regex"})," - Regular expression (ECMA-262)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"date"})," - Full date (RFC 3339)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"date-time"})," - Date and time (RFC 3339)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"date-time-zone"})," - Date and time with time zone (RFC 3339)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"time"})," - Time (RFC 3339)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"duration"})," - Duration (RFC 3339 Appendix A / ISO 8601)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"transformation-formats",children:"Transformation Formats"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"byte"})," - BASE-64 encoded characters"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"binary"})," - Hexadecimal encoded octets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"binary-spaced"})," - Space-separated hexadecimal octets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"password"})," - Password (UI hint only, no validation)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"format-validation-examples",children:"Format Validation Examples"}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Email Validation",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestPost("/users")\npublic User createUser(\n    @Query(name="email", schema=@Schema(format="email")) \n    String email\n) {\n    // Email is automatically validated as a valid email address\n    // Invalid emails will throw SchemaValidationException\n}\n'})})}),"\n",(0,t.jsx)(n.admonition,{title:"Example - UUID Validation",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestGet("/users/{id}")\npublic User getUser(\n    @Path(name="id", schema=@Schema(format="uuid")) \n    String id\n) {\n    // ID is validated as a valid UUID format\n    // e.g., "550e8400-e29b-41d4-a716-446655440000"\n}\n'})})}),"\n",(0,t.jsx)(n.admonition,{title:"Example - URI Validation",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestPost("/links")\npublic void addLink(\n    @FormData(name="url", schema=@Schema(format="uri", required=true)) \n    String url\n) {\n    // URL is validated as a valid URI\n    // Must include scheme (e.g., "https://example.com")\n}\n'})})}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Date/Time Validation",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestGet("/appointments")\npublic List<Appointment> getAppointments(\n    @Query(name="startDate", schema=@Schema(format="date")) \n    String startDate,\n    \n    @Query(name="endDate", schema=@Schema(format="date")) \n    String endDate\n) {\n    // Dates are validated as RFC 3339 full-date (YYYY-MM-DD)\n}\n'})})}),"\n",(0,t.jsx)(n.h3,{id:"validation-behavior",children:"Validation Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validation Points"}),": Format validation occurs in both ",(0,t.jsx)(n.code,{children:"validateInput()"})," (for incoming string values) and ",(0,t.jsx)(n.code,{children:"validateOutput()"})," (for serialized objects)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Validation failures throw ",(0,t.jsx)(n.code,{children:"SchemaValidationException"})," with detailed error messages"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Null Handling"}),": The literal string ",(0,t.jsx)(n.code,{children:'"null"'})," is treated as a valid value for all formats"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Relaxed Patterns"}),": Date and time formats use relaxed patterns to accommodate various serialization formats"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Transformation Formats"}),": Formats like ",(0,t.jsx)(n.code,{children:"byte"}),", ",(0,t.jsx)(n.code,{children:"binary"}),", and ",(0,t.jsx)(n.code,{children:"password"})," are treated as transformation hints rather than validation constraints"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"jakarta-bean-validation-integration",children:"Jakarta Bean Validation Integration"}),"\n",(0,t.jsxs)(n.p,{children:["Juneau automatically detects and processes Jakarta Bean Validation constraints without requiring a direct dependency on ",(0,t.jsx)(n.code,{children:"jakarta.validation-api"}),". This allows you to use standard validation annotations alongside Juneau's ",(0,t.jsx)(n.code,{children:"@Schema"})," annotation."]}),"\n",(0,t.jsx)(n.h3,{id:"supported-constraints",children:"Supported Constraints"}),"\n",(0,t.jsx)(n.p,{children:"The following Jakarta Bean Validation constraints are automatically mapped to OpenAPI schema properties:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Constraint"}),(0,t.jsx)(n.th,{children:"Mapping"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@NotNull"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"required=true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Size(min=X, max=Y)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"minLength=X, maxLength=Y, minItems=X, maxItems=Y"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Min(value)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"minimum=value"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Max(value)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"maximum=value"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Pattern(regexp)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pattern=regexp"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Email"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'format="email"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Positive"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"minimum=0, exclusiveMinimum=true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@PositiveOrZero"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"minimum=0"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@Negative"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"maximum=0, exclusiveMaximum=true"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@NegativeOrZero"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"maximum=0"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@NotEmpty"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"required=true, minLength=1, minItems=1"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@NotBlank"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'required=true, minLength=1, pattern=".*\\\\S.*"'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@DecimalMin(value, inclusive)"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"minimum=value"})," with optional ",(0,t.jsx)(n.code,{children:"exclusiveMinimum"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"@DecimalMax(value, inclusive)"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"maximum=value"})," with optional ",(0,t.jsx)(n.code,{children:"exclusiveMaximum"})]})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"jakarta-validation-examples",children:"Jakarta Validation Examples"}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Basic Validation",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import jakarta.validation.constraints.*;\n\npublic class CreateUserRequest {\n    @NotNull\n    @Email\n    @Size(max=255)\n    private String email;\n    \n    @NotBlank\n    @Size(min=8, max=100)\n    @Pattern(regexp="^(?=.*[A-Z])(?=.*[a-z])(?=.*\\\\d).+$")\n    private String password;\n    \n    @Positive\n    @Max(150)\n    private Integer age;\n}\n\n@RestPost("/users")\npublic User createUser(@Content CreateUserRequest request) {\n    // Jakarta Validation constraints are automatically applied\n    // Invalid requests throw SchemaValidationException\n}\n'})})}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Decimal Constraints",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import jakarta.validation.constraints.*;\nimport java.math.BigDecimal;\n\npublic class ProductRequest {\n    @NotBlank\n    @Size(min=1, max=200)\n    private String name;\n    \n    @NotNull\n    @DecimalMin(value="0.01", inclusive=true)\n    @DecimalMax(value="999999.99", inclusive=true)\n    private BigDecimal price;\n    \n    @PositiveOrZero\n    private Integer stock;\n}\n'})})}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Combining Juneau and Jakarta Annotations",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class SearchRequest {\n    @NotBlank\n    @Pattern(regexp="^[a-zA-Z0-9 ]+$")\n    @Size(min=3, max=100)\n    @Schema(description="Search query", example="Juneau framework")\n    private String query;\n    \n    @PositiveOrZero\n    @Max(1000)\n    @Schema(description="Maximum results", _default="10")\n    private Integer limit;\n    \n    @NotNull\n    @Pattern(regexp="^(asc|desc)$")\n    @Schema(description="Sort order", _enum={"asc", "desc"})\n    private String order;\n}\n'})})}),"\n",(0,t.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic Detection"}),": Juneau uses reflection to detect annotations in the ",(0,t.jsx)(n.code,{children:"jakarta.validation.constraints"})," package"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No Direct Dependency"}),": The main Juneau modules do not depend on ",(0,t.jsx)(n.code,{children:"jakarta.validation-api"}),", making it optional"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Schema Mapping"}),": Jakarta Validation constraints are automatically translated to OpenAPI schema properties"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validation Integration"}),": Constraints are applied during HTTP part parsing and validation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"OpenAPI Documentation"}),": Constraints appear in generated OpenAPI/Swagger documentation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"validation-on-rest-parameters",children:"Validation on REST Parameters"}),"\n",(0,t.jsx)(n.p,{children:"Jakarta Validation annotations can be applied directly to REST method parameters:"}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Parameter-Level Validation",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestPost("/transfer")\npublic Response transfer(\n    @FormData(name="amount")\n    @NotNull\n    @DecimalMin("0.01")\n    @DecimalMax("10000.00")\n    BigDecimal amount,\n    \n    @FormData(name="fromAccount")\n    @NotBlank\n    @Pattern(regexp="^[0-9]{10}$")\n    String fromAccount,\n    \n    @FormData(name="toAccount")\n    @NotBlank\n    @Pattern(regexp="^[0-9]{10}$")\n    String toAccount\n) {\n    // Validation is automatically applied before method execution\n}\n'})})}),"\n",(0,t.jsx)(n.h3,{id:"validation-with-remote-proxies",children:"Validation with Remote Proxies"}),"\n",(0,t.jsx)(n.p,{children:"Jakarta Validation annotations also work seamlessly with REST client remote proxies:"}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Remote Interface with Validation",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Remote(path="/api/users")\npublic interface UserService {\n    \n    @RemotePost("/create")\n    User createUser(\n        @FormData(name="email")\n        @NotNull\n        @Email\n        String email,\n        \n        @FormData(name="username")\n        @NotBlank\n        @Size(min=3, max=50)\n        @Pattern(regexp="^[a-zA-Z0-9_]+$")\n        String username,\n        \n        @FormData(name="age")\n        @Positive\n        @Max(150)\n        Integer age\n    );\n}\n\n// Usage - validation occurs automatically\nRestClient client = RestClient.create().build();\nUserService service = client.getRemote(UserService.class);\n\n// This will throw SchemaValidationException if email is invalid\nservice.createUser("invalid-email", "user123", 25);\n'})})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"combining-validation-approaches",children:"Combining Validation Approaches"}),"\n",(0,t.jsxs)(n.p,{children:["You can combine format validation, Jakarta Validation, and custom ",(0,t.jsx)(n.code,{children:"@Schema"})," constraints for comprehensive validation:"]}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Comprehensive Validation",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestPost("/products")\npublic Product createProduct(\n    @Content\n    @NotNull\n    Product product\n) {...}\n\npublic class Product {\n    @NotBlank\n    @Size(min=1, max=200)\n    @Schema(description="Product name", example="Coffee Maker")\n    private String name;\n    \n    @NotNull\n    @DecimalMin("0.01")\n    @DecimalMax("999999.99")\n    @Schema(description="Product price in USD", format="decimal")\n    private BigDecimal price;\n    \n    @Email\n    @Schema(description="Contact email", format="email")\n    private String contactEmail;\n    \n    @Pattern(regexp="^https?://.*")\n    @Schema(description="Product website", format="uri")\n    private String website;\n    \n    @Size(max=36)\n    @Pattern(regexp="^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")\n    @Schema(description="Product SKU", format="uuid")\n    private String sku;\n}\n'})})}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(n.p,{children:["Validation errors throw ",(0,t.jsx)(n.code,{children:"SchemaValidationException"})," which can be caught and handled:"]}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Custom Error Handling",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RestPost("/users")\npublic Response createUser(@Content CreateUserRequest request) {\n    try {\n        // Validation happens automatically during parameter parsing\n        User user = userService.create(request);\n        return Response.ok(user);\n    } catch (SchemaValidationException e) {\n        return Response\n            .status(400)\n            .entity(new ErrorResponse("Validation failed: " + e.getMessage()))\n            .build();\n    }\n}\n'})})}),"\n",(0,t.jsx)(n.h3,{id:"testing-with-validation",children:"Testing with Validation"}),"\n",(0,t.jsx)(n.p,{children:"When writing tests, validation can be bypassed or verified:"}),"\n",(0,t.jsx)(n.admonition,{title:"Example - Testing Validation",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testEmailValidation() {\n    RestClient client = MockRestClient\n        .create(MyResource.class)\n        .build();\n    \n    // This should fail validation\n    assertThrows(SchemaValidationException.class, () -> {\n        client.post("/users")\n            .query("email", "invalid-email")\n            .complete();\n    });\n    \n    // This should pass validation\n    client.post("/users")\n        .query("email", "valid@example.com")\n        .complete()\n        .assertStatus(200);\n}\n'})})}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/httppart/HttpPartSchema.html",target:"_blank",children:"HttpPartSchema"})," - Schema validation API"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/httppart/HttpPartFormat.html",target:"_blank",children:"HttpPartFormat"})," - Format enumeration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Schema.html",target:"_blank",children:"@Schema"})," - Schema annotation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/httppart/SchemaValidationException.html",target:"_blank",children:"SchemaValidationException"})," - Validation exception"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/topics/HttpPartAnnotations",children:"HTTP Part Annotations"})," - Overview of HTTP part annotations"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);