"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[7857],{6951:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"release-notes/6.1.0","title":"Release 6.1.0","description":"Date: Feb 25, 2017","source":"@site/docs-staging/release-notes/6.1.0.md","sourceDirName":"release-notes","slug":"/release-notes/6.1.0","permalink":"/docs/release-notes/6.1.0","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs/docs-staging/release-notes/6.1.0.md","tags":[],"version":"current","frontMatter":{"title":"Release 6.1.0"},"sidebar":"mainSidebar","previous":{"title":"6.2.0","permalink":"/docs/release-notes/6.2.0"},"next":{"title":"6.0.1","permalink":"/docs/release-notes/6.0.1"}}');var a=s(74848),r=s(28453);const l={title:"Release 6.1.0"},t="Release 6.1.0",d={},c=[{value:"org.apache.juneau",id:"orgapachejuneau",level:3},{value:"org.apache.juneau.rest",id:"orgapachejuneaurest",level:3}];function o(e){const n={a:"a",code:"code",del:"del",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"release-610",children:"Release 6.1.0"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Date:"})," Feb 25, 2017"]}),"\n",(0,a.jsx)(n.p,{children:"Juneau 6.1.0 is a major update."}),"\n",(0,a.jsxs)(n.p,{children:["In particular, this release cleans up the ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext.html",children:"BeanContext"})," API to\nmatch the  ",(0,a.jsx)(n.del,{children:"PropertyStore"}),"/",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/Context.html",children:"Context"}),"/ ",(0,a.jsx)(n.del,{children:"Session"})," paradigm previously\nused in the serializer and parser APIs.\nIt also makes several improvements to the HTML and XML serialization support and introduces HTML5 DTO beans."]}),"\n",(0,a.jsx)(n.h3,{id:"orgapachejuneau",children:"org.apache.juneau"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Improvements to XML serialization support."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"New supported XML formats:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#ATTRS",children:"XmlFormat.ATTRS"})," format can now be\napplied to bean classes to have all bean properties serialized as attributes instead of elements by default."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#ELEMENT",children:"XmlFormat.ELEMENT"})," format can now be\napplied to bean properties to override the ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#ATTRS",children:"XmlFormat.ATTRS"})," setting above on specific bean properties."]}),"\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#ELEMENTS",children:"XmlFormat.ELEMENTS"})," format can be\napplied to a bean property of type array/Collection to represent the child elements."]}),"\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#MIXED",children:"XmlFormat.MIXED"})," format can be\napplied to a bean property of type array/Collection to represent mixed content (text + child elements)."]}),"\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#MIXED_PWS",children:"XmlFormat.MIXED_PWS"})," format.\nIdentical to ",(0,a.jsx)(n.code,{children:"MIXED"})," except preserves whitespace."]}),"\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#TEXT",children:"XmlFormat.TEXT"})," format can be applied\nto a bean property of a single object to represent a text node as a child."]}),"\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#TEXT_PWS",children:"XmlFormat.TEXT_PWS"})," format.\nIdentical to ",(0,a.jsx)(n.code,{children:"TEXT"})," except preserves whitespace."]}),"\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#XMLTEXT",children:"XmlFormat.XMLTEXT"})," format that's\nidentical to ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlFormat.html#TEXT",children:"XmlFormat.TEXT"})," except XML\ncontent is not escaped and serialized directly as the child content.\nThe parser will reconvert this to the original XML text during parsing."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New support methodology and other improvements to  ",(0,a.jsx)(n.del,{children:"xml"})," documentation."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Eliminated unnecessary ",(0,a.jsx)(n.code,{children:"<string>"})," elements."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Eliminated  ",(0,a.jsx)(n.del,{children:"XmlContentHandler"})," class."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Parser efficiency improvements through reuse of string builders."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Reworked and simplified the default XML serializers.\nThe ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/XmlSerializer.html#DEFAULT",children:"XmlSerializer.DEFAULT"})," serializer now has\nnamespaces disabled, and ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/xml/XmlSerializer.html#DEFAULT_NS",children:"XmlSerializer.DEFAULT_NS"})," has namespaces enabled.\nThe 'XML-JSON' serializers have been eliminated."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Eliminated the ",(0,a.jsx)(n.code,{children:"addJsonTypeAttrs"})," and ",(0,a.jsx)(n.code,{children:"addJsonStringTypeAttrs"})," settings."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Namespace support is now disabled by default."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Significant modifications and improvements to HTML serialization support."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Parser converted from ",(0,a.jsx)(n.code,{children:"XMLEventReader"}),"-based to ",(0,a.jsx)(n.code,{children:"XMLStreamReader"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Eliminated many unnecessary type tags and ",(0,a.jsx)(n.code,{children:"<string>"})," elements and improved the readable layout.\nThe new format is much leaner."]}),"\n",(0,a.jsxs)(n.li,{children:["New exhaustive support methodology section added to  ",(0,a.jsx)(n.del,{children:"html"})," documentation."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New HTML5 DTO support:  ",(0,a.jsx)(n.del,{children:"html5"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext.html",children:"BeanContext"})," class split into separate ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext.html",children:"BeanContext"})," and ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanSession.html",children:"BeanSession"})," classes."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Session object meant to be single-use that can be discarded after use and contains session-level object cache\nand overridable Locale and TimeZone."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.del,{children:"SerializerContext"})," and  ",(0,a.jsx)(n.del,{children:"ParserContext"})," now extend directly from ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext.html",children:"BeanContext"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/serializer/SerializerSession.html",children:"SerializerSession"})," and ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/parser/ParserSession.html",children:"ParserSession"})," now extend directly from ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanSession.html",children:"BeanSession"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New settings in ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext.html",children:"BeanContext"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"BEAN_debug"})," - Debug setting. Replaces individual debug properties in the serializer and parser contexts."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"BEAN_locale"})," - Specifies a default locale at the context level."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"BEAN_timeZone"})," - Specifies a default timezone at the context level."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"BEAN_mediaType"})," - Specifies a default media type at the context level."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Improvements to Parser class:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Simplified the parse methods (e.g. ",(0,a.jsx)(n.code,{children:"parseMap()"}),", ",(0,a.jsx)(n.code,{children:"parseCollection()"}),") by replacing them with two simple methods:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/parser/Parser.html#parse(Object,Class)",children:"Parser.parse(Object,Class)"})," - Normal\nmethod."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/parser/Parser.html#parse(Object,Type,Type...)",children:"Parser.parse(Object,Type,Type...)"})," - Method for parsing into parameterized maps and collections."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Using these methods, you can construct arbitrarily complex objects consisting of maps and collections.\nYou could do this before but it required constructing a ",(0,a.jsx)(n.code,{children:"ClassMeta"})," object."]}),"\n",(0,a.jsx)(n.p,{children:"For example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Old way:\nClassMeta<?> cm = parser.getMapClassMeta(\n    HashMap.class, \n    String.class, \n    parser.getCollectionClassMeta(\n        LinkedList.class, \n        MyBean.class\n    )\n);\nMap<String,List<MyBean>> map = (Map<String,List<MyBean>>)parser.parse(input, cm);\t\n\n// New way:\nMap<String,List<MyBean>> map = parser.parse(input, HashMap.class, String.class, LinkedList.class, MyBean.class);\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Arbitrarily-complex parameterized maps and collections can now be parsed without the need for creating\nintermediate ",(0,a.jsx)(n.code,{children:"ClassMeta"})," objects."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["No need for casting anymore if you were using the old ",(0,a.jsx)(n.code,{children:"parseMap()"})," and ",(0,a.jsx)(n.code,{children:"parseCollection()"})," methods!"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Changes allow me to eliminate ",(0,a.jsx)(n.code,{children:"BeanContext.normalizeClassMeta()"})," method."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Convenience methods added for setting parser properties:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Old way:\nnew JsonParser().setProperty(PARSER_strict, true).setProperty(BEAN_locale, mylocale);\n\n// New way:\nnew JsonParser().setStrict(true).setLocale(mylocale);\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Improvements to Serializer class:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Convenience methods added for setting serializer properties:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Old way:\nnew JsonSerializer().setProperty(JSON_simpleMode, true).setProperty(SERIALIZER_quoteChar, '\"');\n\n// New way:\nnew JsonSerializer().setSimpleMode(true).setQuoteChar('\"');\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Simplified  ",(0,a.jsx)(n.del,{children:"PojoSwap"})," class. Now just two methods:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"PojoSwap.swap(BeanSession,Object)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"PojoSwap.unswap(BeanSession,Object,ClassMeta)"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["General code improvements made to ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/ClassMeta.html",children:"ClassMeta"})," class."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"All fields are now final which should improve overall performance."}),"\n",(0,a.jsxs)(n.li,{children:["Replaced support for ",(0,a.jsx)(n.code,{children:"toObjectMap()"})," and ",(0,a.jsx)(n.code,{children:"fromObjectMap()/T(ObjectMap)"})," methods with generalized\n",(0,a.jsx)(n.code,{children:"swap(BeanSession)"}),"/",(0,a.jsx)(n.code,{children:"unswap(BeanSession,X)"}),"/",(0,a.jsx)(n.code,{children:"T(BeanSession,X)"})," methods.\nSee new section ",(0,a.jsx)(n.strong,{children:"Swap methods"})," for information."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Session-level media type now available through ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanSession.html#getMediaType()",children:"BeanSession.getMediaType()"})," method.\nAllows for swaps and serializer/parser behavior to be tailored to individual media types."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Several new ",(0,a.jsx)(n.a,{href:"../apidocs/java/util/Calendar.html",children:"Calendar"})," and ",(0,a.jsx)(n.a,{href:"../apidocs/java/util/Date.html",children:"Date"})," swaps:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"ToString"}),",  ",(0,a.jsx)(n.del,{children:"ToString"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/lang/String.html",children:"Strings"})," using the ",(0,a.jsx)(n.code,{children:"Date.toString()"})," method."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"ISO8601DT"}),",  ",(0,a.jsx)(n.del,{children:"ISO8601DT"})," - To ISO8601 date-time strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"ISO8601DTZ"}),",  ",(0,a.jsx)(n.del,{children:"ISO8601DTZ"})," - Same as ",(0,a.jsx)(n.code,{children:"ISO8601DT"}),", except always serializes in GMT."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"ISO8601DTP"}),",  ",(0,a.jsx)(n.del,{children:"ISO8601DTP"})," - Same as ",(0,a.jsx)(n.code,{children:"ISO8601DT"})," except with millisecond precision."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"ISO8601DTPZ"}),",  ",(0,a.jsx)(n.del,{children:"ISO8601DTPZ"})," - Same as ",(0,a.jsx)(n.code,{children:"ISO8601DTZ"})," except with millisecond precision."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"RFC2822DT"}),",  ",(0,a.jsx)(n.del,{children:"RFC2822DT"})," - To RFC2822 date-time strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"RFC2822DTZ"}),",  ",(0,a.jsx)(n.del,{children:"RFC2822DTZ"})," - Same as ",(0,a.jsx)(n.code,{children:"RFC2822DT"}),", except always serializes in GMT."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"RFC2822D"}),",  ",(0,a.jsx)(n.del,{children:"RFC2822D"})," - To RFC2822 date strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateTimeSimple"}),",  ",(0,a.jsx)(n.del,{children:"DateTimeSimple"})," - To simple ",(0,a.jsx)(n.code,{children:'"yyyy/MM/dd HH:mm:ss"'})," date-time strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateSimple"}),",  ",(0,a.jsx)(n.del,{children:"DateSimple"})," - To simple ",(0,a.jsx)(n.code,{children:'"yyyy/MM/dd"'})," date strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"TimeSimple"}),",  ",(0,a.jsx)(n.del,{children:"TimeSimple"})," - To simple ",(0,a.jsx)(n.code,{children:'"HH:mm:ss"'})," time strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateFull"}),",  ",(0,a.jsx)(n.del,{children:"DateFull"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#FULL",children:"DateFormat.FULL"})," date strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateLong"}),",  ",(0,a.jsx)(n.del,{children:"DateLong"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#LONG",children:"DateFormat.LONG"})," date strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateMedium"}),",  ",(0,a.jsx)(n.del,{children:"DateMedium"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#MEDIUM",children:"DateFormat.MEDIUM"})," date\nstrings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateShort"}),",  ",(0,a.jsx)(n.del,{children:"DateShort"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#SHORT",children:"DateFormat.SHORT"})," date strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"TimeFull"}),",  ",(0,a.jsx)(n.del,{children:"TimeFull"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#FULL",children:"DateFormat.FULL"})," time strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"TimeLong"}),",  ",(0,a.jsx)(n.del,{children:"TimeLong"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#LONG",children:"DateFormat.LONG"})," time strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"TimeMedium"}),",  ",(0,a.jsx)(n.del,{children:"TimeMedium"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#MEDIUM",children:"DateFormat.MEDIUM"})," time\nstrings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"TimeShort"}),",  ",(0,a.jsx)(n.del,{children:"TimeShort"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#SHORT",children:"DateFormat.SHORT"})," time strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateTimeFull"}),",  ",(0,a.jsx)(n.del,{children:"DateTimeFull"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#FULL",children:"DateFormat.FULL"})," date-time\nstrings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateTimeLong"}),",  ",(0,a.jsx)(n.del,{children:"DateTimeLong"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#LONG",children:"DateFormat.LONG"})," date-time\nstrings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateTimeMedium"}),",  ",(0,a.jsx)(n.del,{children:"DateTimeMedium"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#MEDIUM",children:"DateFormat.MEDIUM"})," date-time strings."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.del,{children:"DateTimeShort"}),",  ",(0,a.jsx)(n.del,{children:"DateTimeShort"})," - To ",(0,a.jsx)(n.a,{href:"../apidocs/java/text/DateFormat.html#SHORT",children:"DateFormat.SHORT"})," date-time strings."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New method ",(0,a.jsx)(n.del,{children:"SerializerGroup.getSerializerMatch(String)"})," that returns the matched serializer and media type."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New method ",(0,a.jsx)(n.del,{children:"ParserGroup.getParserMatch(String)"})," that returns the matched parser and media type."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New method ",(0,a.jsx)(n.del,{children:"EncoderGroup.getEncoderMatch(String)"})," that returns the matched encoder and encoding."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"General improvements to Bean Dictionary support."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanDictionaryList.html",children:"BeanDictionaryList"})," class can be used for defining\nreusable sets of bean dictionaries consisting of classes annotated with ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html#typeName()",children:"@Bean(typeName)"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanDictionaryMap.html",children:"BeanDictionaryMap"})," class can be used for defining\nreusable sets of bean dictionaries consisting of classes not annotated with ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html#typeName()",children:"@Bean(typeName)"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.del,{children:"@Bean(beanDictionary)"})," annotation."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:['Removed restriction on getters and setters to be prefixed with "getX/setX/isX" if a ',(0,a.jsx)(n.del,{children:"@BeanProperty(name)"}),"\nannotation is used."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Improvements to ATOM DTO:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/dto/atom/AtomBuilder.html",children:"AtomBuilder"})," class."]}),"\n",(0,a.jsx)(n.li,{children:"New setter method names for a better fluent design."}),"\n",(0,a.jsxs)(n.li,{children:["Updated  ",(0,a.jsx)(n.del,{children:"atom"})," documentation."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New ",(0,a.jsx)(n.del,{children:"MapSwap"})," and  ",(0,a.jsx)(n.del,{children:"StringSwap"})," classes."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/serializer/WriterSerializer.html#println(Object)",children:"WriterSerializer.println(Object)"})," method.\nUseful for debugging purposes."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext.html#getClassMeta(Type,Type...)",children:"BeanContext.getClassMeta(Type,Type...)"})," and ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanSession.html#getClassMeta(Type,Type...)",children:"BeanSession.getClassMeta(Type,Type...)"})," methods for retrieving Map and Collection class metas.\nReplaces the various ",(0,a.jsx)(n.code,{children:"getMapClassMeta()"}),"/",(0,a.jsx)(n.code,{children:"getCollectionClassMeta()"})," methods."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New section added to this document: ",(0,a.jsx)(n.strong,{children:"Juneau Data Transfer Objects (org.apache.juneau.dto)"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Modified the UON specification to work with mixed content."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The new specification is considerably cleaner and eliminates the need for separate normal/simple modes.\nIt also allows for arbitrary whitespace to be added to the output without any confusion."}),"\n",(0,a.jsxs)(n.li,{children:["Eliminated the ",(0,a.jsx)(n.code,{children:"UonParser.DEFAULT_WS_AWARE"})," and ",(0,a.jsx)(n.code,{children:"UrlEncodingParser.DEFAULT_WS_AWARE"})," parsers.\nThe normal ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/uon/UonParser.html#DEFAULT",children:"UonParser.DEFAULT"})," and ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/urlencoding/UrlEncodingParser.html#DEFAULT",children:"UrlEncodingParser.DEFAULT"})," parsers will now handle whitespace."]}),"\n",(0,a.jsxs)(n.li,{children:["Eliminated the ",(0,a.jsx)(n.code,{children:"UonParserContext.UON_whitespaceAware"})," configuration setting."]}),"\n",(0,a.jsxs)(n.li,{children:["Eliminated the ",(0,a.jsx)(n.code,{children:"UonSerializer.DEFAULT_SIMPLE"}),", ",(0,a.jsx)(n.code,{children:"UonSerializer.DEFAULT_SIMPLE_ENCODING"})," and\n",(0,a.jsx)(n.code,{children:"UrlEncodingSerializer.DEFAULT_SIMPLE"})," serializers since there is no separate simple mode anymore."]}),"\n",(0,a.jsxs)(n.li,{children:["Eliminated the ",(0,a.jsx)(n.code,{children:"UonParserContext.UON_simpleMode"})," configuration setting."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Added new ",(0,a.jsx)(n.del,{children:"OutputStreamSerializer.serializeToHex(Object)"})," method.\nUseful mostly for testing purposes.\nEquivalently, the ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/parser/InputStreamParser.html#parse(Object,Class)",children:"InputStreamParser.parse(Object,Class)"})," method can now read the output from this method."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Eliminated the ",(0,a.jsx)(n.code,{children:"@Bean(subTypeProperty)"})," and ",(0,a.jsx)(n.code,{children:"@Bean(subTypes)"})," annotations and replaced them with the ability to\ndefine subtypes using the existing ",(0,a.jsx)(n.del,{children:"@Bean(beanDictionary)"})," annotation on parent classes and interfaces.\nThis has the added benefit of simplifying the overall code."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.del,{children:"SerializerContext.SERIALIZER_addBeanTypeProperties"})," setting is now enabled by default."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Combined the ",(0,a.jsx)(n.code,{children:"SERIALIZER_addIndentation"}),"/",(0,a.jsx)(n.code,{children:"JSON_addWhitespace"}),"/",(0,a.jsx)(n.code,{children:"UON_addWhitespace"})," properties into a single\n",(0,a.jsx)(n.del,{children:"SerializerContext.SERIALIZER_useWhitespace"})," setting."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"orgapachejuneaurest",children:"org.apache.juneau.rest"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestRequest.html",children:"RestRequest"})," now passes locale and timezone to\nserializers/parsers/transforms."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.del,{children:"RestRequest.getTimeZone()"})," method."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Standardized the following methods in ",(0,a.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestRequest.html",children:"RestRequest"})," to remove\ndependency on ",(0,a.jsx)(n.code,{children:"ClassMeta"})," objects and eliminate the need for casts:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getHeader(String,Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getHeader(String,Object,Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getHeader(String,Type,Type...)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getQueryParameter(String,Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getQueryParameter(String,Object,Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getQueryParameter(String,Type,Type...)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getQueryParameter(String,Object,Type,Type...)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getQueryParameters(String,Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getQueryParameters(String,Type,Type...)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getFormDataParameter(String,Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getFormDataParameter(String,Object,Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getFormDataParameters(String,Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getFormDataParameter(String,Type,Type...)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getFormDataParameters(String,Type,Type...)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getPathParameter(String,Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getPathParameter(String,Type,Type...)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getBody(Class)"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.del,{children:"RestRequest.getBody(Type,Type...)"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["New methods on  ",(0,a.jsx)(n.del,{children:"NameValuePairs"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Fixed issue where whitespace was not added to UON/URL-Encoding output when ",(0,a.jsx)(n.code,{children:"&plainText=true"})," specified."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var i=s(96540);const a={},r=i.createContext(a);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);