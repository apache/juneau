"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[9136],{28453:(t,e,n)=>{n.d(e,{R:()=>r,x:()=>o});var i=n(96540);const s={},a=i.createContext(s);function r(t){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:r(t.components),i.createElement(a.Provider,{value:e},t.children)}},76029:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"topics/11.14.03.AuthenticationForm","title":"FORM-based Authentication","description":"The RestClient.Builder class does not itself","source":"@site/docs/topics/11.14.03.AuthenticationForm.md","sourceDirName":"topics","slug":"/topics/AuthenticationForm","permalink":"/docs/topics/AuthenticationForm","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/11.14.03.AuthenticationForm.md","tags":[],"version":"current","frontMatter":{"title":"FORM-based Authentication","slug":"AuthenticationForm"},"sidebar":"mainSidebar","previous":{"title":"11.14.2. BASIC Authentication","permalink":"/docs/topics/AuthenticationBASIC"},"next":{"title":"11.14.4. OIDC Authentication","permalink":"/docs/topics/AuthenticationOIDC"}}');var s=n(74848),a=n(28453);const r={title:"FORM-based Authentication",slug:"AuthenticationForm"},o=void 0,c={},u=[];function l(t){const e={code:"code",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestClient.Builder.html",target:"_blank",children:"RestClient.Builder"})," class does not itself\nprovide FORM-based authentication since there is no standard way of providing such support.\nTypically, to perform FORM-based or other types of authentication, you'll want to create your own subclass of ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestClient.Builder.html",target:"_blank",children:"RestClient.Builder"})," and override the ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestClient.Builder.html#createHttpClient()",target:"_blank",children:"RestClient.Builder.createHttpClient()"})," method to provide an authenticated client.\nThe following example shows an implementation of a client that performs FORM-based authentication against the IBM Jazz\nplatform."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'/**\n* Constructor.\n*/\npublic JazzRestClient.Builder(URI jazzUri, String user, String pw) throws IOException {\n    ...\n}\n\n/**\n* Override the createHttpClient() method to return an authenticated client.\n*/\n@Override /* RestClient.Builder */\nprotected CloseableHttpClient createHttpClient() throws Exception {\n    CloseableHttpClient client = super.createHttpClient();\n    formBasedAuthenticate(client);\n    visitAuthenticatedURL(client);\n    return client;\n}\n\n/*\n* Performs form-based authentication against the Jazz server.\n*/\nprivate void formBasedAuthenticate(HttpClient client) throws IOException {\n\n    URI uri2 = jazzUri.resolve("j_security_check");\n    HttpPost request = new HttpPost(uri2);\n    request.setConfig(RequestConfig.custom().setRedirectsEnabled(false).build());\n\n    // Charset must explicitly be set to UTF-8 to handle user/pw with non-ascii characters.\n    request.addHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");\n\n    List params = AList.of(\n        BasicNameValuePair.of("j_username", user),\n        BasicNameValuePair.of("j_password", pw)\n    );\n    request.setEntity(new UrlEncodedFormEntity(params));\n\n    HttpResponse response = client.execute(request);\n    try {\n        int rc = response.getStatusLine().getStatusCode();\n\n        Header authMsg = response.getFirstHeader("X-com-ibm-team-repository-web-auth-msg");\n        if (authMsg != null)\n            throw new IOException(authMsg.getValue());\n\n        // The form auth request should always respond with a 200 ok or 302 redirect code\n        if (rc == SC_MOVED_TEMPORARILY) {\n            if (response.getFirstHeader("Location").getValue().isPattern("^.*/auth/authfailed.*$"))\n                throw new IOException("Invalid credentials.");\n        } else if (rc != SC_OK) {\n            throw new IOException("Unexpected HTTP status: " + rc);\n        }\n    } finally {\n        EntityUtils.consume(response.getEntity());\n    }\n}\n\n/*\n* This is needed for Tomcat because it responds with SC_BAD_REQUEST when the j_security_check URL is visited before an\n* authenticated URL has been visited. This same URL must also be visited after authenticating with j_security_check\n* otherwise tomcat will not consider the session authenticated\n*/\nprivate int visitAuthenticatedURL(HttpClient httpClient) throws IOException {\n    HttpGet authenticatedURL = new HttpGet(jazzUri.resolve("authenticated/identity"));\n    HttpResponse response = httpClient.execute(authenticatedURL);\n    try {\n        return response.getStatusLine().getStatusCode();\n    } finally {\n        EntityUtils.consume(response.getEntity());\n    }\n}\n'})})]})}function d(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(l,{...t})}):l(t)}}}]);