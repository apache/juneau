"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[6370],{10968:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"topics/16.03.00.JuneauPetstoreApi","title":"juneau-petstore-api","description":"The juneau-petstore-api module contains the Java interface of our application and the DTOs that go along with it.","source":"@site/docs-staging/topics/16.03.00.JuneauPetstoreApi.md","sourceDirName":"topics","slug":"/topics/16.03.00.JuneauPetstoreApi","permalink":"/docs/topics/16.03.00.JuneauPetstoreApi","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/16.03.00.JuneauPetstoreApi.md","tags":[],"version":"current","frontMatter":{"title":"juneau-petstore-api"},"sidebar":"mainSidebar","previous":{"title":"16.2. Running the App","permalink":"/docs/topics/16.02.00.JuneauPetstoreRunning"},"next":{"title":"16.4. juneau-petstore-client","permalink":"/docs/topics/16.04.00.JuneauPetstoreClient"}}');var o=n(74848),s=n(28453);const i={title:"juneau-petstore-api"},r=void 0,d={},c=[{value:"PetStore.java",id:"petstorejava",level:4},{value:"Maven Dependency",id:"maven-dependency",level:4},{value:"Pet.java",id:"petjava",level:4}];function p(t){const e={a:"a",code:"code",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"juneau-petstore-api"})," module contains the Java interface of our application and the DTOs that go along with it."]}),"\n",(0,o.jsx)(e.p,{children:"These classes are meant to be shared between the server and client side code."}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"PetStore"})," class is our primary class for defining our application."]}),"\n",(0,o.jsx)(e.p,{children:"It's a standard Java interface with annotations used to describe how the methods map to REST calls."}),"\n",(0,o.jsx)(e.h4,{id:"petstorejava",children:"PetStore.java"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Remote(path="/petstore")\npublic interface PetStore {\n\n\t//------------------------------------------------------------------------------------------------------------------\n\t// Pets\n\t//------------------------------------------------------------------------------------------------------------------\n\n\t/**\n\t * Returns all pets in the database.\n\t *\n\t * @return All pets in the database.\n\t * @throws NotAcceptable Unsupported `Accept` header specified.\n\t */\n\t@RemoteGet("/pet")\n\tpublic Collection<Pet> getPets() throws NotAcceptable;\n\n\t/**\n\t * Returns a pet from the database.\n\t *\n\t * @param petId The ID of the pet to retrieve.\n\t * @return The pet.\n\t * @throws IdNotFound Pet was not found.\n\t * @throws NotAcceptable Unsupported `Accept` header specified.\n\t */\n\t@RemoteGet("/pet/{petId}")\n\tpublic Pet getPet(\n\t\t@Path(\n\t\t\tname="petId",\n\t\t\tschema=@Schema(description="ID of pet to return")\n\t\t) long petId\n\t) throws IdNotFound, NotAcceptable;\n\n\t/**\n\t * Adds a pet to the database.\n\t *\n\t * @param pet The pet data to add to the database.\n\t * @return Ok if successful.\n\t * @throws IdConflict ID already in use.\n\t * @throws NotAcceptable Unsupported `Accept` header specified.\n\t * @throws UnsupportedMediaType Unsupported `Content-Type` header specified.\n\t */\n\t@RemotePost("/pet")\n\tpublic long createPet(\n\t\t@Content(\n\t\t\tschema=@Schema(description="Pet object to add to the store")\n\t\t) CreatePet pet\n\t) throws IdConflict, NotAcceptable, UnsupportedMediaType;\n\n\t/**\n\t * Updates a pet in the database.\n\t *\n\t * @param pet The pet data to add to the database.\n\t * @return Ok if successful.\n\t * @throws IdNotFound ID not found.\n\t * @throws NotAcceptable Unsupported `Accept` header specified.\n\t * @throws UnsupportedMediaType Unsupported `Content-Type` header specified.\n\t */\n\t@RemotePut("/pet/{petId}")\n\tpublic Ok updatePet(\n\t\t@Content(\n\t\t\tschema=@Schema(description="Pet object that needs to be added to the store")\n\t\t) UpdatePet pet\n\t) throws IdNotFound, NotAcceptable, UnsupportedMediaType;\n\n\t/**\n\t * Find all pets with the matching statuses.\n\t *\n\t * @param status The statuses to match against.\n\t * @return The pets that match the specified statuses.\n\t * @throws NotAcceptable Unsupported `Accept` header specified.\n\t */\n\t@RemoteGet("/pet/findByStatus")\n\tpublic Collection<Pet> findPetsByStatus(\n\t\t@Query(\n\t\t\tname="status",\n\t\t\tschema=@Schema(\n\t\t\t\tdescription="Status values that need to be considered for filter.",\n\t\t\t\trequired=true,\n\t\t\t\ttype="array",\n\t\t\t\tcollectionFormat="csv",\n\t\t\t\titems=@Items(\n\t\t\t\t\ttype="string",\n\t\t\t\t\t_enum="AVAILABLE,PENDING,SOLD",\n\t\t\t\t\t_default="AVAILABLE"\n\t\t\t\t)\n\t\t\t)\n\t\t) PetStatus[] status\n\t) throws NotAcceptable;\n\n\t/**\n\t * Deletes the specified pet.\n\t *\n\t * @param apiKey Security key.\n\t * @param petId ID of pet to delete.\n\t * @return Ok if successful.\n\t * @throws IdNotFound Pet not found.\n\t * @throws NotAcceptable Unsupported `Accept` header specified.\n\t */\n\t@RemoteDelete("/pet/{petId}")\n\tpublic Ok deletePet(\n\t\t@Header(\n\t\t\tname="api_key",\n\t\t\tschema=@Schema(\n\t\t\t\tdescription="Security API key",\n\t\t\t\trequired=true\n\t\t\t)\n\t\t) String apiKey,\n\t\t@Path(\n\t\t\tname="petId",\n\t\t\tschema=@Schema(description="Pet id to delete")\n\t\t) long petId\n\t) throws IdNotFound, NotAcceptable;\n\n\t/**\n\t * Deletes all pets in the database.\n\t *\n\t * @return Ok if successful.\n\t */\n\t@RemoteDelete("/pet")\n\tpublic Ok deleteAllPets();\n\n\t//------------------------------------------------------------------------------------------------------------------\n\t// Orders\n\t//------------------------------------------------------------------------------------------------------------------\n\n\t// ... (additional order methods would go here)\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"@Remote"})," and ",(0,o.jsx)(e.code,{children:"@RemoteX"})," are client-side annotations used to map the method calls to REST and will be describe in the\nclient code section."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"@Path"})," and ",(0,o.jsx)(e.code,{children:"@Body"})," are used by both the client and server side code to map to REST artifacts on both sides."]}),"\n",(0,o.jsx)(e.p,{children:"Both sets of annotations are provided by pulling in the Juneau dependency below:"}),"\n",(0,o.jsx)(e.h4,{id:"maven-dependency",children:"Maven Dependency"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.apache.juneau</groupId>\n    <artifactId>juneau-marshall</artifactId>\n    <version>9.x.x</version>\n</dependency>\n"})}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"Pet"})," class is a DTO that gets serialized over the REST connection."]}),"\n",(0,o.jsx)(e.p,{children:"It is also annotated with JPA annotations so that they can easily be stored in a JPA datastore on the server side."}),"\n",(0,o.jsx)(e.h4,{id:"petjava",children:"Pet.java"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Bean(typeName="Pet", properties="id,species,name,tags,price,status")\n@Entity(name="PetstorePet")\npublic class Pet {\n\n\t@Column @Id @GeneratedValue\n\t@Schema(description="Unique identifier for this pet.")\n\t@Html(link="servlet:/pet/{id}")\n\tprivate long id;\n\n\t@Column(length=50)\n\t@Schema(description="Pet name.", minLength=3, maxLength=50)\n\tprivate String name;\n\n\t@Column\n\t@Schema(description="Price of pet.", maximum="999.99")\n\t@Html(render=PriceRender.class)\n\tprivate float price;\n\n\t// ... (additional fields and methods would go here)\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["The annotations here are a combination of Juneau annotations for controlling marshalling (",(0,o.jsx)(e.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html",children:"@Bean"}),", ",(0,o.jsx)(e.a,{href:"../apidocs/org/apache/juneau/html/annotation/Html.html",children:"@Html"}),") and\ndocumentation/validation (",(0,o.jsx)(e.code,{children:"@Schema"}),"), and JPA annotations for database persistence (",(0,o.jsx)(e.code,{children:"@Entity"}),", ",(0,o.jsx)(e.code,{children:"@Column"}),")."]}),"\n",(0,o.jsx)(e.p,{children:"Most applications may choose to have separate classes for DTOs and JPA beans since you typically are not going to want\nto expose server-side details to client-side code."}),"\n",(0,o.jsx)(e.p,{children:"In these examples however they were combined into the same classes for brevity."})]})}function l(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(p,{...t})}):p(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>r});var a=n(96540);const o={},s=a.createContext(o);function i(t){const e=a.useContext(s);return a.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:i(t.components),a.createElement(s.Provider,{value:e},t.children)}}}]);