"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[6675],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var o=i(96540);const t={},c=o.createContext(t);function a(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(c.Provider,{value:n},e.children)}},88180:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"topics/14.06.00.Config","title":"Config","description":"The following methods can be used to define the configuration for your microservice using the powerful Config API:","source":"@site/docs/topics/14.06.00.Config.md","sourceDirName":"topics","slug":"/topics/MicroserviceCoreConfig","permalink":"/docs/topics/MicroserviceCoreConfig","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/14.06.00.Config.md","tags":[],"version":"current","frontMatter":{"title":"Config","slug":"MicroserviceCoreConfig"},"sidebar":"mainSidebar","previous":{"title":"13.5. Manifest","permalink":"/docs/topics/Manifest"},"next":{"title":"13.7. System Properties","permalink":"/docs/topics/SystemProperties"}}');var t=i(74848),c=i(28453);const a={title:"Config",slug:"MicroserviceCoreConfig"},r=void 0,s={},l=[{value:"BasicRestConfig.java",id:"basicrestconfigjava",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The following methods can be used to define the configuration for your microservice using the powerful ",(0,t.jsx)(n.code,{children:"Config"})," API:"]}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html",target:"_blank",children:"Microservice.Builder"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("java-method",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html#config(org.apache.juneau.config.Config)",target:"_blank",children:"config(Config)"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("java-method",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html#configName(java.lang.String)",target:"_blank",children:"configName(String)"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("java-method",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html#configStore(org.apache.juneau.config.store.ConfigStore)",target:"_blank",children:"configStore(ConfigStore)"})})})]}),"\n",(0,t.jsx)(n.p,{children:'If you do not specify any of this information, we attempt to resolve it through the following methods: - Resolve file\nfirst in working directory, then in classpath, using the following names: - The "configFile" argument in the command\nline arguments passed in through the constructor.'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The value of the ",(0,t.jsx)(n.code,{children:"Main-Config"})," entry in the manifest file."]}),"\n",(0,t.jsxs)(n.li,{children:["A config file in the same location and with the same name as the executable jar file. (e.g. ",(0,t.jsx)(n.code,{children:"java -jar myjar.jar"})," will look for ",(0,t.jsx)(n.code,{children:"myjar.cfg"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["Resolve any ",(0,t.jsx)(n.code,{children:"*.cfg"})," file that can be found in the working directory."]}),"\n",(0,t.jsx)(n.li,{children:"Resolve any of the following files in the classpath:"}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"juneau.cfg"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"default.cfg"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"application.cfg"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"app.cfg"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"settings.cfg"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If no configuration file is found, and empty in-memory configuration is used.\nThe ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html#configName(java.lang.String)",target:"_blank",children:"configName(String)"}),"\nmethod allows you to explicitly specify the name of the external configuration file location for your microservice."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Microservice\n    .create()\n    .config("my-files/MyMicroservice.cfg")\n    .build()\n    .start()\n;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["By default, we try to find the file on the file system and then the classpath.\nIf located on the file system, then the configuration is writeable and the microservice can automatically listen for and\nreact to changes in the configuration file on the file system.\nIf located on the classpath, then the configuration can still react to modifications made to it through the ",(0,t.jsx)(n.code,{children:"Config"})," API\nbut the changes cannot be persisted since the location prevents the file from being modified."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html#configStore(org.apache.juneau.config.store.ConfigStore)",target:"_blank",children:"configStore(ConfigStore)"})," method can be used to explicitly specify a configuration store.\nThis can include your own custom configuration store, such as one that's implemented in a relational database."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Microservice\n    .create()\n    .configStore(new MyConfigSqlStore())\n    .configName("MyConfig")\n    .build()\n    .start()\n;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html#config(org.apache.juneau.config.Config)",target:"_blank",children:"config(Config)"})," method can be\nused to explicitly specify a ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/config/Config.html",target:"_blank",children:"Config"})," file as the microservice\nconfiguration.\nWhen this method is used, the above two methods are bypassed entirely."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"Config config = getMyOwnConfig();\n\nMicroservice\n    .create()\n    .config(config)\n    .build()\n    .start()\n;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once the configuration is resolved, it is made as the system default configuration available through the ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/config/Config.html#getSystemDefault()",target:"_blank",children:"Config.getSystemDefault()"}),".\nThis in turn allows it to be used by REST resources that reference the system default configuration via the\n",(0,t.jsx)(n.code,{children:"SYSTEM_DEFAULT"})," such as those implementing the ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/servlet/BasicRestOperations.html",target:"_blank",children:"BasicRestConfig"})," interface."]}),"\n",(0,t.jsx)(n.h4,{id:"basicrestconfigjava",children:"BasicRestConfig.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Rest(\n    config="$S{juneau.configFile,SYSTEM_DEFAULT}"\n    ...\n)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.html#getConfig()",target:"_blank",children:"Microservice.getConfig()"})," method can be\nused to get access to the configuration."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Config config = Microservice.getInstance().getConfig();\n\nFile logDir = config.get("Logging/logDir").as(File.class).orElse(null);\nboolean append = config.get("Logging/append").asBoolean().orElse(null);\nString format = config.get("Logging/format", "[{date} {level}] {msg}%n").orElse(null);\nlong limit = config.get("Logging/limit").asLong().orElse(null);\nMap levels = config.get("Logging/levels").as(Map.class, String.class, Level.class).orElse(null);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Changes to the configuration file can trigger notifications that can be used to restart your microservice or make\nvarious other on-the-fly changes.\nThis can be accomplished by either overriding the ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.html#onConfigChange(org.apache.juneau.config.event.ConfigEvents)",target:"_blank",children:"Microservice.onConfigChange(ConfigEvents)"})," or implementing a listener and using the ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/MicroserviceListener.html#onConfigChange(org.apache.juneau.microservice.Microservice,org.apache.juneau.config.event.ConfigEvents)",target:"_blank",children:"onConfigChange()"})," methods.\nThese will be described in detail later."]}),"\n",(0,t.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/topics/JuneauConfigBasics",children:"juneau-config"})})})]})}function g(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);