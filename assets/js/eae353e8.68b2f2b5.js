"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[1754],{26548:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"topics/08.25.00.ResponseProcessors","title":"Response Processors","description":"The REST Server API uses the concept of registered response processors for converting objects returned by REST methods","source":"@site/docs/topics/08.25.00.ResponseProcessors.md","sourceDirName":"topics","slug":"/topics/08.25.00.ResponseProcessors","permalink":"/docs/topics/08.25.00.ResponseProcessors","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs/topics/08.25.00.ResponseProcessors.md","tags":[],"version":"current","frontMatter":{"title":"Response Processors"},"sidebar":"tutorialSidebar","previous":{"title":"8.24. RestOp Context","permalink":"/docs/topics/08.24.00.RestOpContext"},"next":{"title":"8.26. REST RPC","permalink":"/docs/topics/08.26.00.RestRpc"}}');var n=o(74848),t=o(28453);const c={title:"Response Processors"},a=void 0,i={},p=[];function l(e){const s={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["The REST Server API uses the concept of registered response processors for converting objects returned by REST methods\nor set through ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/RestResponse.html#setContent(Object)",children:"RestResponse.setContent(Object)"})," into appropriate HTTP responses.\nBy default, REST resource classes are registered with the following response processors:"]}),"\n",(0,n.jsxs)("tree",{children:[(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/processor/HttpEntityProcessor.html",children:"HttpEntityProcessor"})})}),(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/processor/HttpResourceProcessor.html",children:"HttpResourceProcessor"})})}),(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/processor/HttpResponseProcessor.html",children:"HttpResponseProcessor"})})}),(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/processor/InputStreamProcessor.html",children:"InputStreamProcessor"})})}),(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/processor/PlainTextPojoProcessor.html",children:"PlainTextPojoProcessor"})})}),(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/processor/ReaderProcessor.html",children:"ReaderProcessor"})})}),(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/processor/ResponseBeanProcessor.html",children:"ResponseBeanProcessor"})})}),(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/processor/SerializedPojoProcessor.html",children:"SerializedPojoProcessor"})})}),(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/processor/ThrowableProcessor.html",children:"ThrowableProcessor"})})})]}),"\n",(0,n.jsx)(s.p,{children:"Custom response processors can be associated with REST resources via the following:"}),"\n",(0,n.jsxs)("tree",{children:[(0,n.jsx)("node-0",{children:(0,n.jsx)("java-annotation",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html",children:"Rest"})})}),(0,n.jsx)("node-1",{children:(0,n.jsx)("javac-method-annotation",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html#responseProcessors()",children:"responseProcessors"})})}),(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html",children:"RestContext.Builder"})})}),(0,n.jsx)("node-1",{children:(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#responseProcessors()",children:"responseProcessors()"})})})]}),"\n",(0,n.jsx)(s.p,{children:"Response processors can be used to process POJOs that cannot normally be handled through Juneau serializers, or because\nit's simply easier to define response processors for special cases."}),"\n",(0,n.jsxs)(s.p,{children:["The following example shows how to create a response processor to handle special ",(0,n.jsx)(s.code,{children:"Foo"})," objects outside the normal Juneau\narchitecture."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-java",children:'@Rest(responseProcessors=FooProcessor.class)\npublic class MyResource {\n\n    @RestGet("/getFoo")\n    public Foo getFoo() {\n        return new Foo("Some value");\n    }\n\n    public static class FooProcessor implements ResponseProcessor {\n        @Override\n        public int process(RestOpContext opContext, RestRequest req, RestResponse res) {\n            Object output = res.getContent(Object.class);\n            if (output instanceof Foo) {\n                try {\n                    Foo foo = (Foo)output;\n                    // Set some headers.\n                    res.setHeader("Foo-ID", foo.getId());\n                    // Set the real content.\n                    res.setContent("Special handling for Foo object: " + foo.getValue());\n                } catch (Exception e) {\n                    throw new InternalServerError(e);\n                }\n                return FINISHED;  // We handled it.\n            }\n            return CONTINUE;  // Let next processor handle it.\n        }\n    }\n}\n'})})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,s,o)=>{o.d(s,{R:()=>c,x:()=>a});var r=o(96540);const n={},t=r.createContext(n);function c(e){const s=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);