"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[3252],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(96540);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},62188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"topics/14.07.00.JettyXml","title":"Jetty.xml file","description":"The Jetty microservice comes with a bare-bones jetty.xml file which can be modified to suite any needs.","source":"@site/docs/topics/14.07.00.JettyXml.md","sourceDirName":"topics","slug":"/topics/JettyXml","permalink":"/docs/topics/JettyXml","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/14.07.00.JettyXml.md","tags":[],"version":"current","frontMatter":{"title":"Jetty.xml file","slug":"JettyXml"},"sidebar":"mainSidebar","previous":{"title":"14.6. Config","permalink":"/docs/topics/MicroserviceCoreConfig"},"next":{"title":"14.8. UI Customization","permalink":"/docs/topics/UiCustomization"}}');var i=n(74848),o=n(28453);const s={title:"Jetty.xml file",slug:"JettyXml"},c=void 0,l={},a=[];function d(e){const t={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["The Jetty microservice comes with a bare-bones ",(0,i.jsx)(t.code,{children:"jetty.xml"})," file which can be modified to suite any needs."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"jetty.xml"})," can be located in either the ",(0,i.jsx)(t.code,{children:"."})," or ",(0,i.jsx)(t.code,{children:"files"})," working directory or classpath."]}),"\n",(0,i.jsx)(t.p,{children:"It can also be specified in any of the following ways:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Using the ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/jetty/JettyMicroservice.Builder.html#jettyXml(java.lang.Object,boolean)",target:"_blank",children:"JettyMicroservice.Builder.jettyXml(Object,boolean)"})," method to specify the location or contents of the file."]}),"\n",(0,i.jsxs)(t.li,{children:["Specifying the location using a ",(0,i.jsx)(t.code,{children:"Jetty-Config"})," value in the ",(0,i.jsx)(t.code,{children:"MANIFEST.MF"})," file."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ini",children:"Jetty-Config: files/jetty.xml\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:'Specifying the location using the "Jetty/jettyXml" configuration value.'}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ini",children:"#=======================================================================================================================\n# Jetty settings\n\n#=======================================================================================================================\n[Jetty]\n\n# Path of the jetty.xml file used to configure the Jetty server.\n\nconfig = files/jetty.xml\n"})}),"\n",(0,i.jsxs)(t.p,{children:["SVL variables in the ",(0,i.jsx)(t.code,{children:"jetty.xml"})," file are automatically resolved by the microservice.\nThis allows you to reference values in your configuration file from the ",(0,i.jsx)(t.code,{children:"jetty.xml"})," file.\nThe HTTP port used is controlled via the following:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/jetty/JettyMicroservice.Builder.html#ports(int...)",target:"_blank",children:"JettyMicroservice.Builder.ports(int...)"})," method."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"JettyMicroservice\n    .create()\n    .args(args)\n    .servlets(RootResource.class)\n    .port(1000,2000,0,0,0)  // Try port 1000, then 2000, then 3 random ports.\n    .build()\n    .start()\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:'The "Jetty/ports" configuration property.'}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ini",children:"#=======================================================================================================================\n# Jetty settings\n\n#=======================================================================================================================\n[Jetty]\n\n# Port to use for the jetty server.\n# You can specify multiple ports.  The first available will be used.  '0' indicates to try a random port.\n\nport = 1000,2000,0,0,0\n"})}),"\n",(0,i.jsxs)(t.p,{children:['The first available port is then made available through the system property "availablePort" so that it can be referenced\nin our ',(0,i.jsx)(t.code,{children:"jetty.xml"})," file."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<Set name="connectors">\n    <Array type="org.eclipse.jetty.server.Connector">\n        <Item>\n            <New class="org.eclipse.jetty.server.ServerConnector">\n                <Arg>\n                    <Ref refid="ExampleServer" />\n                </Arg>\n                <Set name="port">$S{availablePort,8080}</Set>\n            </New>\n        </Item>\n    </Array>\n</Set>\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/jetty/JettyMicroservice.Builder.html#jettyServerFactory(org.apache.juneau.microservice.jetty.JettyServerFactory)",target:"_blank",children:"JettyMicroservice.Builder.jettyServerFactory(JettyServerFactory)"})," method is also provided to use your own customized Jetty server."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);