"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[7145],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},64863:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"topics/08.26.00.RestRpc","title":"REST/RPC","description":"The REST/RPC (RPC over REST) API allows the creation of client-side remote proxy interfaces for calling methods on","source":"@site/docs/topics/08.26.00.RestRpc.md","sourceDirName":"topics","slug":"/topics/RestRpc","permalink":"/docs/topics/RestRpc","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/08.26.00.RestRpc.md","tags":[],"version":"current","frontMatter":{"title":"REST/RPC","slug":"RestRpc"},"sidebar":"mainSidebar","previous":{"title":"8.25. Response Processors","permalink":"/docs/topics/ResponseProcessors"},"next":{"title":"8.27. Serializing URIs","permalink":"/docs/topics/SerializingUris"}}');var r=s(74848),a=s(28453);const o={title:"REST/RPC",slug:"RestRpc"},i=void 0,l={},c=[{value:"Remote Interfaces",id:"remote-interfaces",level:4},{value:"Client side",id:"client-side",level:4},{value:"Server side",id:"server-side",level:4},{value:"RrpcServlet",id:"rrpcservlet",level:4},{value:"@RestOp(method=RRPC)",id:"restopmethodrrpc",level:4},{value:"RrpcServlet in a browser",id:"rrpcservlet-in-a-browser",level:4},{value:"IAddressBook",id:"iaddressbook",level:4},{value:"AddressBook",id:"addressbook",level:4},{value:"Sample form entry page",id:"sample-form-entry-page",level:4},{value:"Sample form entry page results",id:"sample-form-entry-page-results",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The REST/RPC (RPC over REST) API allows the creation of client-side remote proxy interfaces for calling methods on\nserver-side POJOs using entirely REST."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"This is not to be confused with REST Proxies which are entirely client-side driven Java interfaces\nagainst arbitrary backend REST interfaces."})}),"\n",(0,r.jsx)(n.h4,{id:"remote-interfaces",children:"Remote Interfaces"}),"\n",(0,r.jsx)(n.p,{children:"The following example shows a remote interface:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@RemoteInterface // Annotation is optional\npublic interface IAddressBook {\n\n    void init() throws Exception;\n\n    List getPeople();\n\n    List getAddresses();\n\n    int createPerson(CreatePerson cp) throws Exception;\n\n    Person findPerson(int id);\n\n    Address findAddress(int id);\n\n    Person findPersonWithAddress(int id);\n\n    Person removePerson(int id);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The requirements for a remote interface method are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Must be public."}),"\n",(0,r.jsx)(n.li,{children:"Can be called anything."}),"\n",(0,r.jsxs)(n.li,{children:["Can have any number of ",(0,r.jsx)(n.a,{href:"/docs/topics/PojoCategories",children:"serializable and parsable"})," parameters."]}),"\n",(0,r.jsxs)(n.li,{children:["Can return a ",(0,r.jsx)(n.a,{href:"/docs/topics/PojoCategories",children:"serializable and parsable"})," value."]}),"\n",(0,r.jsxs)(n.li,{children:["Can throw any ",(0,r.jsx)(n.code,{children:"Throwables"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Throwables with public no-arg or single-arg-string constructors are automatically recreated on the client side when\nthrown on the server side."}),"\n",(0,r.jsx)(n.h4,{id:"client-side",children:"Client side"}),"\n",(0,r.jsx)(n.p,{children:"Remote Interface proxies are instantiated on the client side using one of the following methods:"}),"\n",(0,r.jsxs)("tree",{children:[(0,r.jsx)("node-0",{children:(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestClient.html",target:"_blank",children:"RestClient"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestClient.html#getRrpcInterface(java.lang.Class)",target:"_blank",children:"getRrpcInterface(Class)"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestClient.html#getRrpcInterface(java.lang.Class)",target:"_blank",children:"getRrpcInterface(Class,Object)"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/client/RestClient.html#getRrpcInterface(java.lang.Class)",target:"_blank",children:"getRrpcInterface(Class,Object,Serializer,Parser)"})})})]}),"\n",(0,r.jsxs)(n.p,{children:["Since we build upon the existing ",(0,r.jsx)(n.code,{children:"RestClient"})," API, we inherit all of it's features.\nFor example, convenience methods for setting POJO filters and properties to customize the behavior of the serializers\nand parsers, and the ability to provide your own customized Apache ",(0,r.jsx)(n.code,{children:"HttpClient"})," for handling various scenarios involving\nauthentication and Internet proxies."]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of the above interface being used:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Create a RestClient using JSON for serialization, and point to the server-side remote interface servlet.\nRestClient client = RestClient.create()\n    .json()\n    .rootUrl("http://localhost:10000/remote")\n    .build();\n\n// Create a proxy interface.\nIAddressBook ab = client.getRrpcInterface(IAddressBook.class);\n\n// Invoke a method on the server side and get the returned result.\nPerson p = ab.createPerson(\n    new Person(\n        "John Smith",\n        "Aug 1, 1999",\n        new Address("My street", "My city", "My state", 12345, true)\n    )\n);\n'})}),"\n",(0,r.jsx)(n.p,{children:"Under the covers, this method call gets converted to a REST POST."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'HTTP POST http://localhost:10000/remote/org.apache.juneau.examples.addressbook.IAddressBook/createPerson(org.apache.juneau.examples.addressbook.Person)\nAccept: application/json\nContent-Type: application/json\n\n[\n    {\n        "name":"John Smith",\n        "birthDate":"Aug 1, 1999",\n        "addresses":[\n            {\n                "street":"My street",\n                "city":"My city",\n                "state":"My state",\n                "zip":12345,\n                "isCurrent":true\n            }\n        ]\n    }\n]\n'})}),"\n",(0,r.jsx)(n.p,{children:"Note that the body of the request is an array.\nThis array contains the serialized arguments of the method.\nThe object returned by the method is then serialized as the body of the response."}),"\n",(0,r.jsx)(n.h4,{id:"server-side",children:"Server side"}),"\n",(0,r.jsx)(n.p,{children:"There are two ways to expose remote interfaces on the server side:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Extending from ",(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/remote/RrpcServlet.html",target:"_blank",children:"RrpcServlet"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Using a ",(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/annotation/RestOp.html",target:"_blank",children:"@RestOp(method=RRPC)"})," annotation on a Java method."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In either case, the proxy communications layer is pure REST.\nTherefore, in cases where the interface classes are not available on the client side, the same method calls can be made\nthrough pure REST calls.\nThis can also aid significantly in debugging, since calls to the remote interface service can be made directly from a\nbrowser with no coding involved."}),"\n",(0,r.jsx)(n.h4,{id:"rrpcservlet",children:"RrpcServlet"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/remote/RrpcServlet.html",target:"_blank",children:"RrpcServlet"})," class is a simple specialized servlet\nwith an abstract ",(0,r.jsx)(n.code,{children:"getServiceMap()"})," method to define the server-side POJOs:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Rest(\n    path="/remote"\n)\npublic class SampleRrpcServlet extends RrpcServlet {\n\n    // Our server-side POJO.\n    private AddressBook addressBook = new AddressBook();\n\n    @Override /* RrpcServlet */\n    protected Map,Object> getServiceMap() throws Exception {\n        Map,Object> map = new LinkedHashMap,Object>();\n\n        // In this simplified example, we expose the same POJO service under two different interfaces.\n        // One is IAddressBook which only exposes methods defined on that interface, and\n        // the other is AddressBook itself which exposes all methods defined on the class itself (dangerous!).\n        map.put(IAddressBook.class, addressBook);\n        map.put(AddressBook.class, addressBook);\n        return map;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"restopmethodrrpc",children:"@RestOp(method=RRPC)"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/annotation/RestOp.html",target:"_blank",children:"@RestOp(method=RRPC)"})," approach is easier if you only have a single interface you want to expose.\nYou simply define a Java method whose return type is an interface, and return the implementation of that interface:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Our exposed interface.\n<a href="/site/apidocs/org/apache/juneau/rest/annotation/RestOp.html" target="_blank">@RestOp</a>(method=RRPC, path="/addressbookproxy/*")\npublic IAddressBook getProxy() {\n    return addressBook;\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"rrpcservlet-in-a-browser",children:"RrpcServlet in a browser"}),"\n",(0,r.jsx)(n.p,{children:"If you point your browser to the servlet above, you get a list of available interfaces:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"http://localhost:10000/remote\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Clicking the hyperlinks on each shows you the list of methods that can be invoked on that service.\nNote that the ",(0,r.jsx)(n.code,{children:"IAddressBook"})," link shows that you can only invoke methods defined on that interface, whereas the\n",(0,r.jsx)(n.code,{children:"AddressBook"})," link shows ALL public methods defined on that class."]}),"\n",(0,r.jsx)(n.h4,{id:"iaddressbook",children:"IAddressBook"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"IAddressBook Interface",src:s(98803).A+"",width:"1600",height:"564"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"http://localhost:10000/remote/org.apache.juneau.examples.addressbook.IAddressBook\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.code,{children:"AddressBook"})," extends from ",(0,r.jsx)(n.code,{children:"LinkedList"}),", you may notice familiar ",(0,r.jsx)(n.code,{children:"collections"})," framework methods listed."]}),"\n",(0,r.jsx)(n.h4,{id:"addressbook",children:"AddressBook"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"AddressBook Class",src:s(66890).A+"",width:"1600",height:"716"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"http://localhost:10000/remote/org.apache.juneau.examples.addressbook.AddressBook\n"})}),"\n",(0,r.jsx)(n.p,{children:"Let's see how we can interact with this interface through nothing more than REST calls to get a better idea on how this\nworks.\nWe'll use the same method call as in the introduction.\nFirst, we need to create the serialized form of the arguments:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Object[] args = new Object[] {\n    new CreatePerson("Test Person",\n        AddressBook.toCalendar("Aug 1, 1999"),\n        new CreateAddress("Test street", "Test city", "Test state", 12345, true))\n};\nString asJson = Json5Serializer.DEFAULT_READABLE.toString(args);\nSystem.err.println(asJson);\n'})}),"\n",(0,r.jsx)(n.p,{children:"That produces the following JSON output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"[\n    {\n        name: 'Test Person',\n        birthDate: 'Aug 1, 1999',\n        addresses: [\n            {\n                street: 'Test street',\n                city: 'Test city',\n                state: 'Test state',\n                zip: 12345,\n                isCurrent: true\n            }\n        ]\n    }\n]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Note that in this example we're using JSON.\nHowever, various other content types can also be used such as XML, URL-Encoding, UON, or HTML.\nIn practice however, JSON will preferred since it is often the most efficient.\nNext, we can use a tool such as Poster to make the REST call.\nMethods are invoked by POSTing the serialized object array to the URI of the interface method.\nIn this case, we want to POST our JSON to the following URL:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"http://localhost:10000/remote/org.apache.juneau.examples.addressbook.IAddressBook/createPerson(org.apache.juneau.examples.addressbook.CreatePerson)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Make sure that we specify the ",(0,r.jsx)(n.code,{children:"Content-Type"})," of the body as ",(0,r.jsx)(n.code,{children:"text/json"}),".\nWe also want the results to be returned as JSON, so we set the ",(0,r.jsx)(n.code,{children:"Accept"})," header to ",(0,r.jsx)(n.code,{children:"text/json"})," as well.\nWhen we execute the POST, we should see the following successful response whose body contains the returned ",(0,r.jsx)(n.code,{children:"Person"})," bean\nserialized to JSON: From there, we could use the following code snippet to reconstruct the response object from JSON:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String response = "output from above";\nPerson p = JsonParser.DEFAULT.parse(response, Person.class);\n'})}),"\n",(0,r.jsx)(n.p,{children:"If we alter our servlet to allow overloaded GET requests, we can invoke methods using nothing more than a browser..."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Rest(\n    path="/remote",\n\n    // Allow us to use method=POST from a browser.\n    allowedMethodParams="*"\n)\npublic class SampleRrpcServlet extends RrpcServlet {\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For example, to invoke the ",(0,r.jsx)(n.code,{children:"getPeople()"})," method on our bean:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"http://localhost:10000/remote/org.apache.juneau.examples.addressbook.IAddressBook/getPeople?method=POST\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here we call the ",(0,r.jsx)(n.code,{children:"findPerson(int)"})," method to retrieve a person and get the returned POJO (in this case as HTML since\nthat's what's in the ",(0,r.jsx)(n.code,{children:"Accept"})," header when calling from a browser):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"http://localhost:10000/remote/org.apache.juneau.examples.addressbook.IAddressBook/findPerson(int)?method=POST&body=@(3)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When specifying the POST body as a ",(0,r.jsx)(n.code,{children:"&body"})," parameter, the method arguments should be in UON notation.\nSee ",(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/uon/UonSerializer.html",target:"_blank",children:"UonSerializer"})," for more information about this encoding.\nUsually you can also pass in JSON if you specify ",(0,r.jsx)(n.code,{children:"&Content-Type=text/json"})," in the URL parameters but passing in\nunencoded JSON in a URL may not work in all browsers.\nTherefore, UON is preferred.\nThe hyperlinks on the method names above lead you to a simple form-entry page where you can test passing parameters in\nUON notation as URL-encoded form posts."]}),"\n",(0,r.jsx)(n.h4,{id:"sample-form-entry-page",children:"Sample form entry page"}),"\n",(0,r.jsx)(n.h4,{id:"sample-form-entry-page-results",children:"Sample form entry page results"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},66890:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/jrs.restRPC.3-8daf90a259a9c071aa60d5cb8c45727f.png"},98803:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/jrs.restRPC.2-5ff337a7f6e85b05c39d014e1757a780.png"}}]);