"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[6691],{28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(96540);const r={},l=t.createContext(r);function i(e){const s=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(l.Provider,{value:s},e.children)}},58284:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"topics/13.04.00.ResourceClasses","title":"Resource Classes","description":"This section describes how to define a top-level REST resource page and deploy it in our microservice.","source":"@site/docs-staging/topics/13.04.00.ResourceClasses.md","sourceDirName":"topics","slug":"/topics/13.04.00.ResourceClasses","permalink":"/docs/topics/13.04.00.ResourceClasses","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/13.04.00.ResourceClasses.md","tags":[],"version":"current","frontMatter":{"title":"Resource Classes"},"sidebar":"tutorialSidebar","previous":{"title":"13.3. Lifecycle Methods","permalink":"/docs/topics/13.03.00.LifecycleMethods"},"next":{"title":"13.5. Predefined Resource Classes","permalink":"/docs/topics/13.05.00.PredefinedResourceClasses"}}');var r=n(74848),l=n(28453);const i={title:"Resource Classes"},o=void 0,c={},a=[];function d(e){const s={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:"This section describes how to define a top-level REST resource page and deploy it in our microservice.\nThe example is a router page that serves as a jumping off page to child resources."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'@Rest(\n    path="/*",\n    title="My Microservice",\n    description="Top-level resources page",\n    htmldoc=@HtmlDoc(\n        navlinks={\n            "options: servlet:/?method=OPTIONS"\n        }\n    ),\n    children={\n        HelloWorldResource.class,\n        ConfigResource.class,\n        LogsResource.class\n    }\n)\npublic class RootResources extends BasicRestServletGroup {\n    // No code!\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"When deployed, it looks like this in a browser:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"http://localhost:10000\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["The title and description annotations define the titles on the page.\nThese can be globalized using ",(0,r.jsx)(s.code,{children:"$L{...}"})," variables, or by defining specially-named properties in the properties file for\nthe resource."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["In this case, the ",(0,r.jsx)(s.code,{children:"path"})," annotation defines the context root of your application since it was not specified in the manifest or config file.\nTherefore, this resource is mapped to ",(0,r.jsx)(s.code,{children:"http://localhost:10000"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"children"})," annotation make up the list of child resources.\nThese child resources can be anything that extends from ",(0,r.jsx)(s.code,{children:"Servlet"}),", although usually they will be subclasses of ",(0,r.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/servlet/BasicRestServlet.html",children:"BasicRestServlet"})," or other resource groups."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["If you click the ",(0,r.jsx)(s.code,{children:"helloWorld"})," link in your application, you'll get a simple hello world message:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"http://localhost:10000/helloWorld\n"})}),"\n",(0,r.jsx)(s.p,{children:"...which is generated by this class..."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'@Rest(\n    path="/helloWorld",\n    title="Hello World example",\n    description="Simplest possible REST resource"\n)\npublic class HelloWorldResource extends BasicRestServlet {\n\n    @RestGet("/*")\n    public String sayHello() {\n        return "Hello world!";\n    }\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["The most-common case for deploying the top-level resource is to use the ",(0,r.jsx)(s.a,{href:"../apidocs/org/apache/juneau/microservice/jetty/JettyMicroservice/Builder.html#servlet(Class)",children:"JettyMicroservice.Builder.servlet(Class)"})," method:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:"public class App {\n    public static void main(String[] args) {\n        JettyMicroservice\n            .create()\n            .args(args)\n            .servlet(RootResources.class) // Our root resource.\n            .build()\n            .start()\n        ;\n    }\n}\n"})}),"\n",(0,r.jsx)(s.p,{children:"However, there are multiple ways of deploying top-level resources:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"../apidocs/org/apache/juneau/microservice/jetty/JettyMicroservice/Builder.html#servlet(Class)",children:"JettyMicroservice.Builder.servlet(Class)"})," - Using the builder. Several methods provided."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"../apidocs/org/apache/juneau/microservice/jetty/JettyMicroservice.html#addServlet(Servlet,String)",children:"JettyMicroservice.addServlet(Servlet,String)"})," - After the Jetty container has been started."]}),"\n",(0,r.jsxs)(s.li,{children:["As a configuration variable ",(0,r.jsx)(s.code,{children:"Jetty/servlets"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ini",children:"#=======================================================================================================================\n# Jetty settings\n\n#=======================================================================================================================\n[Jetty]\n\n# Subclasses of RestServlet\n\nservlets = org.apache.juneau.examples.rest.RootResources\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["As a configuration variable ",(0,r.jsx)(s.code,{children:"Jetty/servletMap"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ini",children:"#=======================================================================================================================\n# Jetty settings\n\n#=======================================================================================================================\n[Jetty]\n\n# Any servlets and their path specs\n\nservletMap =\n    {\n        '/*': 'org.apache.juneau.examples.rest.RootResources'\n    }\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Directly in the ",(0,r.jsx)(s.code,{children:"jetty.xml"})," file."]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-xml",children:'<Configure id="ExampleServer" class="org.eclipse.jetty.server.Server">\n    ...\n    <New id="context" class="org.eclipse.jetty.ee9.servlet.ServletContextHandler">\n        <Set name="contextPath">/</Set>\n        <Call name="addServlet">\n            <Arg>org.apache.juneau.rest.test.Root</Arg>\n            <Arg>/*</Arg>\n        </Call>\n        <Set name="sessionHandler">\n            <New class="org.eclipse.jetty.ee9.nested.SessionHandler" />\n        </Set>\n    </New>\n    ...\n\n'})})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);