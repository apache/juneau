"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[4910],{28453:(e,i,r)=>{r.d(i,{R:()=>n,x:()=>a});var s=r(96540);const c={},o=s.createContext(c);function n(e){const i=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:n(e.components),s.createElement(o.Provider,{value:i},e.children)}},37498:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>t,contentTitle:()=>a,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/12.02.00.MicroserviceCoreOverview","title":"Microservice Core Overview","description":"The Microservice API consists of a base class for defining executable microservices.","source":"@site/docs/topics/12.02.00.MicroserviceCoreOverview.md","sourceDirName":"topics","slug":"/topics/12.02.00.MicroserviceCoreOverview","permalink":"/docs/topics/12.02.00.MicroserviceCoreOverview","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs/topics/12.02.00.MicroserviceCoreOverview.md","tags":[],"version":"current","frontMatter":{"title":"Microservice Core Overview"},"sidebar":"tutorialSidebar","previous":{"title":"12.1. juneau-microservice-core Basics","permalink":"/docs/topics/12.01.00.JuneauMicroserviceCoreBasics"},"next":{"title":"12.3. Lifecycle Methods","permalink":"/docs/topics/12.03.00.LifecycleMethods"}}');var c=r(74848),o=r(28453);const n={title:"Microservice Core Overview"},a=void 0,t={},l=[];function d(e){const i={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(i.p,{children:"The Microservice API consists of a base class for defining executable microservices."}),"\n",(0,c.jsx)(i.p,{children:"Features include:"}),"\n",(0,c.jsxs)(i.ul,{children:["\n",(0,c.jsx)(i.li,{children:"A builder-based API for defining and starting microservices."}),"\n",(0,c.jsx)(i.li,{children:"An extensible API that allows you to hook into various lifecycle events."}),"\n",(0,c.jsx)(i.li,{children:"Simple-to-use APIs for accessing manifest file entries, command-line arguments, and external configuration file properties."}),"\n"]}),"\n",(0,c.jsx)(i.p,{children:"The Microservice API consists of the following packages and classes:"}),"\n",(0,c.jsxs)("tree",{children:[(0,c.jsx)("node-0",{children:"Microservice API"}),(0,c.jsxs)("node-1",{children:[(0,c.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice.html",children:"org.apache.juneau.microservice"})," - Main package"]}),(0,c.jsxs)("node-2",{children:[(0,c.jsx)("java-class",{children:(0,c.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/Microservice.html",children:"Microservice"})})," - The base microservice class."]}),(0,c.jsxs)("node-2",{children:[(0,c.jsx)("java-class",{children:(0,c.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/Microservice/Builder.html",children:"Microservice.Builder"})})," - Builder for the microservice class."]}),(0,c.jsxs)("node-2",{children:[(0,c.jsx)("java-class",{children:(0,c.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/MicroserviceListener.html",children:"MicroserviceListener"})})," - Interface for hooking into lifecyle events of the microservice."]}),(0,c.jsxs)("node-2",{children:[(0,c.jsx)("java-class",{children:(0,c.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/BasicMicroserviceListener.html",children:"BasicMicroserviceListener"})})," - Adapter for MicroserviceListener class."]}),(0,c.jsxs)("node-1",{children:[(0,c.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/console.html",children:"org.apache.juneau.microservice.console"})," - Console package"]}),(0,c.jsxs)("node-2",{children:[(0,c.jsx)("java-class",{children:(0,c.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/console/ConsoleCommand.html",children:"ConsoleCommand"})})," - Abstract class for defining console commands."]})]}),"\n",(0,c.jsx)(i.p,{children:"By itself the Microservice API doesn't provided much functionality but it does provide the basis for the Jetty\nMicroservice described later.\nThe most-basic creation of a microservice from an entry-point method is shown below:"}),"\n",(0,c.jsx)(i.pre,{children:(0,c.jsx)(i.code,{className:"language-java",children:"public class App {\n    public static void main(String[] args) {\n        Microservice\n            .create()   // Create builder.\n            .args(args) // Pass in args.\n            .build()    // Create microservice.\n            .start()    // Start microservice.\n        ;\n    }\n}\n"})})]})}function u(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,c.jsx)(i,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}}}]);