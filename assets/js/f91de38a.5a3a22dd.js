"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[3250],{27971:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"release-notes/5.0.0.14","title":"Release 5.0.0.14","description":"Date: Mar 23, 2013","source":"@site/docs/release-notes/5.0.0.14.md","sourceDirName":"release-notes","slug":"/release-notes/5.0.0.14","permalink":"/docs/release-notes/5.0.0.14","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs/release-notes/5.0.0.14.md","tags":[],"version":"current","frontMatter":{"title":"Release 5.0.0.14"},"sidebar":"tutorialSidebar","previous":{"title":"5.0.0.15","permalink":"/docs/release-notes/5.0.0.15"},"next":{"title":"5.0.0.13","permalink":"/docs/release-notes/5.0.0.13"}}');var i=s(74848),a=s(28453);const l={title:"Release 5.0.0.14"},c="Release 5.0.0.14",d={},t=[{value:"Core API changes",id:"core-api-changes",level:3},{value:"REST server API changes",id:"rest-server-api-changes",level:3},{value:"REST client API changes",id:"rest-client-api-changes",level:3}];function o(e){const n={a:"a",code:"code",del:"del",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"release-50014",children:"Release 5.0.0.14"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Date:"})," Mar 23, 2013"]}),"\n",(0,i.jsx)(n.p,{children:"Juno 5.0.0.14 is a major update."}),"\n",(0,i.jsxs)(n.p,{children:["The biggest change is that the ",(0,i.jsx)(n.code,{children:"RestSerializer"}),", ",(0,i.jsx)(n.code,{children:"RestParser"}),", ",(0,i.jsx)(n.code,{children:"RestSerializerGroup"}),", and ",(0,i.jsx)(n.code,{children:"RestParserGroup"})," classes have\nbeen eliminated entirely.\nInstead, the existing ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/serializer/Serializer.html",children:"Serializer"}),",\n",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/parser/Parser.html",children:"Parser"}),",  ",(0,i.jsx)(n.del,{children:"SerializerGroup"}),", and  ",(0,i.jsx)(n.del,{children:"ParserGroup"})," classes of the\ncore API have been augmented to replace them."]}),"\n",(0,i.jsx)(n.p,{children:"Adoptions will be required if you have previously used these classes."}),"\n",(0,i.jsx)(n.h3,{id:"core-api-changes",children:"Core API changes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["New ",(0,i.jsx)(n.code,{children:"org.apache.juneau.serializer"})," package."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Entirely reworked class hierarchy to make it easier to define new serializers."}),"\n",(0,i.jsxs)(n.li,{children:["New ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/serializer/WriterSerializer.html",children:"WriterSerializer"})," base class for defining\ncharacter-based serializers."]}),"\n",(0,i.jsxs)(n.li,{children:["New ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/serializer/OutputStreamSerializer.html",children:"OutputStreamSerializer"})," base class for\ndefining byte-based serializers."]}),"\n",(0,i.jsxs)(n.li,{children:["Updated  ",(0,i.jsx)(n.del,{children:"SerializerGroup"})," class with full support for RFC2616 ",(0,i.jsx)(n.code,{children:"Accept-Content"})," headers."]}),"\n",(0,i.jsx)(n.li,{children:"Improved cloning support on serializers and serializer groups."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["New ",(0,i.jsx)(n.code,{children:"org.apache.juneau.parser"})," package."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Entirely reworked class hierarchy to make it easier to define new parsers."}),"\n",(0,i.jsxs)(n.li,{children:["New ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/parser/ReaderParser.html",children:"ReaderParser"})," base class for defining\ncharacter-based parsers."]}),"\n",(0,i.jsxs)(n.li,{children:["New ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/parser/InputStreamParser.html",children:"InputStreamParser"})," base class for defining\nbyte-based parsers."]}),"\n",(0,i.jsx)(n.li,{children:"Improved cloning support on parsers and parser groups."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["New ",(0,i.jsx)(n.code,{children:"org.apache.juneau.swap"})," package."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cleaner class structure."}),"\n",(0,i.jsxs)(n.li,{children:["Improved  ",(0,i.jsx)(n.del,{children:"BeanFilter"})," class for defining property filters on beans."]}),"\n",(0,i.jsxs)(n.li,{children:["Improved  ",(0,i.jsx)(n.del,{children:"PojoQuery"})," class for defining filters on objects (previously called ",(0,i.jsx)(n.code,{children:"ObjectFilter"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["New ",(0,i.jsx)(n.code,{children:"org.apache.juneau.encoders"})," package."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Defines API for ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/encoders/Encoder.html",children:"Encoders"})," for enabling compression in REST\nservlets and clients."]}),"\n",(0,i.jsx)(n.li,{children:"Previously, gzip compression was enabled by default.\nThis new API allows you to plug in your own compression algorithms."}),"\n",(0,i.jsxs)(n.li,{children:["New ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/encoders/GzipEncoder.html",children:"GzipEncoder"})," class for enabling gzip compression."]}),"\n",(0,i.jsxs)(n.li,{children:["New ",(0,i.jsx)(n.del,{children:"EncoderGroup"})," class for managing multiple encoders and finding them based on RFC2616 ",(0,i.jsx)(n.code,{children:"Accept-Encoding"}),"\nheader values."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["New ",(0,i.jsx)(n.code,{children:"org.apache.juneau.plaintext"})," package."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["New ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/plaintext/PlainTextSerializer.html",children:"PlainTextSerializer"})," and\n",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/plaintext/PlainTextParser.html",children:"PlainTextParser"})," classes for\nserializing/parsing text/plain content."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["New ",(0,i.jsx)(n.code,{children:"org.apache.juneau.jso"})," package."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["New ",(0,i.jsx)(n.del,{children:"JsoSerializer"})," class for serializing ",(0,i.jsx)(n.code,{children:"application/x-java-serialized-object"})," content."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["New ",(0,i.jsx)(n.code,{children:"org.apache.juneau.soap"})," package."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["New ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/soap/SoapXmlSerializer.html",children:"SoapXmlSerializer"})," class for serializing\n",(0,i.jsx)(n.code,{children:"text/xml+soap"})," content."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Improved cloning support on the ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext.html",children:"BeanContext"})," class."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Better caching. Improved caching performance."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"JsonMap"})," and ",(0,i.jsx)(n.code,{children:"JsonList"})," changed to  ",(0,i.jsx)(n.del,{children:"ObjectMap"})," and  ",(0,i.jsx)(n.del,{children:"ObjectList"})," to better reflect that they're not limited\nto just JSON support."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Renamed ",(0,i.jsx)(n.code,{children:"PojoSwap"})," to  ",(0,i.jsx)(n.del,{children:"PojoQuery"})," to not confuse it with the new Filter API."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rest-server-api-changes",children:"REST server API changes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Eliminated ",(0,i.jsx)(n.code,{children:"org.apache.juneau.rest.serializers"})," and ",(0,i.jsx)(n.code,{children:"org.apache.juneau.rest.parsers"})," packages.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All existing REST serializers and parsers merged into the core API."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rest-client-api-changes",children:"REST client API changes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Simplified ",(0,i.jsx)(n.a,{href:"../apidocs/oajrc/RestClient.html",children:"RestClient"})," API."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You can now only specify a single serializer or parser per client. This significantly simplifies the code."}),"\n",(0,i.jsxs)(n.li,{children:["Support for ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/encoders/Encoder.html",children:"Encoders"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Eliminated ",(0,i.jsx)(n.code,{children:"RestCmdLine"})," (since it's essentially redundant with CURL)."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var r=s(96540);const i={},a=r.createContext(i);function l(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);