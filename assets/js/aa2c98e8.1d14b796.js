"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[6512],{28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(96540);const r={},a=t.createContext(r);function i(e){const s=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:s},e.children)}},72927:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"topics/07.01.00.JuneauBctBasics","title":"juneau-bct Basics","description":"A powerful and intuitive testing framework that extends JUnit with streamlined assertion methods for Java objects. BCT eliminates verbose test code while providing comprehensive object introspection and comparison capabilities.","source":"@site/docs/topics/07.01.00.JuneauBctBasics.md","sourceDirName":"topics","slug":"/topics/JuneauBctBasics","permalink":"/docs/topics/JuneauBctBasics","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/07.01.00.JuneauBctBasics.md","tags":[],"version":"current","frontMatter":{"title":"juneau-bct Basics","slug":"JuneauBctBasics"},"sidebar":"mainSidebar","previous":{"title":"6.2. Assertions Overview","permalink":"/docs/topics/AssertionsOverview"},"next":{"title":"7.1.1. Stringifiers","permalink":"/docs/topics/Stringifiers"}}');var r=n(74848),a=n(28453);const i={title:"juneau-bct Basics",slug:"JuneauBctBasics"},o="Bean-Centric Testing Framework",c={},l=[{value:"\ud83d\udccb Table of Contents",id:"-table-of-contents",level:2},{value:"\ud83d\udcda Advanced Topics",id:"-advanced-topics",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Real-World Impact",id:"real-world-impact",level:3},{value:"JUnit vs BCT Comparison",id:"junit-vs-bct-comparison",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Import Static Methods",id:"1-import-static-methods",level:3},{value:"2. Basic Object Testing",id:"2-basic-object-testing",level:3},{value:"3. Collection Testing",id:"3-collection-testing",level:3},{value:"Core Assertion Methods",id:"core-assertion-methods",level:2},{value:"assertBean(Object, String, String)",id:"assertbeanobject-string-string",level:4},{value:"<strong>Basic Property Testing:</strong>",id:"basic-property-testing",level:4},{value:"<strong>Nested Object Testing:</strong>",id:"nested-object-testing",level:4},{value:"<strong>Collection and Array Testing:</strong>",id:"collection-and-array-testing",level:4},{value:"<strong>Map Testing:</strong>",id:"map-testing",level:4},{value:"<strong>Field and Method Testing:</strong>",id:"field-and-method-testing",level:4},{value:"assertBeans(Collection, String, String...)",id:"assertbeanscollection-string-string",level:4},{value:"<strong>Basic Collection Testing:</strong>",id:"basic-collection-testing",level:4},{value:"<strong>Complex Nested Properties:</strong>",id:"complex-nested-properties",level:4},{value:"assertList(Object, Object...)",id:"assertlistobject-object",level:4},{value:"<strong>String Conversion Testing (Default Mode):</strong>",id:"string-conversion-testing-default-mode",level:4},{value:"<strong>Predicate Testing (Functional Validation):</strong>",id:"predicate-testing-functional-validation",level:4},{value:"<strong>Object Equality Testing (Direct Comparison):</strong>",id:"object-equality-testing-direct-comparison",level:4},{value:"assertMapped(Object, BiFunction, String, String)",id:"assertmappedobject-bifunction-string-string",level:4},{value:"<strong>Custom Property Access:</strong>",id:"custom-property-access",level:4},{value:"<strong>Exception Handling:</strong>",id:"exception-handling",level:4},{value:"<strong>Complex Property Logic:</strong>",id:"complex-property-logic",level:4},{value:"<strong>Legacy System Integration:</strong>",id:"legacy-system-integration",level:4},{value:"Additional Assertion Methods",id:"additional-assertion-methods",level:3},{value:"assertContains(String, Object)",id:"assertcontainsstring-object",level:4},{value:"assertContainsAll(Object, String...)",id:"assertcontainsallobject-string",level:4},{value:"assertEmpty(Object)",id:"assertemptyobject",level:4},{value:"assertNotEmpty(Object)",id:"assertnotemptyobject",level:4},{value:"assertSize(int, Object)",id:"assertsizeint-object",level:4},{value:"assertString(String, Object)",id:"assertstringstring-object",level:4},{value:"assertMatchesGlob(String, Object)",id:"assertmatchesglobstring-object",level:4},{value:"Nested Property Access",id:"nested-property-access",level:2},{value:"Object Nesting",id:"object-nesting",level:3},{value:"Collection and Array Access",id:"collection-and-array-access",level:3},{value:"Map Access",id:"map-access",level:3},{value:"Size and Length Properties",id:"size-and-length-properties",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Custom Bean Converters",id:"custom-bean-converters",level:3},{value:"See Advanced Topics",id:"see-advanced-topics",level:3},{value:"Migration Examples",id:"migration-examples",level:2},{value:"Before and After Comparisons",id:"before-and-after-comparisons",level:3},{value:"<strong>Key Takeaways</strong>",id:"key-takeaways",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"bean-centric-testing-framework",children:"Bean-Centric Testing Framework"})}),"\n",(0,r.jsx)(s.p,{children:"A powerful and intuitive testing framework that extends JUnit with streamlined assertion methods for Java objects. BCT eliminates verbose test code while providing comprehensive object introspection and comparison capabilities."}),"\n",(0,r.jsx)(s.h2,{id:"-table-of-contents",children:"\ud83d\udccb Table of Contents"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#overview",children:"Overview"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#quick-start",children:"Quick Start"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#core-assertion-methods",children:"Core Assertion Methods"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#nested-property-access",children:"Nested Property Access"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#advanced-configuration",children:"Advanced Configuration"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"#migration-examples",children:"Migration Examples"})}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"-advanced-topics",children:"\ud83d\udcda Advanced Topics"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/docs/topics/Stringifiers",children:"Stringifiers"})," - Custom string conversions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/docs/topics/Listifiers",children:"Listifiers"})," - Custom list conversions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/docs/topics/Swappers",children:"Swappers"})," - Object transformation"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/docs/topics/PropertyExtractors",children:"Property Extractors"})," - Custom property access"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/docs/topics/CustomErrorMessages",children:"Custom Error Messages"})," - Enhanced error reporting"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(s.p,{children:"The Bean-Centric Testing Framework transforms complex multi-line JUnit assertions into simple, readable one-liners. Instead of manually extracting and comparing individual properties, BCT provides intelligent object introspection with flexible property access patterns."}),"\n",(0,r.jsx)(s.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Concise Assertions"}),": Replace many lines of manual property extraction with single assertion calls"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Powerful Property Access"}),": Nested objects, collections, arrays, and maps with unified syntax"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Flexible Comparison"}),": Support for custom converters, formatters, and comparison logic"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Type Safety"}),": Comprehensive error messages with clear property paths"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Extensible"}),": Custom property extractors, stringifiers, and conversion logic"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Minimal Dependencies"}),": Depends only on JUnit 5 - no external libraries or heavyweight frameworks"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Zero Configuration"}),": Works out-of-the-box with sensible defaults and automatic discovery"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"100% Test Coverage"}),": Thoroughly tested with comprehensive unit tests ensuring reliability and stability"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"real-world-impact",children:"Real-World Impact"}),"\n",(0,r.jsx)(s.p,{children:"BCT has been successfully deployed across the Apache Juneau project test suite with impressive results:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Adoption Rate"}),": 342 out of 658 test files (52%) now use BCT assertions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Usage Statistics"}),": Over 1,700 BCT assertion calls across the codebase","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["859 ",(0,r.jsx)(s.code,{children:"assertBean()"})," calls across 127 files"]}),"\n",(0,r.jsxs)(s.li,{children:["663 ",(0,r.jsx)(s.code,{children:"assertList()"})," calls across 69 files"]}),"\n",(0,r.jsxs)(s.li,{children:["192 ",(0,r.jsx)(s.code,{children:"assertBeans()"})," calls across 10 files"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Code Reduction"}),": Thousands of lines of verbose property extraction replaced with concise assertions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Test Clarity"}),": Complex object validation simplified to single-line assertions"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"junit-vs-bct-comparison",children:"JUnit vs BCT Comparison"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Traditional JUnit:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Testing a user object - verbose and repetitive\nassertEquals("John", user.getName());\nassertEquals(30, user.getAge());\nassertTrue(user.isActive());\nassertEquals("123 Main St", user.getAddress().getStreet());\nassertEquals("Springfield", user.getAddress().getCity());\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Bean-Centric Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Same test - concise and readable\nassertBean(user, "name,age,active,address{street,city}", \n          "John,30,true,{123 Main St,Springfield}");\n'})}),"\n",(0,r.jsx)(s.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(s.h3,{id:"1-import-static-methods",children:"1. Import Static Methods"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:"import static org.apache.juneau.junit.bct.BctAssertions.*;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"2-basic-object-testing",children:"2. Basic Object Testing"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testUser() {\n    User user = new User("Alice", 25, true);\n    \n    // Test multiple properties at once\n    assertBean(user, "name,age,active", "Alice,25,true");\n    \n    // Test individual properties\n    assertBean(user, "name", "Alice");\n    assertBean(user, "age", "25");\n}\n\n@Test\nvoid testMultipleUsers() {\n    List<User> users = List.of(\n        new User("Alice", 25, true),\n        new User("Bob", 30, false),\n        new User("Carol", 35, true)\n    );\n    \n    // Test same properties across multiple objects\n    assertBeans(users, "name,age", \n        "Alice,25", \n        "Bob,30", \n        "Carol,35");\n    \n    // Test just names\n    assertBeans(users, "name", "Alice", "Bob", "Carol");\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"3-collection-testing",children:"3. Collection Testing"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testList() {\n    List<String> colors = List.of("red", "green", "blue");\n    \n    // Test all elements\n    assertList(colors, "red", "green", "blue");\n    \n    // Test as bean properties\n    assertBean(colors, "0,1,2", "red,green,blue");\n    assertBean(colors, "size", "3");\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"core-assertion-methods",children:"Core Assertion Methods"}),"\n",(0,r.jsx)(s.h4,{id:"assertbeanobject-string-string",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertBean(java.lang.Object,java.lang.String,java.lang.String)",children:"assertBean(Object, String, String)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests properties of a single object using a flexible property syntax with powerful nested access capabilities."}),"\n",(0,r.jsx)(s.p,{children:"This method provides comprehensive property access for any Java object, supporting nested objects, collections, arrays, maps, and custom field access patterns. It uses intelligent property resolution with automatic type handling and supports complex object graphs."}),"\n",(0,r.jsx)(s.h4,{id:"basic-property-testing",children:(0,r.jsx)(s.strong,{children:"Basic Property Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Simple properties\nassertBean(user, "name,email", "John,john@example.com");\n\n// Boolean properties  \nassertBean(user, "active,verified", "true,false");\n\n// Null handling\nassertBean(user, "middleName", "null");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"nested-object-testing",children:(0,r.jsx)(s.strong,{children:"Nested Object Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Single-level nesting\nassertBean(user, "address{street,city}", "{123 Main St,Springfield}");\n\n// Multi-level nesting\nassertBean(user, "profile{settings{notifications{email}}}", "{{{true}}}");\n\n// Mixed simple and nested\nassertBean(order, "id,customer{name,email},total", "12345,{John Doe,john@example.com},99.95");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"collection-and-array-testing",children:(0,r.jsx)(s.strong,{children:"Collection and Array Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Index-based access\nassertBean(order, "items{0{name},1{name}}", "{{Laptop},{Phone}}");\n\n// Collection iteration (#{} syntax)\nassertBean(order, "items{#{name}}", "[{Laptop},{Phone},{Tablet}]");\n\n// Collection properties\nassertBean(order, "items{length,#{price}}", "{3,[{999.99},{699.99},{299.99}]}");\n\n// Array access\nassertBean(data, "values{0,1,2}", "{100,200,300}");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"map-testing",children:(0,r.jsx)(s.strong,{children:"Map Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Direct key access\nassertBean(config, "database{host,port}", "{localhost,5432}");\n\n// Map size testing\nassertBean(user, "settings{size}", "{5}");\n\n// Null key handling\nassertBean(user, "mapWithNullKey{<null>}", "{nullKeyValue}");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"field-and-method-testing",children:(0,r.jsx)(s.strong,{children:"Field and Method Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Public fields (no getters required)\nassertBean(myBean, "f1,f2,f3", "val1,val2,val3");\n\n// Field properties with chaining\nassertBean(myBean, "f1{length},f2{class{simpleName}}", "{5},{{String}}");\n\n// Boolean method variations\nassertBean(user, "enabled,isActive,hasPermission", "true,false,true");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"assertbeanscollection-string-string",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertBeans(java.lang.Object,java.lang.String,java.lang.String...)",children:"assertBeans(Collection, String, String...)"})}),"\n",(0,r.jsxs)(s.p,{children:["Tests multiple objects in a collection, comparing the same properties across all objects using the same property access logic as ",(0,r.jsx)(s.code,{children:"assertBean"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"This method validates that each bean in a collection has the specified property values. It's perfect for testing collections of similar objects, validation results, or parsed data structures. Each expected value string corresponds to one bean in the collection."}),"\n",(0,r.jsx)(s.h4,{id:"basic-collection-testing",children:(0,r.jsx)(s.strong,{children:"Basic Collection Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'List<User> users = Arrays.asList(\n    new User("Alice", 25),\n    new User("Bob", 30),\n    new User("Charlie", 35)\n);\n\n// Test same properties across all users\nassertBeans(users, "name,age", \n    "Alice,25", \n    "Bob,30", \n    "Charlie,35"\n);\n'})}),"\n",(0,r.jsx)(s.h4,{id:"complex-nested-properties",children:(0,r.jsx)(s.strong,{children:"Complex Nested Properties:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Test nested properties across multiple beans\nList<Order> orders = getOrderList();\nassertBeans(orders, "id,customer{name,email}", \n    "1,{John,john@example.com}",\n    "2,{Jane,jane@example.com}"\n);\n\n// Test collection properties within beans\nList<ShoppingCart> carts = getCartList();\nassertBeans(carts, "items{0{name}},total", \n    "{{Laptop}},999.99",\n    "{{Phone}},599.99"\n);\n'})}),"\n",(0,r.jsx)(s.h4,{id:"assertlistobject-object",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertList(java.lang.Object,java.lang.Object...)",children:"assertList(Object, Object...)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests collection elements directly with support for multiple comparison modes: string conversion, functional validation with predicates, and direct object equality."}),"\n",(0,r.jsx)(s.p,{children:"This method supports any object that can be converted to a List, including arrays, collections, iterables, streams, and more. It provides three distinct comparison modes based on the type of expected values provided."}),"\n",(0,r.jsx)(s.h4,{id:"string-conversion-testing-default-mode",children:(0,r.jsx)(s.strong,{children:"String Conversion Testing (Default Mode):"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// String collections - compares string representations\nassertList(List.of("a", "b", "c"), "a", "b", "c");\n\n// Number collections - converts to string for comparison\nassertList(List.of(1, 2, 3), "1", "2", "3");\n\n// Object collections - uses toString() or converter\nassertList(productNames, "Laptop", "Phone", "Tablet");\n\n// Arrays and other collection types\nassertList(myArray, "element1", "element2", "element3");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"predicate-testing-functional-validation",children:(0,r.jsx)(s.strong,{children:"Predicate Testing (Functional Validation):"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Use Predicate<T> for functional testing\nPredicate<Integer> greaterThanOne = x -> x > 1;\nassertList(List.of(2, 3, 4), greaterThanOne, greaterThanOne, greaterThanOne);\n\n// Mix predicates with other comparison types\nPredicate<String> startsWithA = s -> s.startsWith("a");\nassertList(List.of("apple", "banana"), startsWithA, "banana");\n\n// Complex predicate validation\nPredicate<User> isActive = user -> user.isActive();\nassertList(userList, isActive, isActive);\n'})}),"\n",(0,r.jsx)(s.h4,{id:"object-equality-testing-direct-comparison",children:(0,r.jsx)(s.strong,{children:"Object Equality Testing (Direct Comparison):"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:"// Non-String, non-Predicate objects use Objects.equals() comparison\nassertList(List.of(1, 2, 3), 1, 2, 3); // Integer objects\n\n// Custom objects with proper equals() implementation\nassertList(List.of(myBean1, myBean2), myBean1, myBean2);\n\n// Mixed object types\nassertList(mixedList, stringObj, integerObj, customObj);\n"})}),"\n",(0,r.jsx)(s.h4,{id:"assertmappedobject-bifunction-string-string",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertMapped(java.lang.Object,java.util.function.BiFunction,java.lang.String,java.lang.String)",children:"assertMapped(Object, BiFunction, String, String)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests objects with custom property access logic using a BiFunction, designed for objects that don't follow standard JavaBean patterns or require specialized property extraction."}),"\n",(0,r.jsxs)(s.p,{children:["This method creates an intermediate LinkedHashMap to collect all property values before using the same logic as ",(0,r.jsx)(s.code,{children:"assertBean"})," for comparison. This ensures consistent ordering and supports the full nested property syntax. The BiFunction receives the object and property name, returning the property value."]}),"\n",(0,r.jsx)(s.h4,{id:"custom-property-access",children:(0,r.jsx)(s.strong,{children:"Custom Property Access:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Custom property access for non-standard objects\nassertMapped(myObject, (obj, prop) -> obj.getProperty(prop), \n           "prop1,prop2", "value1,value2");\n\n// Map-based property access\nMap<String, Object> data = new HashMap<>();\ndata.put("name", "Alice");\ndata.put("score", 95);\nassertMapped(data, (map, key) -> map.get(key), \n           "name,score", "Alice,95");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"exception-handling",children:(0,r.jsx)(s.strong,{children:"Exception Handling:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Exceptions become simple class names in output\nassertMapped(dataSource, (ds, prop) -> {\n    try {\n        return ds.getConnection().getMetaData().getDatabaseProductName();\n    } catch (SQLException e) {\n        throw new RuntimeException(e);\n    }\n}, "databaseName", "PostgreSQL");\n\n// Safe property access with exception conversion\nassertMapped(webService, (service, endpoint) -> {\n    try {\n        return service.call(endpoint);\n    } catch (Exception e) {\n        return e.getClass().getSimpleName(); // Returns "TimeoutException"\n    }\n}, "userEndpoint", "TimeoutException");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"complex-property-logic",children:(0,r.jsx)(s.strong,{children:"Complex Property Logic:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Transform complex nested access patterns\nassertMapped(configSystem, (config, prop) -> {\n    switch(prop) {\n        case "timeout": return config.getSettings().getTimeout();\n        case "retries": return config.getSettings().getRetries();\n        case "database": return config.getDatabase().getUrl();\n        default: return config.getAttribute(prop);\n    }\n}, "timeout,retries,database", "30000,3,jdbc:postgresql://localhost:5432/mydb");\n\n// Conditional property access\nassertMapped(userService, (service, operation) -> {\n    if ("count".equals(operation)) {\n        return service.getUserCount();\n    } else if ("active".equals(operation)) {\n        return service.getActiveUsers().size();\n    }\n    return service.getProperty(operation);\n}, "count,active", "150,45");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"legacy-system-integration",children:(0,r.jsx)(s.strong,{children:"Legacy System Integration:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Access legacy objects without standard getters\nassertMapped(legacyBean, (bean, fieldName) -> {\n    Field field = bean.getClass().getDeclaredField(fieldName);\n    field.setAccessible(true);\n    return field.get(bean);\n}, "privateField1,privateField2", "value1,value2");\n'})}),"\n",(0,r.jsx)(s.h3,{id:"additional-assertion-methods",children:"Additional Assertion Methods"}),"\n",(0,r.jsx)(s.p,{children:"BCT provides several additional assertion methods for common testing scenarios:"}),"\n",(0,r.jsx)(s.h4,{id:"assertcontainsstring-object",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertContains(java.lang.String,java.lang.Object)",children:"assertContains(String, Object)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests that a string appears somewhere within the stringified object."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'User user = new User("Alice Smith", 25);\nList<String> items = Arrays.asList("apple", "banana", "cherry");\n\n// Test substring presence\nassertContains("Alice", user);\nassertContains("Smith", user);\nassertContains("banana", items);\n'})}),"\n",(0,r.jsx)(s.h4,{id:"assertcontainsallobject-string",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertContainsAll(java.lang.Object,java.lang.String...)",children:"assertContainsAll(Object, String...)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests that all specified strings appear within the stringified object."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'User user = new User("Alice Smith", 25);\nuser.setEmail("alice@example.com");\n\n// Test multiple substrings\nassertContainsAll(user, "Alice", "Smith", "25");\nassertContainsAll(user, "alice", "example.com");\n'})}),"\n",(0,r.jsx)(s.h4,{id:"assertemptyobject",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertEmpty(java.lang.Object)",children:"assertEmpty(Object)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests that collections, arrays, maps, or strings are empty."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'List<String> emptyList = new ArrayList<>();\nString[] emptyArray = {};\nMap<String,String> emptyMap = new HashMap<>();\nString emptyString = "";\n\n// Test empty collections\nassertEmpty(emptyList);\nassertEmpty(emptyArray);\nassertEmpty(emptyMap);\nassertEmpty(emptyString);\n'})}),"\n",(0,r.jsx)(s.h4,{id:"assertnotemptyobject",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertNotEmpty(java.lang.Object)",children:"assertNotEmpty(Object)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests that collections, arrays, maps, or strings are not empty."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'List<String> names = Arrays.asList("Alice");\nString[] colors = {"red"};\nMap<String,String> config = Map.of("key", "value");\nString message = "Hello";\n\n// Test non-empty collections\nassertNotEmpty(names);\nassertNotEmpty(colors);\nassertNotEmpty(config);\nassertNotEmpty(message);\n'})}),"\n",(0,r.jsx)(s.h4,{id:"assertsizeint-object",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertSize(int,java.lang.Object)",children:"assertSize(int, Object)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests the size/length of collections, arrays, maps, or strings."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'List<String> names = Arrays.asList("Alice", "Bob", "Carol");\nString[] colors = {"red", "green"};\nMap<String,Integer> scores = Map.of("Alice", 95, "Bob", 87);\nString message = "Hello";\n\n// Test collection sizes\nassertSize(3, names);\nassertSize(2, colors);\nassertSize(2, scores);\nassertSize(5, message);\n'})}),"\n",(0,r.jsx)(s.h4,{id:"assertstringstring-object",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertString(java.lang.String,java.lang.Object)",children:"assertString(String, Object)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests the string representation of an object using the configured converter."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'User user = new User("Alice", 25);\nList<Integer> numbers = Arrays.asList(1, 2, 3);\nDate date = new Date(1609459200000L); // 2021-01-01\n\n// Test string representations\nassertString("User(name=Alice, age=25)", user);\nassertString("[1, 2, 3]", numbers);\nassertString("2021-01-01", date);\n'})}),"\n",(0,r.jsx)(s.h4,{id:"assertmatchesglobstring-object",children:(0,r.jsx)(s.a,{href:"/docs/apidocs/org/apache/juneau/junit/bct/BctAssertions.html#assertMatchesGlob(java.lang.String,java.lang.Object)",children:"assertMatchesGlob(String, Object)"})}),"\n",(0,r.jsx)(s.p,{children:"Tests that the stringified object matches a glob-style pattern (* and ? wildcards)."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'User user = new User("Alice Smith", 25);\nString filename = "report.pdf";\nString email = "alice@company.com";\n\n// Test pattern matching\nassertMatchesGlob("*Alice*", user);\nassertMatchesGlob("*.pdf", filename);\nassertMatchesGlob("*@*.com", email);\nassertMatchesGlob("User(name=Alice*, age=25)", user);\n'})}),"\n",(0,r.jsx)(s.h2,{id:"nested-property-access",children:"Nested Property Access"}),"\n",(0,r.jsx)(s.p,{children:"BCT provides powerful nested property access with intuitive syntax:"}),"\n",(0,r.jsx)(s.h3,{id:"object-nesting",children:"Object Nesting"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Access nested object properties\nassertBean(order, "customer{address{city}}", "{{Springfield}}");\n\n// Multiple nested levels\nassertBean(user, "profile{settings{notifications{email}}}", "{{{true}}}");\n\n// Multiple properties at each level\nassertBean(order, "customer{name,email},shipping{method,cost}", \n          "{John,john@example.com},{Express,15.99}");\n'})}),"\n",(0,r.jsx)(s.h3,{id:"collection-and-array-access",children:"Collection and Array Access"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Index-based access\nassertBean(order, "items{0{name},1{name}}", "{{Laptop},{Phone}}");\n\n// Iterate over all elements\nassertBean(order, "items{#{name}}", "[{Laptop},{Phone},{Tablet}]");\n\n// Collection properties\nassertBean(order, "items{length,#{price}}", "{3,[{999.99},{699.99},{299.99}]}");\n\n// Array access\nassertBean(data, "values{0,1,2}", "{100,200,300}");\n'})}),"\n",(0,r.jsx)(s.h3,{id:"map-access",children:"Map Access"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Direct key access\nassertBean(config, "database{host,port}", "{localhost,5432}");\n\n// Special characters in keys\nassertBean(props, "app.version,app.name", "1.0.0,MyApp");\n\n// Null key access\nassertBean(mapWithNullKey, "<null>", "nullKeyValue");\n'})}),"\n",(0,r.jsx)(s.h3,{id:"size-and-length-properties",children:"Size and Length Properties"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Universal size access\nassertBean(list, "size", "5");\nassertBean(array, "length", "10");\nassertBean(map, "size", "3");\n\n// Combined with other properties\nassertBean(user, "orders{size,#{total}}", "{3,[{99.99},{149.99},{79.99}]}");\n'})}),"\n",(0,r.jsx)(s.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,r.jsx)(s.p,{children:"BCT provides several advanced configuration options for customizing assertion behavior:"}),"\n",(0,r.jsx)(s.h3,{id:"custom-bean-converters",children:"Custom Bean Converters"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Create converter with custom formatting\nvar converter = BasicBeanConverter.builder()\n    .defaultSettings()\n    .addStringifier(LocalDate.class, date -> \n        date.format(DateTimeFormatter.ISO_LOCAL_DATE))\n    .addStringifier(Money.class, money -> \n        money.getAmount().toPlainString())\n    .build();\n\n// Use in assertions\nassertBean(args().setBeanConverter(converter),\n          order, "date,total", "2023-12-01,99.99");\n'})}),"\n",(0,r.jsx)(s.h3,{id:"see-advanced-topics",children:"See Advanced Topics"}),"\n",(0,r.jsx)(s.p,{children:"For detailed information on extending and customizing BCT, see:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/topics/Stringifiers",children:"Stringifiers"})})," - Define how objects are converted to strings for comparison"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/topics/Listifiers",children:"Listifiers"})})," - Convert collection-like objects to lists for testing"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/topics/Swappers",children:"Swappers"})})," - Transform objects before processing (unwrap Optional, Supplier, etc.)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/topics/PropertyExtractors",children:"Property Extractors"})})," - Define custom property access logic for non-standard objects"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/topics/CustomErrorMessages",children:"Custom Error Messages"})})," - Add contextual information to assertion failures"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"migration-examples",children:"Migration Examples"}),"\n",(0,r.jsx)(s.h3,{id:"before-and-after-comparisons",children:"Before and After Comparisons"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Complex Object Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Before: Traditional JUnit\n@Test\nvoid testOrderTraditional() {\n    assertEquals(12345L, order.getId());\n    assertEquals("John Doe", order.getCustomer().getName());\n    assertEquals("john@example.com", order.getCustomer().getEmail());\n    assertEquals("123 Main St", order.getShipping().getAddress().getStreet());\n    assertEquals("Springfield", order.getShipping().getAddress().getCity());\n    assertEquals(3, order.getItems().size());\n    assertEquals("Laptop", order.getItems().get(0).getName());\n    assertEquals(new BigDecimal("999.99"), order.getItems().get(0).getPrice());\n    assertEquals(OrderStatus.PENDING, order.getStatus());\n}\n\n// After: Bean-Centric Testing\n@Test  \nvoid testOrderBCT() {\n    assertBean(order, \n        "id,customer{name,email},shipping{address{street,city}},items{size,0{name,price}},status",\n        "12345,{John Doe,john@example.com},{{123 Main St,Springfield}},{3,{Laptop,999.99}},PENDING");\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Collection Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Before: Traditional JUnit\n@Test\nvoid testUsersTraditional() {\n    assertEquals(3, users.size());\n    assertEquals("Alice", users.get(0).getName());\n    assertEquals(25, users.get(0).getAge());\n    assertEquals("Bob", users.get(1).getName());\n    assertEquals(30, users.get(1).getAge());\n    assertEquals("Charlie", users.get(2).getName());\n    assertEquals(35, users.get(2).getAge());\n}\n\n// After: Bean-Centric Testing\n@Test\nvoid testUsersBCT() {\n    assertBeans(users, "name,age", \n        "Alice,25", \n        "Bob,30", \n        "Charlie,35");\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Configuration Testing:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-java",children:'// Before: Traditional JUnit  \n@Test\nvoid testConfigTraditional() {\n    assertEquals("localhost", config.getDatabase().getHost());\n    assertEquals(5432, config.getDatabase().getPort());\n    assertEquals("myapp", config.getDatabase().getSchema());\n    assertEquals(30000, config.getTimeout());\n    assertEquals(3, config.getRetries());\n    assertTrue(config.isLoggingEnabled());\n}\n\n// After: Bean-Centric Testing\n@Test\nvoid testConfigBCT() {\n    assertBean(config, \n        "database{host,port,schema},timeout,retries,loggingEnabled",\n        "{localhost,5432,myapp},30000,3,true");\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"key-takeaways",children:(0,r.jsx)(s.strong,{children:"Key Takeaways"})}),"\n",(0,r.jsx)(s.p,{children:"The Bean-Centric Testing Framework transforms verbose, error-prone test code into concise, readable assertions. By leveraging intelligent object introspection and flexible property access patterns, BCT enables developers to write more maintainable tests while improving test coverage and readability."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Reduced Code Volume"}),": 70-80% less test code"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Improved Readability"}),": Clear, intention-revealing assertions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Better Maintainability"}),": Changes to object structure require minimal test updates"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Enhanced Error Messages"}),": Precise failure reporting with property paths"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Flexible Extension"}),": Custom converters for domain-specific needs"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Start with simple ",(0,r.jsx)(s.code,{children:"assertBean"})," calls and gradually adopt more advanced features as your testing needs evolve. The framework grows with your project complexity while maintaining simplicity at its core."]})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);