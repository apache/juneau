"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[9956],{28453:(n,e,a)=>{a.d(e,{R:()=>c,x:()=>r});var t=a(96540);const s={},i=t.createContext(s);function c(n){const e=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:c(n.components),t.createElement(i.Provider,{value:e},n.children)}},92602:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"topics/02.26.05.XmlBeanTypeNameAnnotation","title":"@Bean(typeName) Annotation","description":"The @Bean(typeName)) annotation can be used to override the Juneau default name on bean elements.","source":"@site/docs/topics/02.26.05.XmlBeanTypeNameAnnotation.md","sourceDirName":"topics","slug":"/topics/02.26.05.XmlBeanTypeNameAnnotation","permalink":"/docs/topics/02.26.05.XmlBeanTypeNameAnnotation","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs/topics/02.26.05.XmlBeanTypeNameAnnotation.md","tags":[],"version":"current","frontMatter":{"title":"@Bean(typeName) Annotation"},"sidebar":"tutorialSidebar","previous":{"title":"2.26.4. XML Parsers","permalink":"/docs/topics/02.26.04.XmlParsers"},"next":{"title":"2.26.6. @XmlChildName Annotation","permalink":"/docs/topics/02.26.06.XmlChildNameAnnotation"}}');var s=a(74848),i=a(28453);const c={title:"@Bean(typeName) Annotation"},r=void 0,o={},l=[];function d(n){const e={a:"a",admonition:"admonition",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html#typeName()",children:"@Bean(typeName)"})," annotation can be used to override the Juneau default name on bean elements."]}),"\n",(0,s.jsx)(e.p,{children:"Types names serve two distinct purposes:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"To override the element name."}),"\n",(0,s.jsx)(e.li,{children:"To serve as a class identifier so that the bean class can be inferred during parsing if it cannot automatically be inferred through reflection."}),"\n"]}),"\n",(0,s.jsx)(e.admonition,{title:"Example",type:"tip",children:(0,s.jsxs)("table",{class:"code-table",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Data type"}),(0,s.jsx)("th",{children:"JSON example"}),(0,s.jsx)("th",{children:"Without annotation"}),(0,s.jsx)("th",{children:"With annotation"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@Bean(typeName="X")\nclass MyBean {\n  public String a;\n  public int b;\n}\n'})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-json",children:"{\n  a: 'foo',\n  b: 123\n}\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <a>foo</a>\n  <b>123</b>\n</object>\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<X>\n  <a>foo</a>\n  <b>123</b>\n</X>\n"})})})]})]})}),"\n",(0,s.jsxs)(e.p,{children:["On bean properties, a ",(0,s.jsx)(e.code,{children:"_type"})," attribute will be added if a type name is present and the bean class cannot be inferred through reflection."]}),"\n",(0,s.jsxs)(e.p,{children:["In the following example, a type attribute is used on property 'b' but not property 'a' since 'b' is of type ",(0,s.jsx)(e.code,{children:"Object"})," and therefore the bean class cannot be inferred."]}),"\n",(0,s.jsx)(e.admonition,{title:"Example",type:"tip",children:(0,s.jsxs)("table",{class:"code-table",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Java"}),(0,s.jsx)("th",{children:"Without annotation"}),(0,s.jsx)("th",{children:"With annotation"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'class MyBean {\n  public BeanX a = new BeanX();\n  public Object b = new BeanX();\n}\n\n@Bean(typeName="X")\nclass BeanX {\n  public String fx = "foo";\n}\n'})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <a>\n    <fx>foo</fx>\n  </a>\n  <b>\n    <fx>foo</fx>\n  </b>\n</object>\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <a>\n    <fx>foo</fx>\n  </a>\n  <b _type='X'>\n    <fx>foo</fx>\n  </b>\n</object>\n"})})})]})]})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"string"}),", ",(0,s.jsx)(e.code,{children:"number"}),", ",(0,s.jsx)(e.code,{children:"boolean"}),", ",(0,s.jsx)(e.code,{children:"object"}),", ",(0,s.jsx)(e.code,{children:"array"}),", and ",(0,s.jsx)(e.code,{children:"null"})," are reserved keywords that cannot be used as type names."]})}),"\n",(0,s.jsxs)(e.p,{children:["Beans with type names are often used in conjunction with the ",(0,s.jsx)(e.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html#dictionary()",children:"@Bean(dictionary)"})," and ",(0,s.jsx)(e.a,{href:"../apidocs/org/apache/juneau/annotation/Beanp.html#dictionary()",children:"@Beanp(dictionary)"})," annotations so that the beans can be resolved at parse time.\nThese annotations are not necessary during serialization but are needed during parsing in order to resolve the bean types."]}),"\n",(0,s.jsxs)(e.p,{children:["The following examples show how type names are used under various circumstances.\nPay special attention to when ",(0,s.jsx)(e.code,{children:"_type"})," attributes are and are not used."]}),"\n",(0,s.jsx)(e.admonition,{title:"Example",type:"tip",children:(0,s.jsxs)("table",{class:"code-table",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Java"}),(0,s.jsx)("th",{children:"XML"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"@Bean(dictionary={BeanX.class})\nclass BeanWithArrayPropertiesWithTypeNames {\n  public BeanX[] b1 = new BeanX[]{ \n    new BeanX() \n  };\n  public Object[] b2 = new BeanX[]{ \n    new BeanX() \n  };\n  public Object[] b3 = new Object[]{ \n    new BeanX() \n  };\n}\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <b1>\n    <X>\n      <fx>foo</fx>\n    </X>\n  </b1>\n  <b2>\n    <X>\n      <fx>foo</fx>\n    </X>\n  </b2>\n  <b3>\n    <X>\n      <fx>foo</fx>\n    </X>\n  </b3>\n</object>\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"@Bean(dictionary={BeanX.class})\nclass BeanWith2dArrayPropertiesWithTypeNames {\n  public BeanX[][] b1 = new BeanX[][]{{\n    new BeanX()\n  }};\n  public Object[][] b2 = new BeanX[][]{{\n    new BeanX()\n  }};\n  public Object[][] b3 = new Object[][]{{\n    new BeanX()\n  }};\n}\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <b1>\n    <array>\n      <X>\n        <fx>foo</fx>\n      </X>\n    </array>\n  </b1>\n  <b2>\n    <array>\n      <X>\n        <fx>foo</fx>\n      </X>\n    </array>\n  </b2>\n  <b3>\n    <array>\n      <X>\n        <fx>foo</fx>\n      </X>\n    </array>\n  </b3>\n</object>\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@Bean(dictionary={BeanX.class})\nclass BeanWithMapPropertiesWithTypeNames {\n  public Map<String,BeanX> b1 = new HashMap<>() {{ \n    put("k1", new BeanX()); \n  }};\n  public Map<String,Object> b2 = new HashMap<>() {{\n    put("k2", new BeanX());\n  }};\n}\n'})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <b1>\n    <k1>\n      <fx>foo</fx>\n    </k1>\n  </b1>\n  <b2>\n    <k2 _type='X'>\n      <fx>foo</fx>\n    </k2>\n  </b2>\n</object>\n"})})})]})]})}),"\n",(0,s.jsx)(e.p,{children:"Bean type names are also used for resolution when abstract fields are used.\nThe following examples show how they are used in a variety of circumstances."}),"\n",(0,s.jsx)(e.admonition,{title:"Example",type:"tip",children:(0,s.jsxs)("table",{class:"code-table",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Java"}),(0,s.jsx)("th",{children:"XML"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@Bean(dictionary={A.class})\nclass BeanWithAbstractFields {\n  public A a = new A();\n  public IA ia = new A();\n  public AA aa = new A();\n  public Object o = new A();\n}\n\ninterface IA {}\n\nabstract class AA implements IA {}\n\n@Bean(typeName="A")\nclass A extends AA {\n  public String fa = "foo";\n}\n'})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <a>\n    <fa>foo</fa>\n  </a>\n  <ia _type='A'>\n    <fa>foo</fa>\n  </ia>\n  <aa _type='A'>\n    <fa>foo</fa>\n  </aa>\n  <o _type='A'>\n    <fa>foo</fa>\n  </o>\n</object>\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:"@Bean(dictionary={A.class})\nclass BeanWithAbstractArrayFields {\n  public A[] a = new A[]{new A()};\n  public IA[] ia1 = new A[]{new A()};\n  public IA[] ia2 = new IA[]{new A()};\n  public AA[] aa1 = new A[]{new A()};\n  public AA[] aa2 = new AA[]{new A()};\n  public Object[] o1 = new A[]{new A()};\n  public Object[] o2 = new Object[]{new A()};\n}\n"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <a>\n    <A>\n      <fa>foo</fa>\n    </A>\n  </a>\n  <ia1>\n    <A>\n      <fa>foo</fa>\n    </A>\n  </ia1>\n  <ia2>\n    <A>\n      <fa>foo</fa>\n    </A>\n  </ia2>\n  <aa1>\n    <A>\n      <fa>foo</fa>\n    </A>\n  </aa1>\n  <aa2>\n    <A>\n      <fa>foo</fa>\n    </A>\n  </aa2>\n  <o1>\n    <A>\n      <fa>foo</fa>\n    </A>\n  </o1>\n  <o2>\n    <A>\n      <fa>foo</fa>\n    </A>\n  </o2>\n</object>\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@Bean(dictionary={A.class})\nclass BeanWithAbstractMapFields {\n  public Map<String,A> a = new HashMap<>() {{\n    put("k1", new A());\n  }};\n  public Map<String,AA> b = new HashMap<>() {{\n    put("k2", new A());\n  }};\n  public Map<String,Object> c = new HashMap<>() {{\n    put("k3", new A());\n  }};\n}\n'})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <a>\n    <k1>\n      <fa>foo</fa>\n    </k1>\n  </a>\n  <b>\n    <k2 _type='A'>\n      <fa>foo</fa>\n    </k2>\n  </b>\n  <c>\n    <k3 _type='A'>\n      <fa>foo</fa>\n    </k3>\n  </c>\n</object>\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@Bean(dictionary={A.class})\nclass BeanWithAbstractMapArrayFields {\n  public Map<String,A[]> a = new LinkedHashMap<>() {{\n    put("a1", new A[]{new A()});\n  }};\n  public Map<String,IA[]> ia = new LinkedHashMap<>() {{\n    put("ia1", new A[]{new A()});\n    put("ia2", new IA[]{new A()});\n  }};\n  public Map<String,AA[]> aa = new LinkedHashMap<>() {{\n    put("aa1", new A[]{new A()});\n    put("aa2", new AA[]{new A()});\n  }};\n  public Map<String,Object[]> o = new LinkedHashMap<>() {{\n    put("o1", new A[]{new A()});\n    put("o2", new AA[]{new A()});\n  }};\n}\n'})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <a>\n    <a1>\n      <A>\n        <fa>foo</fa>\n      </A>\n    </a1>\n  </a>\n  <ia>\n    <ia1>\n      <A>\n        <fa>foo</fa>\n      </A>\n    </ia1>\n    <ia2>\n      <A>\n        <fa>foo</fa>\n      </A>\n    </ia2>\n  </ia>\n  <aa>\n    <aa1>\n      <A>\n        <fa>foo</fa>\n      </A>\n    </aa1>\n    <aa2>\n      <A>\n        <fa>foo</fa>\n      </A>\n    </aa2>\n  </aa>\n  <o>\n    <o1>\n      <A>\n        <fa>foo</fa>\n      </A>\n    </o1>\n    <o2>\n      <A>\n        <fa>foo</fa>\n      </A>\n    </o2>\n  </o>\n</object>\n"})})})]})]})}),"\n",(0,s.jsxs)(e.p,{children:["On a side note, characters that cannot be represented in XML 1.0 are encoded using a simple encoding.\nNote in the examples below, some characters such as ",(0,s.jsx)(e.code,{children:"'\\n'"}),", ",(0,s.jsx)(e.code,{children:"'\\t'"}),", and ",(0,s.jsx)(e.code,{children:"'\\r'"})," can be represented as XML entities when used in text but not in element names.\nOther characters such as ",(0,s.jsx)(e.code,{children:"'\\b'"})," and ",(0,s.jsx)(e.code,{children:"'\\f'"})," cannot be encoded in XML 1.0 at all without inventing our own notation.\nWhitespace characters in element names are encoded as well as whitespace end characters in text."]}),"\n",(0,s.jsx)(e.admonition,{title:"Example",type:"tip",children:(0,s.jsxs)("table",{class:"code-table",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Java"}),(0,s.jsx)("th",{children:"XML"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'class BeanWithSpecialCharacters {\n  public String a = "  \\b\\f\\n\\t\\r  ";\n}\n'})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<object>\n  <a>_x0020_ _x0008__x000C_&#x000a;&#x0009;&#x000d; _x0020_</a>\n</object>\n"})})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@Bean(typeName="  \\b\\f\\n\\t\\r  ")\nclass BeanWithNamesWithSpecialCharacters {\n  @Beanp(name="  \\b\\f\\n\\t\\r  ")\n  public String a = "  \\b\\f\\n\\t\\r  ";\n}\n'})})}),(0,s.jsx)("td",{children:(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-xml",children:"<_x0020__x0020__x0008__x000C__x000A__x0009__x000D__x0020__x0020_>\n  <_x0020__x0020__x0008__x000C__x000A__x0009__x000D__x0020__x0020_>\n    _x0020_ _x0008__x000C_&#x000a;&#x0009;&#x000d; _x0020_\n  </_x0020__x0020__x0008__x000C__x000A__x0009__x000D__x0020__x0020_>\n</_x0020__x0020__x0008__x000C__x000A__x0009__x000D__x0020__x0020_>\n"})})})]})]})}),"\n",(0,s.jsxs)(e.p,{children:["While it's true that these characters CAN be represented in XML 1.1, it's impossible to parse XML 1.1 text in Java without the XML containing an XML declaration.\nUnfortunately, this, and the uselessness of the ",(0,s.jsx)(e.a,{href:"../apidocs/javax/xml/stream/XMLInputFactory.html#IS_REPLACING_ENTITY_REFERENCES",children:"XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES"})," setting in Java forced us to make some hard design decisions that may not be the most elegant."]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);