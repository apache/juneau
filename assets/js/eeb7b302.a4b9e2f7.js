"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[8759],{23105:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/14.02.00.MyJettyMicroserviceInstalling","title":"Installing in Eclipse","description":"Follow these instructions to create a new template project in Eclipse.","source":"@site/docs-staging/topics/14.02.00.MyJettyMicroserviceInstalling.md","sourceDirName":"topics","slug":"/topics/14.02.00.MyJettyMicroserviceInstalling","permalink":"/docs/topics/14.02.00.MyJettyMicroserviceInstalling","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/14.02.00.MyJettyMicroserviceInstalling.md","tags":[],"version":"current","frontMatter":{"title":"Installing in Eclipse"},"sidebar":"mainSidebar","previous":{"title":"14.1. My Jetty Microservice Basics","permalink":"/docs/topics/14.01.00.MyJettyMicroserviceBasics"},"next":{"title":"14.3. Running","permalink":"/docs/topics/14.03.00.MyJettyMicroserviceRunning"}}');var r=t(74848),o=t(28453);const i={title:"Installing in Eclipse"},a=void 0,c={},l=[];function d(e){const n={code:"code",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Follow these instructions to create a new template project in Eclipse."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Download the ",(0,r.jsx)(n.code,{children:"my-jetty-microservice-9.0.1.zip"})," file from the downloads page (located in the binaries) and import it into your workspace as an existing project:"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Import Project",src:t(76718).A+"",width:"1048",height:"466"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Select the archive file and import the project:"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Select Archive",src:t(88197).A+"",width:"1098",height:"1178"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"In your workspace, you should now see the following project:"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Project in Workspace",src:t(52284).A+"",width:"800",height:"578"})}),"\n",(0,r.jsx)(n.p,{children:"The important elements in this project are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"App.java"})," - The entry point.\nThis class creates and starts our microservice:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class App {\n\n    public static void main(String[] args) throws Exception {\n        JettyMicroservice\n            .create()\n            .args(args)\n            .servlet(RootResources.class)\n            .build()\n            .start()\n            .startConsole()\n            .join();\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RootResources.java"})," - The top-level REST resource.\nThis class routes HTTP requests to child resources:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Rest(\n    path="/",\n    title="My Microservice",\n    description="Top-level resources page",\n    children={\n        HelloWorldResource.class,\n        ConfigResource.class,\n        LogsResource.class\n    }\n)\n@HtmlDocConfig(\n    widgets={\n        ContentTypeMenuItem.class,\n        StyleMenuItem.class\n    },\n    navlinks={\n        "options: servlet:/?method=OPTIONS"\n    }\n)\npublic class RootResources extends BasicRestServletGroup {\n    // No code\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"mjm.cfg - The external configuration file.\nContains various useful settings.\nCan be used for your own resource configurations."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:'#=======================================================================================================================\n# Basic configuration file for REST microservices\n# Subprojects can use this as a starting point.\n#=======================================================================================================================\n\n#=======================================================================================================================\n# Jetty settings\n#=======================================================================================================================\n[Jetty]\n\n# Path of the jetty.xml file used to configure the Jetty server.\n\nconfig = jetty.xml\n\n# Resolve Juneau variables in the jetty.xml file.\n\nresolveVars = true\n\n# Port to use for the jetty server.\n# You can specify multiple ports.  The first available will be used.  \'0\' indicates to try a random port.\n# The resulting available port gets set as the system property "availablePort" which can be referenced in the\n# jetty.xml file as "$S{availablePort}" (assuming resolveVars is enabled).\n\nport = 10000,0,0,0\n\n# Optionally specify your servlets here:\n\n#servlets = org.apache.juneau.microservice.sample.RootResources\n\n#=======================================================================================================================\n# REST settings\n#=======================================================================================================================\n[REST]\n\n# Comma-delimited list of key-value pairs that represent locations of static files that can be served up by your @Rest-annotated\n# classes.  These are static files that are served up by the servlet under the specified sub-paths.\n# For example, given the following setting...\n# \tstaticFiles = htdocs:my-docs,styles/my-styles\n# ...the URI "/servletPath/htdocs/javadoc.css" resolves to the path "/my-docs/javadoc.css".\n# This path can be relative to the working directory, classpath root, or package of your resource class.\n# Used by the BasicRestConfig interface that defines the following value:\n# \tstaticFiles="$C{REST/staticFiles}"\n\nstaticFiles = htdocs:htdocs\n\n# Stylesheet to use for HTML views.\n# Used by the BasicRestConfig interface that defines the following value:\n# \tstylesheet="$C{REST/theme,servlet:/htdocs/themes/devops.css}"\n\ntheme = servlet:/htdocs/themes/devops.css\n\n# Various look-and-feel settings used in the BasicRestConfig interface.\n\nheaderIcon = servlet:/htdocs/images/juneau.png\nheaderLink = http://juneau.apache.org\nfooterIcon = servlet:/htdocs/images/asf.png\nfooterLink = http://www.apache.org\nfavicon = $C{REST/headerIcon}\nheader =\n\nfooter =\n\n#=======================================================================================================================\n# Console settings\n#=======================================================================================================================\n[Console]\n\nenabled = true\n\n# List of available console commands.\n# These are classes that implements ConsoleCommand that allow you to submit commands to the microservice via\n# the console.\n# When listed here, the implementations must provide a no-arg constructor.\n# They can also be provided dynamically by overriding the Microservice.createConsoleCommands() method.\n\ncommands =\n    org.apache.juneau.microservice.console.ExitCommand,\n    org.apache.juneau.microservice.console.RestartCommand,\n    org.apache.juneau.microservice.console.HelpCommand,\n    org.apache.juneau.microservice.console.ConfigCommand\n\n#=======================================================================================================================\n# Logger settings\n#-----------------------------------------------------------------------------------------------------------------------\n# See FileHandler Java class for details.\n#=======================================================================================================================\n[Logging]\n...\n\n#=======================================================================================================================\n# System properties\n#-----------------------------------------------------------------------------------------------------------------------\n# These are arbitrary system properties that are set during startup.\n#=======================================================================================================================\n[SystemProperties]\n\n# Configure Jetty for StdErrLog Logging\n# org.eclipse.jetty.util.log.class = org.eclipse.jetty.util.log.StrErrLog\n# Configure Jetty to log using java-util logging\n\norg.eclipse.jetty.util.log.class = org.apache.juneau.microservice.jetty.JettyLogger\n\n# Jetty logging level\n# Possible values:  ALL, DEBUG, INFO, WARN, OFF\n\norg.eclipse.jetty.LEVEL = WARN\n\nderby.stream.error.file = $C{Logging/logDir}/derby-errors.log\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"jetty.xml - The Jetty configuration file.\nA bare-bones config file that can be extended to use any Jetty features."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<Configure id="ExampleServer" class="org.eclipse.jetty.server.Server">\n\n    <Set name="connectors">\n        <Array type="org.eclipse.jetty.server.Connector">\n            <Item>\n                <New class="org.eclipse.jetty.server.ServerConnector">\n                    <Arg>\n                        <Ref refid="ExampleServer"/>\n                    </Arg>\n                    <Set name="port">$S{availablePort,8080}</Set>\n                </New>\n            </Item>\n        </Array>\n    </Set>\n\n    <New id="context" class="org.eclipse.jetty.ee9.servlet.ServletContextHandler">\n        <Set name="contextPath">/</Set>\n        \x3c!-- Optionally specify your servlets here --\x3e\n        \x3c!--Call name="addServlet">\n            <Arg>org.apache.juneau.microservice.sample.RootResources</Arg>\n            <Arg>/*</Arg>\n        </Call--\x3e\n        <Set name="sessionHandler">\n            <New class="org.eclipse.jetty.ee9.nested.SessionHandler"/>\n        </Set>\n    </New>\n\n    <Set name="handler">\n        <New class="org.eclipse.jetty.ee9.nested.HandlerCollection">\n            <Set name="handlers">\n                <Array type="org.eclipse.jetty.ee9.nested.Handler">\n                    <Item>\n                        <Ref refid="context"/>\n                    </Item>\n                    <Item>\n                        <New class="org.eclipse.jetty.server.handler.DefaultHandler"/>\n                    </Item>\n                </Array>\n            </Set>\n        </New>\n    </Set>\n\n    <New id="RequestLogImpl" class="org.eclipse.jetty.server.CustomRequestLog">\n        \x3c!-- Param 0: org.eclipse.jetty.server.RequestLogWriter --\x3e\n        <Arg>\n            <New class="org.eclipse.jetty.server.RequestLogWriter">\n                <Set name="append">false</Set>;\n                <Set name="filename"><Property name="jetty.logs" default="$C{Logging/logDir,logs}" />/jetty-requests.log</Set>;\n                <Set name="filenameDateFormat">yyyy_MM_dd</Set>\n                <Set name="retainDays">90</Set>\n                <Set name="timeZone">GMT</Set>\n            </New>\n        </Arg>\n        \x3c!-- Param 1: String --\x3e\n        <Arg>\n            <Get class="org.eclipse.jetty.server.CustomRequestLog" name="EXTENDED_NCSA_FORMAT" />\n        </Arg>\n    </New>\n\n    <Get name="ThreadPool">\n        <Set name="minThreads" type="int">10</Set>\n        <Set name="maxThreads" type="int">100</Set>\n        <Set name="idleTimeout" type="int">60000</Set>\n        <Set name="detailedDump">true</Set>\n    </Get>\n</Configure>\n'})}),"\n",(0,r.jsx)(n.p,{children:"At this point, you're ready to start the microservice from your workspace."})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(96540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},52284:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/mjm.Installing.3-c0d0160c105f3c98907ba10b3f0d0c23.png"},76718:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/mjm.Installing.1-302f5437610dce13882b3524cac34677.png"},88197:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/mjm.Installing.2-bf90a5d4c63a6396b40bf48bba6ae065.png"}}]);