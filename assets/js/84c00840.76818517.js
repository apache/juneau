"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[2453],{21956:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"topics/05.04.02.LogicVariables","title":"Logic Variables","description":"The default variable resolver also provides the following logic variables for performing simple logical operations:","source":"@site/docs/topics/05.04.02.LogicVariables.md","sourceDirName":"topics","slug":"/topics/LogicVariables","permalink":"/docs/topics/LogicVariables","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/05.04.02.LogicVariables.md","tags":[],"version":"current","frontMatter":{"title":"Logic Variables","slug":"LogicVariables"},"sidebar":"mainSidebar","previous":{"title":"5.4.1. Variable Basics","permalink":"/docs/topics/VariableBasics"},"next":{"title":"5.5. Modded/Encoded Entries","permalink":"/docs/topics/ModdedEntries"}}');var r=n(74848),o=n(28453);const i={title:"Logic Variables",slug:"LogicVariables"},l=void 0,c={},t=[];function d(e){const a={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.p,{children:"The default variable resolver also provides the following logic variables for performing simple logical operations:"}),"\n",(0,r.jsxs)("tree",{children:[(0,r.jsx)("node-0",{children:"Logic Variables"}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/svl/vars/IfVar.html",target:"_blank",children:"IfVar"})})," - ",(0,r.jsx)(a.code,{children:"$IF{arg,then[,else]}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/svl/vars/SwitchVar.html",target:"_blank",children:"SwitchVar"})})," - ",(0,r.jsx)(a.code,{children:"$SW{arg,pattern1:then1[,pattern2:then2...]}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/svl/vars/CoalesceVar.html",target:"_blank",children:"CoalesceVar"})})," - ",(0,r.jsx)(a.code,{children:"$CO{arg1[,arg2...]}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/svl/vars/PatternMatchVar.html",target:"_blank",children:"PatternMatchVar"})})," - ",(0,r.jsx)(a.code,{children:"$PM{arg,pattern}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/svl/vars/NotEmptyVar.html",target:"_blank",children:"NotEmptyVar"})})," - ",(0,r.jsx)(a.code,{children:"$NE{arg}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/svl/vars/UpperCaseVar.html",target:"_blank",children:"UpperCaseVar"})})," - ",(0,r.jsx)(a.code,{children:"$UC{arg}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/svl/vars/LowerCaseVar.html",target:"_blank",children:"LowerCaseVar"})})," - ",(0,r.jsx)(a.code,{children:"$LC{arg}"})]})]}),"\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.code,{children:"$IF"})," variable can be used for simple if/else logic:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ini",children:"# Value set to 'foo' if myBooleanProperty is true\n\nkey1 =\n    $IF{\n        $S{myBooleanProperty},\n        foo\n    }\n\n# Value set to 'foo' if myBooleanProperty is true, 'bar' if false.\n\nkey2 =\n    $IF{\n        $S{myBooleanProperty},\n        foo,\n        bar\n    }\n\n# Value set to key1 value if myBooleanProperty is true, key2 value if false.\n\nkey3 =\n    $IF{\n        $S{myBooleanProperty},\n        $C{key1},\n        $C{key2}\n    }\n"})}),"\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.code,{children:"$SW"})," variable can be used for switch blocks based on pattern matching:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ini",children:"# Shell command depends on the OS\n\nshellCommand =\n    $SW{\n        $LC{$S{os.name}},\n        *win*: bat,\n        linux: bash,\n        *: sh\n    }\n"})}),"\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.code,{children:"$CO"})," variable can be used for coalescing of values (finding the first non-null/empty match):"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ini",children:"# Debug flag can be enabled by system property or environment variable.\n\ndebug =\n    $CO{\n        $S{debug},\n        $E{DEBUG},\n        false\n    }\n"})}),"\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.code,{children:"$PM"})," variable can be used for calculating boolean values:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ini",children:"# Debug flag can be enabled by system property or environment variable.\n\nisWindows =\n    $PM{\n        $LC{$S{os.name}},\n        *win*\n    }\n"})})]})}function h(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>l});var s=n(96540);const r={},o=s.createContext(r);function i(e){const a=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:a},e.children)}}}]);