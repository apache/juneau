"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[3810],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(96540);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},48943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/13.08.00.UiCustomization","title":"UI Customization","description":"The Microservice project contains a files/htdocs folder with predefined stylesheets and images.","source":"@site/docs-staging/topics/13.08.00.UiCustomization.md","sourceDirName":"topics","slug":"/topics/13.08.00.UiCustomization","permalink":"/docs/topics/13.08.00.UiCustomization","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/13.08.00.UiCustomization.md","tags":[],"version":"current","frontMatter":{"title":"UI Customization"},"sidebar":"mainSidebar","previous":{"title":"13.7. Jetty XML","permalink":"/docs/topics/13.07.00.JettyXml"},"next":{"title":"13.9. Extending","permalink":"/docs/topics/13.09.00.Extending"}}');var o=n(74848),i=n(28453);const a={title:"UI Customization"},r=void 0,c={},l=[];function d(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The Microservice project contains a ",(0,o.jsx)(t.code,{children:"files/htdocs"})," folder with predefined stylesheets and images.\nThese files can be used to tailor the look-and-feel of your microservice."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-text",children:"http://localhost:10000/helloWorld\n"})}),"\n",(0,o.jsx)(t.p,{children:"The REST configuration section of your microservice configuration file can be used to tailor the header and footer on\nthe pages:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ini",children:"#=======================================================================================================================\n# REST settings\n#=======================================================================================================================\n[REST]\n\nstaticFiles = htdocs:files/htdocs\n\n# Stylesheet to use for HTML views.\n\ntheme = servlet:/htdocs/themes/devops.css\n\nheaderIcon = servlet:/htdocs/images/juneau.png\nheaderLink = http://juneau.apache.org\nfooterIcon = servlet:/htdocs/images/asf.png\nfooterLink = http://www.apache.org\n\nfavicon = $C{REST/headerIcon}\nheader =\n\nfooter =\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/config/DefaultConfig.html",children:"DefaultConfig"})," interface (which defines the default\nsettings for ",(0,o.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/servlet/BasicRestServlet.html",children:"BasicRestServlet"})," pulls in this\ninformation using ",(0,o.jsx)(t.a,{href:"../apidocs/org/apache/juneau/config/vars/ConfigVar.html",children:"$C"})," and ",(0,o.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/vars/UrlVar.html",children:"$U"})," variables:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-java",children:'@Rest(\n    ...\n    // Optional external configuration file.\n    config="$S{juneau.configFile}",\n\n    // These are static files that are served up by the servlet under the specified sub-paths.\n    // For example, "/servletPath/htdocs/javadoc.css" resolves to the file "[servlet-package]/htdocs/javadoc.css"\n    // By default, we define static files through the external configuration file.\n    staticFiles="$C{REST/staticFiles}"\n)\n// HTML-page specific settings\n@HtmlDocConfig(\n    // Default page header contents.\n    header={\n        "$RS{title}",  // Use @Rest(title)\n        "$RS{operationSummary,description}", // Use either @RestOp(summary) or @Rest(description)\n        "$C{REST/header}"  // Extra header HTML defined in external config file.\n    },\n\n    // Default stylesheet to use for the page.\n    // Can be overridden from external config file.\n    // Default is DevOps look-and-feel (aka Depression look-and-feel).\n    stylesheet="$C{REST/theme,servlet:/htdocs/themes/devops.css}",\n\n    // Default contents to add to the  section of the HTML page.\n    // Use it to add a favicon link to the page.\n    head={\n        ""\n    },\n\n    // No default page footer contents.\n    // Can be overridden from external config file.\n    footer="$C{REST/footer}"\n)\npublic interface BasicRestConfig {}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Note that the ",(0,o.jsx)(t.code,{children:"files/htdocs"}),' directory is mapped to "servlet:/htdocs" using the ',(0,o.jsx)(t.code,{children:"staticFiles"}),' setting.\nThis allows those files to be served up through the servlet through the URL "/[servlet-path]/htdocs" The theme files are\nexternally accessible and can be modified to produce any look-and-feel you desire.\nThe microservice still works without the files directory.\nAn embedded ',(0,o.jsx)(t.code,{children:"devops.css"})," is included in the jar as a default spreadsheet.\nIf you're testing out changes in the theme stylesheets, you may want to set the following system property that prevents\ncaching of those files so that you don't need to restart the microservice each time a change is made:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ini",children:"#=======================================================================================================================\n# System properties\n#-----------------------------------------------------------------------------------------------------------------------\n# These are arbitrary system properties that are set during startup.\n#=======================================================================================================================\n[SystemProperties]\n\n# Disable classpath resource caching.\n\n# Useful if you're attached using a debugger and you're modifying classpath resources while running.\n\nRestContext.disableClasspathResourceCaching.b = true\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);