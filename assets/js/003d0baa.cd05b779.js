"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[3630],{13728:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>h,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"topics/06.02.00.AssertionsOverview","title":"Assertions Overview","description":"The org.apache.juneau.assertions package in Juneau is a powerful API for performing","source":"@site/docs-staging/topics/06.02.00.AssertionsOverview.md","sourceDirName":"topics","slug":"/topics/06.02.00.AssertionsOverview","permalink":"/docs/topics/06.02.00.AssertionsOverview","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/06.02.00.AssertionsOverview.md","tags":[],"version":"current","frontMatter":{"title":"Assertions Overview"},"sidebar":"mainSidebar","previous":{"title":"6.1. juneau-assertions Basics","permalink":"/docs/topics/06.01.00.JuneauAssertionBasics"},"next":{"title":"7.1. juneau-rest-common Basics","permalink":"/docs/topics/07.01.00.JuneauRestCommonBasics"}}');var n=a(74848),r=a(28453);const o={title:"Assertions Overview"},i=void 0,h={},c=[];function l(e){const s={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions.html",children:"org.apache.juneau.assertions"})," package in Juneau is a powerful API for performing\nfluent style assertions.\nIt is used throughout the REST client and server APIs for performing inline assertions on REST requests and responses."]}),"\n",(0,n.jsx)(s.admonition,{title:"Example",type:"tip",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-java",children:'// Create a basic REST client with JSON support and download a bean.\nMyBean bean = RestClient.create()\n    .json5()\n    .build()\n    .get(URI)\n    .run()\n    .assertStatus().asCode().is(200)\n    .assertHeader("Content-Type").isMatches("application/json*")\n    .getContent().assertValue().asString().isContains("OK")\n    .getContent().as(MyBean.class);\n'})})}),"\n",(0,n.jsx)(s.admonition,{type:"note",children:(0,n.jsx)(s.p,{children:"The REST API is described later in the documentation."})}),"\n",(0,n.jsx)(s.p,{children:"The assertions API is designed to be used in both code (as it's done in the REST APIs) or for standalone use in unit\ntests."}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html",children:"Assertions"})," class provides various static methods for\ninvoking assertions on a variety of object types for simplified unit testing."]}),"\n",(0,n.jsx)("tree",{children:(0,n.jsxs)("node-0",{children:[(0,n.jsx)("javac-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html",children:"Assertions"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertAny(Object)",children:"assertAny(T)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertArray(Object%5B%5D)",children:"assertArray(Object[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertBean(Object)",children:"assertBean(V)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertBeanList(List)",children:"assertBeanList(List)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertBoolean(Boolean)",children:"assertBoolean(Boolean)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertBooleanArray(boolean%5B%5D)",children:"assertBooleanArray(boolean[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertByteArray(byte%5B%5D)",children:"assertByteArray(byte[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertBytes(byte%5B%5D)",children:"assertBytes(byte[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertBytes(InputStream)",children:"assertBytes(InputStream)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertCharArray(char%5B%5D)",children:"assertCharArray(char[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertCollection(Collection)",children:"assertCollection(Collection)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertComparable(Comparable)",children:"assertComparable(T)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertDate(Date)",children:"assertDate(Date)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertDoubleArray(double%5B%5D)",children:"assertDoubleArray(double[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertFloatArray(float%5B%5D)",children:"assertFloatArray(float[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertIntArray(int%5B%5D)",children:"assertIntArray(int[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertInteger(Integer)",children:"assertInteger(Integer)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertList(List)",children:"assertList(List)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertLong(Long)",children:"assertLong(Long)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertLongArray(long%5B%5D)",children:"assertLongArray(long[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertMap(Map)",children:"assertMap(Map)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertObject(Object)",children:"assertObject(T)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertOptional(Optional)",children:"assertOptional(Optional)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertReader(Reader)",children:"assertReader(Reader)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertShortArray(short%5B%5D)",children:"assertShortArray(short[])"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertString(Object)",children:"assertString(Object)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertStringList(List)",children:"assertStringList(List)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertThrowable(Throwable)",children:"assertThrowable(V)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertThrown(Snippet)",children:"assertThrown(Snippet)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertVersion(Version)",children:"assertVersion(Version)"})})," ",(0,n.jsx)("javac-method",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html#assertZonedDateTime(ZonedDateTime)",children:"assertZonedDateTime(ZonedDateTime)"})})]})}),"\n",(0,n.jsx)(s.p,{children:"Assertions have 3 categories of methods:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Testing methods (",(0,n.jsx)(s.code,{children:"isX"})," methods)"]}),"\n",(0,n.jsxs)(s.li,{children:["Transform methods (",(0,n.jsx)(s.code,{children:"asX"})," methods)"]}),"\n",(0,n.jsxs)(s.li,{children:["Configuration methods (",(0,n.jsx)(s.code,{children:"setX"})," methods)"]}),"\n"]}),"\n",(0,n.jsx)(s.admonition,{title:"Examples",type:"tip",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-java",children:'import static org.apache.juneau.assertions.Assertions.*;\nimport static org.apache.juneau.assertions.AssertionPredicates.*;\n\n// Check the contents of a string.\nassertString("foo, bar")\n    .asSplit(",")\n    .asTrimmed()\n    .isHas("foo", "bar");\n\n// Extract a subset of properties from a list of beans and compare using JSON5.\nList myListOfBeans = ...;\nassertBeanList(myListOfBeans)\n    .asPropertyMap("a,b")\n    .asJson().is("[{a:1,b:\'foo\'}]");\n\n// Perform an arbitrary Predicate check against a bean.\nMyBean myBeans = ...;\nassertBean(myBeans)\n    .is(x -> isValidCheck(x))\n\n// Check that a list of strings has less than 10 entries and the first\n// 3 entries are [foo, bar*, null] using assertion predicates.\nList myListOfStrings = ...;\nassertStringList(myListOfStrings)\n    .asSize().isLt(10)\n    .asFirst(3)\n        .isEach(eq("foo"),match("bar*"),isNull())\n\n// Check that an exception is thrown and is the specified type and has the specified message.\nassertThrown(()->myBean.runBadMethod())\n    .exists()\n    .isExactType(RuntimeException.class)\n    .asMessage().is("foo");\n'})})}),"\n",(0,n.jsxs)(s.p,{children:["Testing methods (",(0,n.jsx)(s.code,{children:"isX"})," methods) perform an assertion on the specified value and throws a ",(0,n.jsx)(s.a,{href:"../apidocs/java/lang/AssertionError.html",children:"AssertionError"})," if\nthe test fails.\nOtherwise, the method returns the original assertion object to allow you to chain the command."]}),"\n",(0,n.jsx)(s.admonition,{title:"Example",type:"tip",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-java",children:"// Test a string.\nassertString(myString)\n    .isNotNull()  // Perform test and returns original FluentStringAssertion.\n    .isNotEmpty();  // Perform test and returns original FluentStringAssertion.\n"})})}),"\n",(0,n.jsxs)(s.p,{children:["Transform methods (",(0,n.jsx)(s.code,{children:"asX"})," methods) allow you to convert assertions of one type to another type or to convert the tested\nvalue to some other form wrapped in another assertion."]}),"\n",(0,n.jsx)(s.admonition,{title:"Example",type:"tip",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-java",children:'// Customize the behavior of an assertion.\nassertString(myString)\n    .asString()  // Converts to a FluentIntegerAssertion.\n        .isLt(100)  // Runs test and returns original FluentStringAssertion.\n    .asUc()  // Converts string to uppercase and returns a new FluentStringAssertion.\n        .isContains("FOO");  // Runs test and returns original FluentStringAssertion.\n'})})}),"\n",(0,n.jsxs)(s.p,{children:["Configuration methods (",(0,n.jsx)(s.code,{children:"setX"})," methods) allow you to tailor the behavior of assertions when they fail.\nThey always return the same assertion object."]}),"\n",(0,n.jsxs)(s.p,{children:["Transformed assertions inherit the configurations of the created-by assertions.\nConfiguration methods start with ",(0,n.jsx)(s.code,{children:"set"}),"."]}),"\n",(0,n.jsx)(s.admonition,{title:"Example",type:"tip",children:(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-java",children:'// Customize the behavior of an assertion.\nassertString(myString)\n    .setMsg("My string was null.  Value was {VALUE}.")  // Custom error message when error occurs.\n    .setOut(myPrintWriter)  // Print error message to a separate writer.\n    .setThrowable(MyAssertionThrowable.class)  // Throw a customized assertion exception.\n    .isNotNull();\n'})})}),"\n",(0,n.jsxs)(s.p,{children:["The following shows the class hierarchy for the ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/IntegerAssertion.html",children:"IntegerAssertion"})," class showing the general design pattern for assertion classes:"]}),"\n",(0,n.jsxs)("tree",{children:[(0,n.jsxs)("node-0",{children:[(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertion.html",children:"Assertion"})})," - Base class for all assertion objects containing common configuration methods."]}),(0,n.jsxs)("node-1",{children:[(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/FluentAssertion.html",children:"FluentAssertion"})})," - Parent class for all fluent assertions."]}),(0,n.jsxs)("node-2",{children:[(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/FluentObjectAssertion.html",children:"FluentObjectAssertion"})})," - Tests and transforms for general POJOs."]}),(0,n.jsxs)("node-3",{children:[(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/FluentComparableAssertion.html",children:"FluentComparableAssertion<T extends Comparable,R>"})})," - Tests and transforms for Comparables."]}),(0,n.jsxs)("node-4",{children:[(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/FluentIntegerAssertion.html",children:"FluentIntegerAssertion"})})," - Tests and transforms for Integers."]}),(0,n.jsxs)("node-5",{children:[(0,n.jsx)("java-class",{children:(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/IntegerAssertion.html",children:"IntegerAssertion"})})," - Assertion that returns itself."]})]}),"\n",(0,n.jsxs)(s.p,{children:['In the design, the "Fluent" classes (e.g. ',(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/FluentIntegerAssertion.html",children:"FluentIntegerAssertion"}),") allow you to specify the object that gets returned when the test method is executed.\nWhen used in the ",(0,n.jsx)(s.code,{children:"RestClient"})," class for example, the return object is the ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/rest/client/RestResponse.html",children:"RestResponse"}),' object so that you can perform multiple fluent operations against that object.\nThe "Normal" classes (e.g. ',(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/IntegerAssertion.html",children:"IntegerAssertion"}),") are\nsimply subclasses of the fluent equivalent which return the assertion itself, meaning the test method returns the\noriginal ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/IntegerAssertion.html",children:"IntegerAssertion"})," so that multiple tests can\nbe performed per assertion."]}),"\n",(0,n.jsxs)(s.p,{children:["For more information about the capabilities of the Assertions API, refer to the methods on the ",(0,n.jsx)(s.a,{href:"../apidocs/org/apache/juneau/assertions/Assertions.html",children:"Assertions"})," methods above."]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,s,a)=>{a.d(s,{R:()=>o,x:()=>i});var t=a(96540);const n={},r=t.createContext(n);function o(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);