"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[8305],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var a=s(96540);const i={},r=a.createContext(i);function t(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:n},e.children)}},51126:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"topics/04.04.00.JuneauBeanJsonSchema","title":"juneau-bean-jsonschema","description":"The juneau-bean-jsonschema module provides Java beans for working with JSON Schema documents following the JSON Schema Draft 2020-12 specification.","source":"@site/docs/topics/04.04.00.JuneauBeanJsonSchema.md","sourceDirName":"topics","slug":"/topics/JuneauBeanJsonSchema","permalink":"/docs/topics/JuneauBeanJsonSchema","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/04.04.00.JuneauBeanJsonSchema.md","tags":[],"version":"current","frontMatter":{"title":"juneau-bean-jsonschema","slug":"JuneauBeanJsonSchema"},"sidebar":"mainSidebar","previous":{"title":"4.3. juneau-bean-atom","permalink":"/docs/topics/JuneauBeanAtom"},"next":{"title":"4.5. juneau-bean-openapi-v3","permalink":"/docs/topics/JuneauBeanOpenApi3"}}');var i=s(74848),r=s(28453);const t={title:"juneau-bean-jsonschema",slug:"JuneauBeanJsonSchema"},c="juneau-bean-jsonschema",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Creating a Simple Schema",id:"creating-a-simple-schema",level:3},{value:"Common Schema Patterns",id:"common-schema-patterns",level:2},{value:"String Constraints",id:"string-constraints",level:3},{value:"Numeric Ranges",id:"numeric-ranges",level:3},{value:"Enumerations",id:"enumerations",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Object Properties",id:"object-properties",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Conditional Schemas (Draft 07+)",id:"conditional-schemas-draft-07",level:3},{value:"Reusable Definitions ($defs)",id:"reusable-definitions-defs",level:3},{value:"Schema Composition",id:"schema-composition",level:3},{value:"Dependent Schemas (Draft 2019-09+)",id:"dependent-schemas-draft-2019-09",level:3},{value:"Parsing JSON Schema",id:"parsing-json-schema",level:2},{value:"Serialization to Other Formats",id:"serialization-to-other-formats",level:2},{value:"Migration Guide",id:"migration-guide",level:2},{value:"From Draft 04 to Draft 2020-12",id:"from-draft-04-to-draft-2020-12",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Main Classes",id:"main-classes",level:3},{value:"Key Methods",id:"key-methods",level:3},{value:"Dependencies",id:"dependencies",level:2},{value:"Resources",id:"resources",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"juneau-bean-jsonschema",children:"juneau-bean-jsonschema"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"juneau-bean-jsonschema"})," module provides Java beans for working with JSON Schema documents following the ",(0,i.jsx)(n.strong,{children:"JSON Schema Draft 2020-12"})," specification."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"This module contains predefined POJOs for representing and manipulating JSON Schema documents programmatically. These beans can be serialized to any format supported by Juneau (JSON, XML, HTML, etc.), making it easy to generate and consume JSON Schema documents in your applications."}),"\n",(0,i.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Full Draft 2020-12 Support:"})," All properties and validation keywords from the latest specification"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Backward Compatibility:"})," Deprecated Draft 04 properties are still supported for legacy schemas"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fluent API:"})," Method chaining for intuitive schema construction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety:"})," Uses enums and typed collections"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Format Agnostic:"})," Serialize to JSON, XML, HTML, or any other Juneau-supported format"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-simple-schema",children:"Creating a Simple Schema"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.apache.juneau.bean.jsonschema.*;\nimport org.apache.juneau.json.*;\n\n// Create a schema for a person object\nJsonSchema schema = new JsonSchema()\n    .setIdUri("https://example.com/person.schema.json")\n    .setSchemaVersionUri("https://json-schema.org/draft/2020-12/schema")\n    .setTitle("Person")\n    .setDescription("A person object")\n    .setType(JsonType.OBJECT)\n    .addProperties(\n        new JsonSchemaProperty("firstName", JsonType.STRING)\n            .setMinLength(1)\n            .setMaxLength(50),\n        new JsonSchemaProperty("lastName", JsonType.STRING)\n            .setMinLength(1)\n            .setMaxLength(50),\n        new JsonSchemaProperty("age", JsonType.INTEGER)\n            .setMinimum(0)\n            .setExclusiveMaximum(150)\n    )\n    .addRequired("firstName", "lastName");\n\n// Serialize to JSON\nString json = JsonSerializer.DEFAULT_SORTED.serialize(schema);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "$id": "https://example.com/person.schema.json",\n  "$schema": "https://json-schema.org/draft/2020-12/schema",\n  "description": "A person object",\n  "properties": {\n    "age": {\n      "exclusiveMaximum": 150,\n      "minimum": 0,\n      "type": "integer"\n    },\n    "firstName": {\n      "maxLength": 50,\n      "minLength": 1,\n      "type": "string"\n    },\n    "lastName": {\n      "maxLength": 50,\n      "minLength": 1,\n      "type": "string"\n    }\n  },\n  "required": ["firstName", "lastName"],\n  "title": "Person",\n  "type": "object"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-schema-patterns",children:"Common Schema Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"string-constraints",children:"String Constraints"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// String with pattern and length constraints\nJsonSchema schema = new JsonSchema()\n    .setType(JsonType.STRING)\n    .setMinLength(5)\n    .setMaxLength(100)\n    .setPattern("^[A-Za-z0-9]+$")\n    .addExamples("example1", "example2");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"numeric-ranges",children:"Numeric Ranges"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Number with exclusive bounds (Draft 06+ syntax)\nJsonSchema schema = new JsonSchema()\n    .setType(JsonType.NUMBER)\n    .setExclusiveMinimum(0)      // > 0 (not >=)\n    .setExclusiveMaximum(100)    // < 100 (not <=)\n    .setMultipleOf(0.5);\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Draft 04 vs Draft 2020-12",type:"note",children:[(0,i.jsxs)(n.p,{children:["In Draft 04, ",(0,i.jsx)(n.code,{children:"exclusiveMaximum"})," and ",(0,i.jsx)(n.code,{children:"exclusiveMinimum"})," were boolean flags used with ",(0,i.jsx)(n.code,{children:"maximum"})," and ",(0,i.jsx)(n.code,{children:"minimum"}),".\nIn Draft 06+, they are numeric values representing the exclusive bounds directly."]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Old (Draft 04):"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:".setMaximum(100)\n.setExclusiveMaximum(true)  // Boolean\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"New (Draft 2020-12):"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:".setExclusiveMaximum(100)  // Direct numeric value\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"enumerations",children:"Enumerations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Restrict to specific values\nJsonSchema schema = new JsonSchema()\n    .setType(JsonType.STRING)\n    .addEnum("pending", "active", "completed", "cancelled");\n\n// Or use const for a single value\nJsonSchema statusSchema = new JsonSchema()\n    .setConst("active");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"arrays",children:"Arrays"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Array of strings with item constraints\nJsonSchema schema = new JsonSchema()\n    .setType(JsonType.ARRAY)\n    .setItems(new JsonSchema()\n        .setType(JsonType.STRING)\n        .setMinLength(1)\n    )\n    .setMinItems(1)\n    .setMaxItems(10)\n    .setUniqueItems(true);\n\n// Tuple validation with prefixItems (Draft 2020-12)\nJsonSchema coordinateSchema = new JsonSchema()\n    .setType(JsonType.ARRAY)\n    .addPrefixItems(\n        new JsonSchema().setType(JsonType.NUMBER),  // latitude\n        new JsonSchema().setType(JsonType.NUMBER)   // longitude\n    )\n    .setItems(false);  // No additional items allowed\n"})}),"\n",(0,i.jsx)(n.h3,{id:"object-properties",children:"Object Properties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Object with property constraints\nJsonSchema schema = new JsonSchema()\n    .setType(JsonType.OBJECT)\n    .addProperties(\n        new JsonSchemaProperty("name", JsonType.STRING),\n        new JsonSchemaProperty("email", JsonType.STRING)\n            .setReadOnly(true),  // Draft 07+\n        new JsonSchemaProperty("password", JsonType.STRING)\n            .setWriteOnly(true)  // Draft 07+\n    )\n    .addRequired("name")\n    .setMinProperties(1)\n    .setMaxProperties(10)\n    .setAdditionalProperties(false);  // No extra properties allowed\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(n.h3,{id:"conditional-schemas-draft-07",children:"Conditional Schemas (Draft 07+)"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"if/then/else"})," for conditional validation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'JsonSchema schema = new JsonSchema()\n    .setType(JsonType.OBJECT)\n    .addProperties(\n        new JsonSchemaProperty("country", JsonType.STRING),\n        new JsonSchemaProperty("postalCode", JsonType.STRING)\n    )\n    .setIf(new JsonSchema()\n        .addProperties(\n            new JsonSchemaProperty("country").setConst("USA")\n        )\n    )\n    .setThen(new JsonSchema()\n        .addProperties(\n            new JsonSchemaProperty("postalCode")\n                .setPattern("^[0-9]{5}$")\n        )\n    )\n    .setElse(new JsonSchema()\n        .addProperties(\n            new JsonSchemaProperty("postalCode")\n                .setPattern("^[A-Z0-9]{3,10}$")\n        )\n    );\n'})}),"\n",(0,i.jsx)(n.h3,{id:"reusable-definitions-defs",children:"Reusable Definitions ($defs)"}),"\n",(0,i.jsx)(n.p,{children:"Create reusable schema components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'JsonSchema schema = new JsonSchema()\n    .setIdUri("https://example.com/product.schema.json")\n    .setType(JsonType.OBJECT)\n    // Define reusable schemas\n    .addDef("address", new JsonSchema()\n        .setType(JsonType.OBJECT)\n        .addProperties(\n            new JsonSchemaProperty("street", JsonType.STRING),\n            new JsonSchemaProperty("city", JsonType.STRING),\n            new JsonSchemaProperty("zipCode", JsonType.STRING)\n        )\n        .addRequired("street", "city")\n    )\n    .addDef("price", new JsonSchema()\n        .setType(JsonType.NUMBER)\n        .setExclusiveMinimum(0)\n        .addExamples(9.99, 19.99, 99.99)\n    )\n    // Reference definitions\n    .addProperties(\n        new JsonSchemaProperty("billingAddress")\n            .setRef("#/$defs/address"),\n        new JsonSchemaProperty("shippingAddress")\n            .setRef("#/$defs/address"),\n        new JsonSchemaProperty("price")\n            .setRef("#/$defs/price")\n    );\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"$defs vs definitions",type:"tip",children:(0,i.jsxs)(n.p,{children:["Draft 2020-12 uses ",(0,i.jsx)(n.code,{children:"$defs"})," as the preferred keyword, but ",(0,i.jsx)(n.code,{children:"definitions"})," is still supported for backward compatibility.\nUse ",(0,i.jsx)(n.code,{children:"addDef()"})," for new schemas, but ",(0,i.jsx)(n.code,{children:"addDefinition()"})," will still work."]})}),"\n",(0,i.jsx)(n.h3,{id:"schema-composition",children:"Schema Composition"}),"\n",(0,i.jsx)(n.p,{children:"Combine schemas using logical operators:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// allOf - must match ALL schemas\nJsonSchema allOfSchema = new JsonSchema()\n    .addAllOf(\n        new JsonSchema().setType(JsonType.STRING),\n        new JsonSchema().setMinLength(5)\n    );\n\n// anyOf - must match AT LEAST ONE schema\nJsonSchema anyOfSchema = new JsonSchema()\n    .addAnyOf(\n        new JsonSchema().setType(JsonType.STRING),\n        new JsonSchema().setType(JsonType.NUMBER)\n    );\n\n// oneOf - must match EXACTLY ONE schema\nJsonSchema oneOfSchema = new JsonSchema()\n    .addOneOf(\n        new JsonSchema().setMultipleOf(5),\n        new JsonSchema().setMultipleOf(3)\n    );\n\n// not - must NOT match schema\nJsonSchema notSchema = new JsonSchema()\n    .setNot(new JsonSchema().setType(JsonType.NULL));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dependent-schemas-draft-2019-09",children:"Dependent Schemas (Draft 2019-09+)"}),"\n",(0,i.jsx)(n.p,{children:"Express dependencies between properties:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// If creditCard exists, billingAddress is required\nJsonSchema schema = new JsonSchema()\n    .setType(JsonType.OBJECT)\n    .addProperties(\n        new JsonSchemaProperty("creditCard", JsonType.STRING),\n        new JsonSchemaProperty("billingAddress", JsonType.STRING)\n    )\n    .addDependentSchema("creditCard", new JsonSchema()\n        .addRequired("billingAddress")\n    );\n\n// Property-level dependencies\nschema.addDependentRequired("creditCard", \n    Arrays.asList("billingAddress", "cardholderName"));\n'})}),"\n",(0,i.jsx)(n.h2,{id:"parsing-json-schema",children:"Parsing JSON Schema"}),"\n",(0,i.jsx)(n.p,{children:"Parse existing JSON Schema documents:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.apache.juneau.json.*;\n\nString jsonSchemaString = """\n    {\n        "$id": "https://example.com/schema",\n        "$schema": "https://json-schema.org/draft/2020-12/schema",\n        "type": "object",\n        "properties": {\n            "name": { "type": "string" },\n            "age": { "type": "integer", "minimum": 0 }\n        },\n        "required": ["name"]\n    }\n    """;\n\nJsonSchema schema = JsonParser.DEFAULT.parse(jsonSchemaString, JsonSchema.class);\n\n// Access properties\nString title = schema.getTitle();\nMap<String, JsonSchema> props = schema.getProperties();\nJsonSchema nameProperty = schema.getProperty("name");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"serialization-to-other-formats",children:"Serialization to Other Formats"}),"\n",(0,i.jsx)(n.p,{children:"Since these are standard Juneau beans, you can serialize to any supported format:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.apache.juneau.xml.*;\nimport org.apache.juneau.html.*;\n\nJsonSchema schema = new JsonSchema()\n    .setTitle("Example")\n    .setType(JsonType.STRING);\n\n// Serialize to XML\nString xml = XmlSerializer.DEFAULT.serialize(schema);\n\n// Serialize to HTML\nString html = HtmlSerializer.DEFAULT.serialize(schema);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,i.jsx)(n.h3,{id:"from-draft-04-to-draft-2020-12",children:"From Draft 04 to Draft 2020-12"}),"\n",(0,i.jsx)(n.p,{children:"If you have existing code using Draft 04 syntax:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Property Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," \u2192 ",(0,i.jsx)(n.code,{children:"$id"})," (use ",(0,i.jsx)(n.code,{children:"setIdUri()"})," instead of ",(0,i.jsx)(n.code,{children:"setId()"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"definitions"})," \u2192 ",(0,i.jsx)(n.code,{children:"$defs"})," (use ",(0,i.jsx)(n.code,{children:"addDef()"})," instead of ",(0,i.jsx)(n.code,{children:"addDefinition()"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Semantic Changes:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// OLD: Draft 04 - boolean flags\nschema.setMaximum(100).setExclusiveMaximum(true);\nschema.setMinimum(0).setExclusiveMinimum(true);\n\n// NEW: Draft 2020-12 - direct numeric values\nschema.setExclusiveMaximum(100);\nschema.setExclusiveMinimum(0);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Backward Compatibility:"}),"\nThe deprecated methods still work, so existing code will continue to function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// These still work (deprecated but supported)\nschema.setId("http://example.com/schema");\nschema.addDefinition("myDef", new JsonSchema());\n'})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"main-classes",children:"Main Classes"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/bean/jsonschema/JsonSchema.html",target:"_blank",children:(0,i.jsx)(n.code,{children:"JsonSchema"})})," - Main schema bean"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/bean/jsonschema/JsonSchemaProperty.html",target:"_blank",children:(0,i.jsx)(n.code,{children:"JsonSchemaProperty"})})," - Property schema (extends JsonSchema)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/bean/jsonschema/JsonType.html",target:"_blank",children:(0,i.jsx)(n.code,{children:"JsonType"})})," - Enum for JSON types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/bean/jsonschema/JsonSchemaRef.html",target:"_blank",children:(0,i.jsx)(n.code,{children:"JsonSchemaRef"})})," - Schema reference ($ref)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/bean/jsonschema/JsonSchemaArray.html",target:"_blank",children:(0,i.jsx)(n.code,{children:"JsonSchemaArray"})})," - Array of schemas"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/bean/jsonschema/JsonSchemaMap.html",target:"_blank",children:(0,i.jsx)(n.code,{children:"JsonSchemaMap"})})," - Map of schemas"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-methods",children:"Key Methods"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Identity:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setIdUri(Object)"})," - Set schema identifier ($id)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setSchemaVersionUri(Object)"})," - Set schema version ($schema)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Metadata:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setTitle(String)"})," - Human-readable title"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setDescription(String)"})," - Detailed description"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"addExamples(Object...)"})," - Add example values"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Type Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setType(JsonType)"})," - Set expected type"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setEnum(List)"})," / ",(0,i.jsx)(n.code,{children:"addEnum(Object...)"})," - Restrict to specific values"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setConst(Object)"})," - Require specific value"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"String Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setMinLength(Integer)"})," / ",(0,i.jsx)(n.code,{children:"setMaxLength(Integer)"})," - Length bounds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setPattern(String)"})," - Regular expression pattern"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setContentMediaType(String)"})," / ",(0,i.jsx)(n.code,{children:"setContentEncoding(String)"})," - Content metadata"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Numeric Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setMinimum(Number)"})," / ",(0,i.jsx)(n.code,{children:"setMaximum(Number)"})," - Inclusive bounds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setExclusiveMinimum(Number)"})," / ",(0,i.jsx)(n.code,{children:"setExclusiveMaximum(Number)"})," - Exclusive bounds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setMultipleOf(Number)"})," - Must be multiple of value"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Array Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setItems(Object)"})," - Schema for array items"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setPrefixItems(JsonSchemaArray)"})," - Tuple validation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setMinItems(Integer)"})," / ",(0,i.jsx)(n.code,{children:"setMaxItems(Integer)"})," - Size bounds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setUniqueItems(Boolean)"})," - Require unique elements"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Object Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"addProperties(JsonSchemaProperty...)"})," - Define properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"addRequired(String...)"})," - Required property names"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setMinProperties(Integer)"})," / ",(0,i.jsx)(n.code,{children:"setMaxProperties(Integer)"})," - Property count bounds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setAdditionalProperties(Object)"})," - Allow/disallow extra properties"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setPatternProperties(Map)"})," - Pattern-based property matching"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Composition:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"addAllOf(JsonSchema...)"})," - Must match all schemas"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"addAnyOf(JsonSchema...)"})," - Must match at least one"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"addOneOf(JsonSchema...)"})," - Must match exactly one"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setNot(JsonSchema)"})," - Must not match schema"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Conditional:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setIf(JsonSchema)"})," / ",(0,i.jsx)(n.code,{children:"setThen(JsonSchema)"})," / ",(0,i.jsx)(n.code,{children:"setElse(JsonSchema)"})," - Conditional validation"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Reusability:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"addDef(String, JsonSchema)"})," - Add reusable definition ($defs)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"setRef(Object)"})," - Reference another schema ($ref)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Runtime:"})," ",(0,i.jsx)(n.code,{children:"juneau-marshall"})," (included in ",(0,i.jsx)(n.code,{children:"juneau-bean"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"External:"})," None"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Part of:"})," ",(0,i.jsx)(n.code,{children:"juneau-bean"})," module group"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://json-schema.org/draft/2020-12/json-schema-core.html",children:"JSON Schema 2020-12 Specification"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://json-schema.org/draft/2020-12/json-schema-validation.html",children:"JSON Schema Validation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://json-schema.org/understanding-json-schema/",children:"Understanding JSON Schema"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://www.schemastore.org/json/",children:"JSON Schema Store"})," - Collection of common schemas"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);