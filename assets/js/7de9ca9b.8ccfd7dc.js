"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[7705],{20255:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/11.02.00.MockRestClientOverview","title":"Mock REST Client Overview","description":"The MockRestClient class is used for performing","source":"@site/docs/topics/11.02.00.MockRestClientOverview.md","sourceDirName":"topics","slug":"/topics/11.02.00.MockRestClientOverview","permalink":"/docs/topics/11.02.00.MockRestClientOverview","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs/topics/11.02.00.MockRestClientOverview.md","tags":[],"version":"current","frontMatter":{"title":"Mock REST Client Overview"},"sidebar":"tutorialSidebar","previous":{"title":"11.1. juneau-rest-mock Basics","permalink":"/docs/topics/11.01.00.JuneauRestMockBasics"},"next":{"title":"12.1. juneau-microservice-core Basics","permalink":"/docs/topics/12.01.00.JuneauMicroserviceCoreBasics"}}');var o=t(74848),a=t(28453);const i={title:"Mock REST Client Overview"},c=void 0,r={},l=[];function u(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/mock/MockRestClient.html",children:"MockRestClient"})," class is used for performing\nserverless unit testing of ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html",children:"@Rest"}),"-annotated and ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/http/remote/Remote.html",children:"@Remote"}),"-annotated classes."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/mock/MockRestClient.html",children:"MockRestClient"})," itself extends from ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/client/RestClient.html",children:"RestClient"})," providing it with the rich feature set of that API."]}),"\n",(0,o.jsx)(n.p,{children:"The following shows a simple example of invoking a PUT method on a simple REST interface and asserting the correct\nstatus code and response body:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class MockTest {\n\n    // A simple bean with one field.\n    public static class MyBean {\n        public int foo = 1;\n    }\n\n    // Our REST resource to test.\n    // Simply echos the response.\n    @Rest\n    public static class EchoRest implements BasicRestServlet {\n\n        @RestPut\n        public MyBean echo(@Content MyBean bean) {\n            return bean;\n        }\n    }\n\n    // Our JUnit test.\n    @Test\n    public void testEcho() throws Exception {\n\n        MyBean myBean = new MyBean();\n\n        // Do a round-trip on the bean through the REST interface\n        myBean = MockRestClient\n            .create(EchoRest.class)\n            .json5()\n            .build()\n            .put("/echo", myBean)\n            .run()\n            .assertStatus().is(200)\n            .assertContent().is("{foo:1}")\n            .getContent().as(MyBean.class);\n\n        assertEquals(1, myBean.foo);\n    }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Breaking apart the fluent method call above will help you understand how this works."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testEcho() throws Exception {\n\n    // Instantiate our mock client.\n    MockRestClient client = MockRestClient\n        .create(EchoRest.class)\n        .json5()\n        .build();\n\n    // Create a request.\n    RestRequest req = client.put("/echo", myBean);\n\n    // Execute it (by calling RestCallHandler.service(...) and then returning the response object).\n    RestResponse res = req.run();\n\n    // Run assertion tests on the results.\n    res.assertStatus().is(200);\n    res.assertContent().is("\'foo\'");\n\n    myBean = res.getContent().as(MyBean.class);\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The concept of the design is simple.\nThe ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/mock/MockRestClient.html",children:"MockRestClient"})," class is used to create instances of ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/mock/MockServletRequest.html",children:"MockServletRequest"})," and ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/mock/MockServletResponse.html",children:"MockServletResponse"})," which are passed directly to the call handler on the resource class ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestOpInvoker.html#invoke(RestOpSession)",children:"RestOpInvoker.invoke(RestOpSession)"}),".\nIn effect, you're fully testing your REST API as if it were running in a live servlet container, yet not actually having\nto run in a servlet container.\nAll aspects of the client and server side code are tested, yet no servlet container is required.\nThe actual over-the-wire transmission is the only aspect being bypassed.\nThe ",(0,o.jsx)(n.code,{children:"create(Object)"})," method can take in either ",(0,o.jsx)(n.code,{children:"Class"})," objects or pre-instantiated beans.\nThe latter is particularly useful for testing REST APIs written as Spring beans."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@RunWith(SpringRunner.class)\n@ContextConfiguration(classes = {MyApp.class})\n@SpringBootTest\npublic class MockTest {\n\n    @Autowired\n    EchoRest echoRest;\n\n    MockRestClient client;\n\n    @Before\n    public void setup() {\n        // Instantiate our mock client.\n        client = MockRestClient\n            .create(echoRest)\n            .json5()\n            .build();\n    }\n\n    // Our JUnit test.\n    @Test\n    public void testEcho() throws Exception {\n\n        MyBean myBean = new MyBean();\n\n        // Do a round-trip on the bean through the REST interface\n        myBean = client\n            .put("/echo", myBean)\n            .run()\n            .assertStatus().is(200)\n            .assertContent().is("{foo:1}")\n            .getContent().as(MyBean.class);\n\n        assertEquals(1, myBean.foo);\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/mock/MockRestRequest.html",children:"MockRestRequest"})," object has convenience methods\nprovided to allow you to set properties directly on the underlying ",(0,o.jsx)(n.a,{href:"../apidocs/jakarta/servlet/http/HttpServletRequest.html",children:"HttpServletRequest"})," object.\nThe following example shows how this can be used to directly set roles on the request object to perform security\ntesting."]}),"\n",(0,o.jsx)(n.admonition,{title:"Example",type:"tip",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Rest(roleGuard="ADMIN")\npublic class A {\n    @RestGet\n    public String get() {\n        return "OK";\n    }\n}\n\n@Test\npublic void mytest() throws Exception {\n    MockRestClient client = MockRestClient.build(A.class);\n\n    // Admin user should get 200 but anyone else should get 403-Unauthorized.\n    client.get().roles("ADMIN").run().assertStatus().is(200);\n    client.get().roles("USER").run().assertStatus().is(403);\n}\n'})})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/mock/MockRestClient.html",children:"MockRestClient"})," class has a debug mode that will\ncause your HTTP requests and responses to\nbe sent to the console:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"MockRestClient client = MockRestClient\n    .create(MyRest.class)\n    .debug()\n    .json5()\n    .build();\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/mock/MockRestClient.html",children:"MockRestClient"})," class can also be used for testing of ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/http/remote/Remote.html",children:"Remote"}),"-annotated interfaces against ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html",children:"@Rest"}),"-annotated resources."]}),"\n",(0,o.jsx)(n.admonition,{title:"Example",type:"tip",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Our remote resource to test.\n@Remote\npublic interface MyRemoteInterface {\n\n    @RemoteGet("/echoQuery")\n    public int echoQuery(@Query(name="id") int id);\n}\n\n// Our mocked-up REST interface to test against.\n@Rest\npublic class MyRest {\n\n    @RestGet\n    public int echoQuery(@Query("id") String id) {\n        return id;\n    }\n}\n\n@Test\npublic void testProxy() {\n    MyRemoteInterface mri = MockRestClient\n        .create(MyRest.class)\n        .json()\n        .build()\n        .getRemote(MyRemoteInterface.class);\n\n    assertEquals(123, mri.echoQuery(123));\n}\n'})})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(96540);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);