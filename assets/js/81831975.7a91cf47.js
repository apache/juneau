"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[4175],{28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>o});var t=n(96540);const a={},i=t.createContext(a);function r(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:s},e.children)}},88968:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"topics/02.11.04.PerMediaTypeSwaps","title":"Per-media-type Swaps","description":"Swaps can also be defined per-media-type.","source":"@site/docs/topics/02.11.04.PerMediaTypeSwaps.md","sourceDirName":"topics","slug":"/topics/02.11.04.PerMediaTypeSwaps","permalink":"/docs/topics/02.11.04.PerMediaTypeSwaps","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs/topics/02.11.04.PerMediaTypeSwaps.md","tags":[],"version":"current","frontMatter":{"title":"Per-media-type Swaps"},"sidebar":"tutorialSidebar","previous":{"title":"2.11.3. Auto-detected swaps","permalink":"/docs/topics/02.11.03.AutoSwaps"},"next":{"title":"2.11.5. One-way Swaps","permalink":"/docs/topics/02.11.05.OneWaySwaps"}}');var a=n(74848),i=n(28453);const r={title:"Per-media-type Swaps"},o=void 0,p={},c=[];function l(e){const s={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:"Swaps can also be defined per-media-type."}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.a,{href:"../apidocs/org/apache/juneau/swap/ObjectSwap.html#forMediaTypes()",children:"ObjectSwap.forMediaTypes()"})," method can be\noverridden to provide a set of media types that the swap is invoked on."]}),"\n",(0,a.jsx)(s.p,{children:"It's also possible to define multiple swaps against the same object as long as they're differentiated by media type."}),"\n",(0,a.jsx)(s.p,{children:"When multiple swaps are defined, the best-match media type is used."}),"\n",(0,a.jsx)(s.p,{children:"In the following example, we define 3 swaps against the same object.\nOne for JSON, one for XML, and one for all other types."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:'public class ObjectSwapTest {\n\n    public static class MyPojo {}\n\n    public static class MyJsonSwap extends StringSwap {\n        @Override /* ObjectSwap */\n        public MediaType[] forMediaTypes() {\n            return MediaType.forStrings("*/json");\n        }\n        @Override /* ObjectSwap */\n        public String swap(BeanSession session, MyPojo pojo) throws Exception {\n            return "It\'s JSON!";\n        }\n    }\n\n    public static class MyXmlSwap extends StringSwap {\n        @Override /* ObjectSwap */\n        public MediaType[] forMediaTypes() {\n            return MediaType.forStrings("*/xml");\n        }\n        @Override /* ObjectSwap */\n        public String swap(BeanSession session, MyPojo pojo) throws Exception {\n            return "It\'s XML!";\n        }\n    }\n\n    public static class MyOtherSwap extends StringSwap {\n        @Override /* ObjectSwap */\n        public MediaType[] forMediaTypes() {\n            return MediaType.forStrings("*/*");\n        }\n        @Override /* ObjectSwap */\n        public String swap(BeanSession session, MyPojo pojo) throws Exception {\n            return "It\'s something else!";\n        }\n    }\n\n    @Test\n    public void doTest() throws Exception {\n\n        SerializerSet serializers = SerializersSet.create()\n            .add(JsonSerializer.class, XmlSerializer.class, HtmlSerializer.class)\n            .forEach(x -> x.swaps(MyJsonSwap.class, MyXmlSwap.class, MyOtherSwap.class))\n            .forEachWS(x -> x.ws())\n            .build();\n\n        MyPojo myPojo = new MyPojo();\n\n        String json = seralizers.getWriterSerializer("text/json").serialize(myPojo);\n        assertEquals("\'It\\\\\'s JSON!\'", json);\n\n        String xml = seralizers.getWriterSerializer("text/xml").serialize(myPojo);\n        assertEquals("It\'s XML!", xml);\n\n        String html = seralizers.getWriterSerializer("text/html").serialize(myPojo);\n        assertEquals("It\'s something else!", html);\n    }\n}\n'})}),"\n",(0,a.jsx)(s.p,{children:"When multiple swaps match the same media type, a best-match algorithm is applied to find the correct swap to use."}),"\n",(0,a.jsx)(s.p,{children:"In later sections we describe how annotations can be used to shorten this syntax:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:'@Swap(MyJsonSwap.class)\n@Swap(MyXmlSwap.class)\n@Swap(MyOtherSwap.class)\npublic static class MyPojo {}\n\n@Swap(mediaTypes="*/json")\npublic static class MyJsonSwap extends ObjectSwap {...}\n\n@Swap(mediaTypes="*/xml")\npublic static class MyXmlSwap extends ObjectSwap {...}\n\n@Swap(mediaTypes="*/*")\npublic static class MyOtherSwap extends ObjectSwap {...}\n'})})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);