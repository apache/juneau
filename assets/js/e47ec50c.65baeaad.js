"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[6499],{27190:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"topics/09.02.00.SpringBootOverview","title":"Spring Boot Overview","description":"The Juneau REST servlet APIs are designed to work seemlessly with the Spring Boot framework.","source":"@site/docs-staging/topics/09.02.00.SpringBootOverview.md","sourceDirName":"topics","slug":"/topics/09.02.00.SpringBootOverview","permalink":"/docs/topics/09.02.00.SpringBootOverview","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/09.02.00.SpringBootOverview.md","tags":[],"version":"current","frontMatter":{"title":"Spring Boot Overview"},"sidebar":"tutorialSidebar","previous":{"title":"9.1. juneau-rest-server-springboot Basics","permalink":"/docs/topics/09.01.00.JuneauRestServerSpringbootBasics"},"next":{"title":"10.1. juneau-rest-client Basics","permalink":"/docs/topics/10.01.00.JuneauRestClientBasics"}}');var t=s(74848),o=s(28453);const i={title:"Spring Boot Overview"},a=void 0,l={},c=[{value:"HTML representation",id:"html-representation",level:4},{value:"JSON representation",id:"json-representation",level:4},{value:"HTML representation",id:"html-representation-1",level:4}];function p(e){const n={a:"a",code:"code",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The Juneau REST servlet APIs are designed to work seemlessly with the Spring Boot framework."}),"\n",(0,t.jsx)(n.p,{children:"The only restriction is that your top-level REST resource must extend from one of the following classes:"}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:(0,t.jsx)("java-package",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/springboot.html",children:"org.apache.juneau.rest.springboot"})})}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("java-abstract-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/springboot/BasicSpringRestServlet.html",children:"BasicSpringRestServlet"})})," - Basic servlet"]}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("java-abstract-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/springboot/BasicSpringRestServletGroup.html",children:"BasicSpringRestServletGroup"})})," - Basic servlet group"]})]}),"\n",(0,t.jsxs)(n.p,{children:["These classes are the equivalent to the ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/servlet/BasicRestServlet.html",children:"BasicRestServlet"})," and ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/servlet/BasicRestServletGroup.html",children:"BasicRestServletGroup"})," except they hook into the injection framework of Spring Boot to provide resolution of beans (e.g. child resources, various configuration classes)."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"org.apache.juneau.examples.rest.springboot"})," package and ",(0,t.jsx)(n.code,{children:"org.apache.juneau.examples.rest.springboot.App"}),"\napplication are a basic Spring Boot application that shows off simple Juneau examples including injection beans."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@SpringBootApplication\n@Controller\npublic class App {\n\n    //Entry point method.\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(App.class).run(args);\n    }\n\n    // Our root REST bean.\n    // Note that this must extend from [SpringRestServlet](../apidocs/org/apache/juneau/rest/springboot/SpringRestServlet.html) to allow use of injection.\n    // All REST objects are attached to this bean using the [Rest.children()](../apidocs/org/apache/juneau/rest/annotation/Rest.html#children()) annotation.\n    @Bean\n    public RootResources getRootResources() {\n        return new RootResources();\n    }\n\n    // Registers our REST bean at the URI root.\n    @Bean\n    public ServletRegistrationBean getRootServlet(RootResources rootResources) {\n        return new ServletRegistrationBean(rootResources, "/*");\n    }\n\n    // Injected child resource.\n    @Bean\n    public HelloWorldResource getHelloWorldResource() {\n        return new HelloWorldResource();\n    }\n\n    // Injected child bean used in injected child resource.\n    @Bean\n    public HelloWorldMessageProvider getHelloWorldMessageProvider() {\n        return new HelloWorldMessageProvider("Hello Spring injection user!");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Our root resource servlet serves as a router page.\nIt is defined as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Rest(\n    title="Root resources",\n    description="Example of a router resource page.",\n    children={\n        HelloWorldResource.class,\n        DtoExamples.class,\n        UtilityBeansResource.class,\n        HtmlBeansResource.class,\n        ConfigResource.class,\n        ShutdownResource.class\n    }\n)\npublic class RootResources extends BasicSpringRestServletGroup {\n    private static final long serialVersionUID = 1L;\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"html-representation",children:"HTML representation"}),"\n",(0,t.jsx)(n.h4,{id:"json-representation",children:"JSON representation"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"org.apache.juneau.examples.rest.springboot.HelloWorldResource"})," class shows an example of a child resource defined\nas an injected bean."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Rest(\n    title="Hello World",\n    description="An example of the simplest-possible resource",\n    path="/helloWorld"\n)\n@HtmlDocConfig(\n    aside={\n        "",\n        "\tThis page shows a resource that simply response with a \'Hello world!\' message",\n        ""\n    }\n)\n@Component\npublic class HelloWorldResource extends BasicSpringRestServlet {\n    \n    @RestGet\n    public String sayHello() {\n        return "Hello world!";\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"The POJO serialized is a simple String."}),"\n",(0,t.jsx)(n.p,{children:"Note that the message rendered is coming from our injected message provider:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Autowired \nprivate HelloWorldMessageProvider messageProvider;\n\n@RestGet(path="/*", summary="Responds with injected message") \npublic String sayHello() { \n    return messageProvider.get(); \n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"html-representation-1",children:"HTML representation"})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(96540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);