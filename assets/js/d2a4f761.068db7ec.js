"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[4760],{28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>p});var t=a(96540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},64964:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"topics/02.11.06.SwapAnnotation","title":"@Swap Annotation","description":"@Swap can be used to associate a swap class using an annotation.","source":"@site/docs/topics/02.11.06.SwapAnnotation.md","sourceDirName":"topics","slug":"/topics/SwapAnnotation","permalink":"/docs/topics/SwapAnnotation","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/02.11.06.SwapAnnotation.md","tags":[],"version":"current","frontMatter":{"title":"@Swap Annotation","slug":"SwapAnnotation"},"sidebar":"mainSidebar","previous":{"title":"2.11.5. One-way Swaps","permalink":"/docs/topics/OneWaySwaps"},"next":{"title":"2.11.7. Templated Swaps","permalink":"/docs/topics/TemplatedSwaps"}}');var o=a(74848),s=a(28453);const i={title:"@Swap Annotation",slug:"SwapAnnotation"},p=void 0,c={},r=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Swap.html",target:"_blank",children:"@Swap"})," can be used to associate a swap class using an annotation.\nThis is often cleaner than using the builder ",(0,o.jsx)(n.code,{children:"swaps()"})," method since you can keep your swap class near your POJO class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Swap(MyObjectSwap.class)\npublic class MyPojo {\n    ...\n}\n\n// Sample swap for converting MyPojo classes to a simple string.\npublic class MyObjectSwap extends ObjectSwap {\n    @Override /* ObjectSwap */\n    public String swap(BeanSession session, MyPojo pojo) {\n        return pojo.toSomeSerializableForm();\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Multiple swaps can be associated with a class using multiple ",(0,o.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Swap.html",target:"_blank",children:"@Swap"})," annotations:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Swap(MyJsonSwap.class)\n@Swap(MyXmlSwap.class)\n@Swap(MyOtherSwap.class)\npublic class MyPojo {}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Readers"})," get serialized directly to the output of a serializer.\nTherefore it's possible to implement a swap that provides fully-customized output."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'public class MyJsonSwap extends ObjectSwap {\n\n    public MediaType[] forMediaTypes() {\n        return MediaType.forStrings("&#42;/json");\n    }\n\n    public Reader swap(BeanSession session, MyPojo pojo) throws Exception {\n        return new StringReader("{message:\'Custom JSON!\'}");\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Swap.html",target:"_blank",children:"@Swap"})," annotation can also be used on getters and setters as well to apply a swap to individual property values:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public class MyBean {\n    private MyPojo myPojo;\n\n    // Swap applied to bean property.\n    @Beanp(swap=MyPojoSwap.class)\n    public MyPojo getMyPojo() {\n        return myPojo;\n    }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"When applied to bean properties, the swap annotation need only be applied to either the getter, setter, or field.\nThe swap annotation can also be applied to the private field of a bean property, like so:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"public class MyBean {\n\n    @Beanp(swap=MyPojoSwap.class)\n    private MyPojo myPojo;\n\n    public MyPojo getMyPojo() {\n        return myPojo;\n    }\n\n    public MyBean setMyPojo(MyPojo myPojo) {\n        this.myPojo = myPojo;\n        return this;\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);