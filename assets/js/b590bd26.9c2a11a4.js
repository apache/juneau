"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[3230],{28453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>r});var t=n(96540);const s={},i=t.createContext(s);function o(e){const a=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:a},e.children)}},51488:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"topics/12.05.00.Manifest","title":"Manifest","description":"The Microservice.Builder.manifest(Object)","source":"@site/docs/topics/12.05.00.Manifest.md","sourceDirName":"topics","slug":"/topics/Manifest","permalink":"/docs/topics/Manifest","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/12.05.00.Manifest.md","tags":[],"version":"current","frontMatter":{"title":"Manifest","slug":"Manifest"},"sidebar":"mainSidebar","previous":{"title":"12.4. Args","permalink":"/docs/topics/Args"},"next":{"title":"12.6. Config","permalink":"/docs/topics/MicroserviceCoreConfig"}}');var s=n(74848),i=n(28453);const o={title:"Manifest",slug:"Manifest"},r=void 0,c={},l=[];function h(e){const a={admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.p,{children:["The ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html#manifest(java.lang.Object)",target:"_blank",children:"Microservice.Builder.manifest(Object)"}),"\nmethod can be used to specify the contents or location of of the main manifest file of the executable jar.\nIf you do not specify the location/contents of the manifest file, the microservice will attempt to resolve it through\nthe following methods: - Looking on the file system for a file at ",(0,s.jsx)(a.code,{children:"META-INF/MANIFEST.MF"}),".\nThis is primarily to allow for running microservices from within eclipse workspaces where the manifest file is located\nin the project root."]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["Using the class loader for this class to find the file at the URL ",(0,s.jsx)(a.code,{children:"META-INF/MANIFEST.MF"}),"."]}),"\n"]}),"\n",(0,s.jsx)(a.p,{children:"If you do manually specify the manifest file, you can pass in any of the following types:"}),"\n",(0,s.jsxs)("tree",{children:[(0,s.jsx)("node-0",{children:"Manifest File Types"}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/utils/ManifestFile.html",target:"_blank",children:"ManifestFile"})})," - A pre-parsed manifest file"]}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/jar/Manifest.html",target:"_blank",children:"Manifest"})})," - A pre-parsed manifest file"]}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/Reader.html",target:"_blank",children:"Reader"})})," - Containing the raw contents of the manifest"]}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/InputStream.html",target:"_blank",children:"InputStream"})})," - Containing the raw contents of the manifest"]}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/File.html",target:"_blank",children:"File"})})," - File containing the raw contents of the manifest"]}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html",target:"_blank",children:"String"})})," - Path to file containing the raw contents of the manifest"]}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Class.html",target:"_blank",children:"Class"})})," - Finds and loads the manifest file of the jar file that the specified class is contained within"]})]}),"\n",(0,s.jsxs)(a.p,{children:["The manifest file can be retrieved using the the ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.html#getManifest()",target:"_blank",children:"Microservice.getManifest()"})," method which provides an API for accessing manifest file entries.\nThis method returns an instance of ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/utils/ManifestFile.html",target:"_blank",children:"ManifestFile"})," which extends\nfrom ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/collections/JsonMap.html",target:"_blank",children:"JsonMap"})," allowing you to retrieve entries as any data\ntypes supported by that class."]}),"\n",(0,s.jsx)(a.admonition,{title:"Example",type:"tip",children:(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'ManifestFile manifestFile = Microservice.getInstance().getManifest();\n\nString mainClass = manifestFile.getString("Main-Class");\nint myInt = manifestFile.getInt("My-Int", 123);\nboolean myBoolean = manifestFile.getBoolean("My-Boolean");\n'})})}),"\n",(0,s.jsxs)(a.p,{children:["The manifest is also used for the ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/svl/vars/ManifestFileVar.html",target:"_blank",children:"$MF"})," SVL variable."]}),"\n",(0,s.jsxs)(a.admonition,{title:"Examples",type:"tip",children:[(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'// $MF used in variable resolver.\nVarResolver var = Microservice.getInstance().getVarResolver();\nSystem.out.println(vr.resolve("The main class is $MF{Main-Class}"));\n'})}),(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'// $MF used in annotation.\n@Rest(\n    title="$MF{Application-Title}",\n    ...\n)\n'})})]})]})}function d(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);