"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[162],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},77544:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"topics/02.04.10.BypassSerialization","title":"Bypass Serialization using `Readers` and `InputStreams`","description":"Juneau serializers treat instances of Readers and InputStreams special by simply serializing their contents directly","source":"@site/docs-staging/topics/02.04.10.BypassSerialization.md","sourceDirName":"topics","slug":"/topics/02.04.10.BypassSerialization","permalink":"/docs/topics/02.04.10.BypassSerialization","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.04.10.BypassSerialization.md","tags":[],"version":"current","frontMatter":{"title":"Bypass Serialization using `Readers` and `InputStreams`"},"sidebar":"mainSidebar","previous":{"title":"2.4.9. POJO Builders","permalink":"/docs/topics/02.04.09.PojoBuilders"},"next":{"title":"2.5. HTTP Part Serializers/Parsers","permalink":"/docs/topics/02.05.00.HttpPartSerializersParsers"}}');var a=n(74848),i=n(28453);const r={title:"Bypass Serialization using `Readers` and `InputStreams`"},o=void 0,c={},d=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["Juneau serializers treat instances of ",(0,a.jsx)(t.code,{children:"Readers"})," and ",(0,a.jsx)(t.code,{children:"InputStreams"})," special by simply serializing their contents directly\nto the output stream or writer.\nThis allows you to embed fully customized serializer output."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"public class MyBean {\n    // A bean property that produces raw JSON.\n    public Reader f1 = new StringReader(\"{'foo':'bar'}\");\n}\n\n// Produces \"{f1:{'foo':'bar'}}\"\nString json = Json5.of(new MyBean());\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Note that if you're serializing ",(0,a.jsx)(t.code,{children:"Readers"})," and ",(0,a.jsx)(t.code,{children:"InputStreams"}),", it's up to you to make sure you're producing valid output\n(in this case JSON)."]}),"\n",(0,a.jsxs)(t.p,{children:["A more typical scenario where this is useful is by using swaps to convert POJOs to ",(0,a.jsx)(t.code,{children:"Readers"})," whose contents are determined\nvia the ",(0,a.jsx)(t.a,{href:"../apidocs/org/apache/juneau/BeanSession.html#getMediaType()",children:"BeanSession.getMediaType()"})," method."]}),"\n",(0,a.jsx)(t.p,{children:"In the following example, we're customizing the JSON output for a particular bean type but leaving all other renditions\nas-is:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Swap(MyBeanSwapSometimes.class)\npublic class MyBean {...}\n\n// A swap that produces specialized output for JSON but default serialization for\n// all other media types.\npublic class MyBeanSwapSometimes extends ObjectSwap {\n    public Object swap(BeanSession session, MyPojo object) throws Exception {\n        MediaType mediaType = session.getMediaType();\n        if (mediaType.hasSubType("json"))\n            return new StringReader("{myPojo:\'foobar\'}");  // Custom JSON output\n        return object;  // Otherwise serialize it as a normal bean\n    }\n}\n'})}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsxs)(t.p,{children:["Due to the nature of the RDF serializers, ",(0,a.jsx)(t.code,{children:"Readers"})," and ",(0,a.jsx)(t.code,{children:"InputStreams"})," are serialized as literals,\nnot as RDF text.\nThis is due to the fact that the RDF serializers use a DOM for serialization so we don't have\naccess to the underlying stream."]})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);