"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[2933],{28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var s=a(96540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},93747:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/02.08.00.JsonMap","title":"JsonMap and JsonList","description":"The JsonMap and JsonList classes are generic Java representations of JSON objects and arrays.","source":"@site/docs-staging/topics/02.08.00.JsonMap.md","sourceDirName":"topics","slug":"/topics/02.08.00.JsonMap","permalink":"/docs/topics/02.08.00.JsonMap","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.08.00.JsonMap.md","tags":[],"version":"current","frontMatter":{"title":"JsonMap and JsonList"},"sidebar":"tutorialSidebar","previous":{"title":"2.7. Context Annotations","permalink":"/docs/topics/02.07.00.ContextAnnotations"},"next":{"title":"2.9. Complex Data Types","permalink":"/docs/topics/02.09.00.ComplexDataTypes"}}');var o=a(74848),t=a(28453);const i={title:"JsonMap and JsonList"},r=void 0,c={},l=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html",children:"JsonMap"})," and ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html",children:"JsonList"}),' classes are generic Java representations of JSON objects and arrays.\nThese classes can be used to create "unstructured" models for serialization (as opposed to "structured" models\nconsisting of beans).']}),"\n",(0,o.jsx)(n.p,{children:"If you want to quickly generate JSON/XML/HTML from generic maps/collections, or parse JSON/XML/HTML into generic\nmaps/collections, these classes work well."}),"\n",(0,o.jsx)(n.p,{children:"These classes extend directly from the following JCF classes:"}),"\n",(0,o.jsxs)("tree",{children:[(0,o.jsx)("node-0",{children:(0,o.jsx)("java-class",{children:(0,o.jsx)(n.a,{href:"../apidocs/java/util/LinkedHashMap.html",children:"java.util.LinkedHashMap"})})}),(0,o.jsx)("node-1",{children:(0,o.jsx)("java-class",{children:(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html",children:"org.apache.juneau.collections.JsonMap"})})}),(0,o.jsx)("node-0",{children:(0,o.jsx)("java-class",{children:(0,o.jsx)(n.a,{href:"../apidocs/java/util/LinkedList.html",children:"java.util.LinkedList"})})}),(0,o.jsx)("node-1",{children:(0,o.jsx)("java-class",{children:(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html",children:"org.apache.juneau.collections.JsonList"})})})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html",children:"JsonMap"})," and ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html",children:"JsonList"})," classes are very similar to the ",(0,o.jsx)(n.code,{children:"JSONObject"})," and ",(0,o.jsx)(n.code,{children:"JSONArray"})," classes found in other libraries.\nHowever, the names were chosen because the concepts of ",(0,o.jsx)(n.code,{children:"Maps"})," and ",(0,o.jsx)(n.code,{children:"Lists"})," are already familiar to Java programmers, and\nthese classes can be used with any of the serializers or parsers."]}),"\n",(0,o.jsx)(n.p,{children:"These object can be serialized in one of three ways:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Using the provided ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html#writeTo(java.io.Writer)",children:"JsonMap.writeTo(java.io.Writer)"})," or ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html#writeTo(java.io.Writer)",children:"JsonList.writeTo(java.io.Writer)"})," methods."]}),"\n",(0,o.jsxs)(n.li,{children:["Passing them to one of the ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/serializer/Serializer.html",children:"Serializer"})," serialize methods."]}),"\n",(0,o.jsxs)(n.li,{children:["Simply calling the ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html#asJson()",children:"JsonMap.asJson()"}),"/",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html#toString()",children:"JsonMap.toString()"})," or ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html#asString()",children:"JsonList.asString()"}),"/",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html#toString()",children:"JsonList.toString()"})," methods which will serialize it as JSON5."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Any valid JSON can be parsed into an unstructured model consisting of generic ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html",children:"JsonMap"})," and ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html",children:"JsonList"})," objects.\n(Any valid XML can also be parsed into an unstructured model)"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Parse an arbitrary JSON document into an unstructered data model\n// consisting of JsonMaps, JsonLists, and java primitive objects.\nString json = "{a:{name:\'John Smith\',age:21},b:{name:\'Joe Smith\',age:42}}";\nJsonMap map = Json.to(json, JsonMap.class);\n\n// Use JsonMap API to extract data from the unstructured model.\nint johnSmithAge = map.getMap("a").getInt("age");\n\n// Convert it back into JSON.\njson = Json.of(map);\n\n// Or convert it to XML.\nString xml = Xml.of(map);\n\n// Or just use toString() or asJson().\njson = map.toString();\njson = map.asJson();\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html",children:"JsonMap"})," and ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html",children:"JsonList"})," classes have many convenience features:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'// Convert the map to a bean.\nMyBean myBean = map.cast(MyBean.class);\n\n// Find entries by multiple keys.\nMyBean myBean = map.find(MyBean.class, "key1", "key2");\n\n// Fluent-style appenders.\nmap.append("key1", "val1").append("key2", "val2");\n\n// REST-like functions for manipulating nodes in the data structure using URL-like notation.\nmap.getAt("foo/bar/myBean", MyBean.class);\nmap.putAt("foo/bar/myBean", MyBean.class);\nmap.postAt("foo/bar/myListOfBeans", MyBean.class);\nmap.deleteAt("foo/bar/myBean");\n\n// Copy with inclusion or exclusion.\nJsonMap map2 = map.include("key1", "key2", "key3");\nJsonMap map3 = map.exclude("key1", "key2", "key3");\n\n// Serialize using another serializer.\nString xml = map.serializeTo(XmlSerializer.DEFAULT);\n\n// Nested maps.\nmap.inner(anotherMap);\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["As a general rule, if you do not specify a target type during parsing, or if the target type cannot be determined\nthrough reflection, the parsers automatically generate ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html",children:"JsonMap"})," and ",(0,o.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html",children:"JsonList"})," objects."]})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);