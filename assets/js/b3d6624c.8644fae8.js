"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[4651],{3823:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"topics/01.02.00.Marshalling","title":"Marshalling","description":"The juneau-marshall library includes easy-to-use and highly customizable serializers and parsers based around a common","source":"@site/docs-staging/topics/01.02.00.Marshalling.md","sourceDirName":"topics","slug":"/topics/01.02.00.Marshalling","permalink":"/docs/topics/01.02.00.Marshalling","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs/docs-staging/topics/01.02.00.Marshalling.md","tags":[],"version":"current","frontMatter":{"title":"Marshalling"},"sidebar":"mainSidebar","previous":{"title":"1.1. Juneau Ecosystem Overview","permalink":"/docs/topics/01.01.00.JuneauEcosystemOverview"},"next":{"title":"1.3. End-to-End REST","permalink":"/docs/topics/01.03.00.EndToEndRest"}}');var i=s(74848),r=s(28453);const t={title:"Marshalling"},l=void 0,o={},c=[{value:"Serializer/Parser Builders",id:"serializerparser-builders",level:4},{value:"Bean Annotations",id:"bean-annotations",level:4},{value:"Configuration Annotations",id:"configuration-annotations",level:4},{value:"JSON 5 Marshalling",id:"json-5-marshalling",level:4},{value:"UON Marshalling",id:"uon-marshalling",level:4},{value:"OpenAPI Marshalling",id:"openapi-marshalling",level:4},{value:"JsonMap/JsonList",id:"jsonmapjsonlist",level:4},{value:"Serializer and Parser Sets",id:"serializer-and-parser-sets",level:4},{value:"SVL Variables",id:"svl-variables",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"juneau-marshall"})," library includes easy-to-use and highly customizable serializers and parsers based around a common\nAPI.\nIt allows you to marshall Java POJOs directly to and from a wide variety of language types without the need for\nintermediate Document Object Models making them extremely efficient."]}),"\n",(0,i.jsx)(n.p,{children:"Supported languages include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JSON"}),"\n",(0,i.jsx)(n.li,{children:"XML"}),"\n",(0,i.jsx)(n.li,{children:"HTML"}),"\n",(0,i.jsx)(n.li,{children:"UON"}),"\n",(0,i.jsx)(n.li,{children:"URL-Encoding"}),"\n",(0,i.jsx)(n.li,{children:"MessagePack"}),"\n",(0,i.jsx)(n.li,{children:"OpenAPI"}),"\n",(0,i.jsx)(n.li,{children:"SOAP/XML"}),"\n",(0,i.jsx)(n.li,{children:"CSV"}),"\n",(0,i.jsx)(n.li,{children:"YAML (coming soon)"}),"\n",(0,i.jsx)(n.li,{children:"RDF/XML"}),"\n",(0,i.jsx)(n.li,{children:"RDF/XML-Abbrev"}),"\n",(0,i.jsx)(n.li,{children:"N-Triple"}),"\n",(0,i.jsx)(n.li,{children:"Turtle"}),"\n",(0,i.jsx)(n.li,{children:"N3"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The marshalling support can be thought of as similar to Jackson except for support of a wide variety of languages.\nAdditionally, JSON marshalling is about 20% faster than Jackson yet supports the same usecases."})}),"\n",(0,i.jsx)(n.p,{children:"The default serializers can often be used to serialize POJOs in a single line of code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// A simple bean\npublic class Person {\n    public String name = "John Smith";\n    public int age = 21;\n}\n\n// Produces:\n// "{"name":"John Smith","age":21}"\nString json = Json.of(new Person());\n'})}),"\n",(0,i.jsx)(n.p,{children:"Parsing back into POJOs is equally simple for any of the supported languages."}),"\n",(0,i.jsx)(n.p,{children:"Language fragments are also supported."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Parse a JSON object as a bean.\nString json = "{\\"name\\":\\"John Smith\\","\\age\\":21}";\nPerson person = Json.to(json, Person.class);\n'})}),"\n",(0,i.jsx)(n.p,{children:"Marshalling support is provided for a wide variety of POJO types including:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Primitives and primitive objects"}),"\n",(0,i.jsx)(n.li,{children:"Beans"}),"\n",(0,i.jsx)(n.li,{children:"Java Collections Framework objects (e.g. Collections, Maps)"}),"\n",(0,i.jsx)(n.li,{children:"Arrays"}),"\n",(0,i.jsx)(n.li,{children:"POJOs"}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: Pojo Categories"})," for an exhaustive list of categories supported out-of-the-box."]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"serializerparser-builders",children:"Serializer/Parser Builders"}),"\n",(0,i.jsx)(n.p,{children:"Marshallers like the one shown above are pairings of serializers and parsers."}),"\n",(0,i.jsx)(n.p,{children:"Serializers and parsers are builder-based using fluent methods allowing you to quickly create, clone, and modify them in\nsingle lines of code."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Create a serializer from scratch programmatically using a builder.\nJsonSerializer serializer = JsonSerializer\n    .create()\n    .simple()                           // Simple mode\n    .sq()                               // Use single quotes\n    .timeZone(TimeZone.GMT)             // For timezone-specific serialization\n    .locale(Locale.JAPAN)               // For locale-specific serialization\n    .sortCollections()\n    .sortProperties()\n    .keepNullProperties()\n    .trimStrings()\n    .beanMethodVisibility(PROTECTED)    // Control which fields/methods are serialized\n    .beanDictionary(                    // Adds type variables for resolution during parsing\n        MyBeanA.class,\n        MyBeanB.class\n    )\n    .debug()                            // Debug mode\n    .build();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Many POJOs such as primitives, beans, collections, arrays, and classes with various known constructors and methods are\nserializable out-of-the-box."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: Swaps"})," allow you to replace non-serializable objects with serializable equivalents.\nThe ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/swaps.html",children:"org.apache.juneau.swaps"})," package contains a variety of predefined swaps."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Create a serializer from scratch programmatically using a builder.\nJsonSerializer serializer = JsonSerializer\n    .create()\n    .swaps(                             // Swap unserializable classes with surrogate POJOs\n        IteratorSwap.class,              // Iterators swapped with lists\n        ByteArrayBase64Swap.class,       // byte[] swapped with base-64 encoded strings\n        CalendarSwap.ISO8601DT.class     // Calendars swapped with ISO8601-compliant strings\n    )\n    .build();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Any POJO that doesn't fit into the category of a bean/collection/array/primitive and doesn't have a swap associated with\nit is converted to simple strings."}),"\n",(0,i.jsx)(n.p,{children:"By default, various instance and static methods and constructors on POJO classes are automatically detected and\nsupported for marshalling a POJO to and from a string."}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: "})," for more information."]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"bean-annotations",children:"Bean Annotations"}),"\n",(0,i.jsx)(n.p,{children:"Beans and POJO classes, methods, fields, and constructors can also be annotated with a variety of annotations to\ncustomize how they are marshalled:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Sort bean properties by name.\n// Exclude city/state from marshalling.\n@Bean(sort=true, excludeProperties="city,state")\npublic class Address { ... }\n\n// Specify an implementation class for an interface.\n@Marshalled(implClass=AutomobileImpl.class)\npublic interface Automobile { ... }\n'})}),"\n",(0,i.jsx)(n.p,{children:"As a general rule, any capabilities provided by bean annotations can be programmatically specified via the builder APIs.\nThis allows the marshallers to be used equivalently on either your own code that you have access to, or external code where you only have access to binaries."}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: Java Beans Support"})," for more information."]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"configuration-annotations",children:"Configuration Annotations"}),"\n",(0,i.jsx)(n.p,{children:"Serializers and parsers can also be configured using annotations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@BeanConfig(sortProperties="true")\n@SerializerConfig(quoteChar="\'")\n@RdfConfig(rdfxml_tab="5", addRootProperty="true")\npublic class MyAnnotatedClass {...}\n\n// Create a serializer configured using annotations.\nJsonSerializer serializer = JsonSerializer\n    .create()\n    .applyAnnotations(MyAnnotatedClass.class)\n    .build();\n'})}),"\n",(0,i.jsx)(n.p,{children:"Config annotations are extensively used in the REST Servlet APIs to configure how POJOs are marshalled through REST\ninterfaces."}),"\n",(0,i.jsx)(n.p,{children:"Config variables also support embedded variables for resolving settings at runtime."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Sort properties depending on value of system property "sortProperties".\n@BeanConfig(sortProperties="$S{sortProperties,false}")\n'})}),"\n",(0,i.jsx)(n.p,{children:'Default values for config settings can be overridden via system properties or environment variables.\nFor example, the system property "BeanContext.sortProperties" or environment variable "BEANCONTEXT_SORTPROPERTIES" can\nbe used to set the default value for the sort properties setting.'}),"\n",(0,i.jsx)(n.p,{children:"Bean annotations can also be programmatically attached to POJOs using config annototations like so:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Bean(onClass=Address.class, sort=true, excludeProperties="city,state")\npublic class MyAnnotatedClass {...}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: Context Annotations"})," for more information."]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"json-5-marshalling",children:"JSON 5 Marshalling"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/json/Json5Serializer.html",children:"Json5Serializer"})," class can be used to serialized POJOs\ninto JSON 5 notation.\nJSON 5 is similar to JSON except for the following:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JSON attributes are only quoted when necessary."}),"\n",(0,i.jsx)(n.li,{children:"Uses single-quotes for quoting."}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{title:"Example",type:"tip",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Some free-form JSON.\nMap map = JsonMap.of(\n    "foo", "x1",\n    "_bar", "x2",\n    " baz ", "x3",\n    "123", "x4",\n    "return", "x5",\n    "", "x6"\n);\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// Serialized to standard JSON\n{\n    "foo": "x1",\n    "_bar": "x2",\n    " baz ": "x3",\n    "123": "x4",\n    "return": "x5",\n    "": "x6"\n}\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"{\n    foo: 'x1',\n    _bar: 'x2',\n    ' baz ': 'x3',  // Quoted due to embedded spaces.\n    '123': 'x4',    // Quoted to prevent confusion with number.\n    'return': 'x5', // Quoted because it's a keyword.\n    '': 'x6'        // Quoted because it's an empty string.\n}\n"})})]}),"\n",(0,i.jsx)(n.p,{children:"JSON 5 is still valid Javascript.\nThe advantage to JSON5 is you can represent it in a Java String in minimal form with minimal escaping.\nThis is particularly useful in cases such as unit testing where you can easily validate POJOs by simplifying them to\nJSON 5 and do a simple string comparison."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"WriterSerializer serializer = Json5Serializer.DEFAULT;\nassertString(serializer.toString(myPojo)).is(\"{foo:'bar',baz:123}\");\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: JSON 5"})," for more information."]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"uon-marshalling",children:"UON Marshalling"}),"\n",(0,i.jsx)(n.p,{children:"The Marshalling API also supports UON (URL-Encoded Object Notation).\nIt allows JSON-like data structures (OBJECT, ARRAY, NUMBER, BOOLEAN, STRING, NULL) in HTTP constructs (query parameters,\nform parameters, headers, URL parts) without violating RFC2396.\nThis allows POJOs to be converted directly into these HTTP constructs which is not possible in other languages such as\nJSON."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"(\n    id=1,\n    name='John+Smith',\n    uri=http://sample/addressBook/person/1,\n    addressBookUri=http://sample/addressBook,\n    birthDate=1946-08-12T00:00:00Z,\n    addresses=@(\n        (\n            uri=http://sample/addressBook/address/1,\n            personUri=http://sample/addressBook/person/1,\n            id=1,\n            street='100+Main+Street',\n            city=Anywhereville,\n            state=NY,\n            zip=12345,\n            isCurrent=true\n        )\n    )\n)\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: UON Details"})," for more information."]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"openapi-marshalling",children:"OpenAPI Marshalling"}),"\n",(0,i.jsx)(n.p,{children:"The Marshalling API also supports schema-based OpenAPI serialization.\nIt allows HTTP parts to be marshalled to-and-from POJOs based on OpenAPI schema definitions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import static org.apache.juneau.httpart.HttpPartSchema.*;\n\n// Schema - Pipe-delimited list of comma-delimited longs.\nHttpPartSchema schema = tArrayPipes().items(\n    tArrayCsv().items(\n        tInt64()\n    )\n).build();\n\n// Our value to serialize\nObject value = new long[][]{{1,2,3},{4,5,6},{7,8,9}};\n\n// Produces "1,2,3|4,5,6|7,8,9"\nString output = OpenApi.of(schema, value);\n'})}),"\n",(0,i.jsx)(n.p,{children:"Schema-based serialization and parsing is used heavily in both the server and client REST APIs with built-in schema\nvalidations support in various HTTP part annotations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// REST server method with HTTP parts using schema validation.\n@RestGet\npublic void doGet(\n    @Query(name="myParam", schema=@Schema(min=1, max=32)) int myParam,\n    @Header("MyHeader", schema=@Schema(pattern="foo.*")) String p2\n) {...}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: OpenAPI Details"})," for more information."]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"jsonmapjsonlist",children:"JsonMap/JsonList"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html",children:"JsonMap"})," and ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonList.html",children:"JsonList"})," collections classes allow you to programmatically build generic JSON data structures.\nThey are similar in concept to ",(0,i.jsx)(n.code,{children:"JSONObject"})," and ",(0,i.jsx)(n.code,{children:"JSONArray"})," that you find in other JSON marshalling APIs but can be used\nto generate DOMs in any of the supported languages."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Create JSON strings from scratch using fluent-style code.\nString myMap = JsonMap.create().append("foo","bar").asJson();\nString myList = JsonList.of("foo", 123, null, jsonObject).asJson();\n\n// Parse directly from JSON into generic DOMs.\nMap myMap = JsonMap.ofJson("{foo:\'bar\'}");\nList myList = JsonList.ofJson("[\'foo\',123,null]");\n'})}),"\n",(0,i.jsx)(n.p,{children:"These classes provide lots of convenience methods including:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Methods for direct marshalling to/from any of the other supported languages."}),"\n",(0,i.jsx)(n.li,{children:"Methods for quick conversions to other data types including collections, beans, arrays, etc..."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: JsonMap and JsonList"})," for more information."]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"serializer-and-parser-sets",children:"Serializer and Parser Sets"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/serializer/SerializerSet.html",children:"SerializerSet"})," and ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/parser/ParserSet.html",children:"ParserSet"})," classes allow serializers and parsers to be retrieved by W3C-compliant HTTP Accept and Content-Type values:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Construct a new serializer group with configuration parameters that get applied\n// to all serializers.\nSerializerSet serializerSet = SerializerSet\n    .create()\n    .add(JsonSerializer.class, UrlEncodingSerializer.class);\n    .forEach(x -> x.swaps(CalendarSwap.ISO8601DT.class))\n    .forEachWS(x -> x.useWhitespace())\n    .build();\n\n// Find the appropriate serializer by Accept type and serialize our POJO to the specified writer.\n// Fully RFC2616 compliant.\nserializerSet\n    .getSerializer("text/invalid, text/json;q=0.8, text/*;q:0.6, *\\/*;q=0.0")\n    .serialize(person, myWriter);\n\n// Construct a new parser group with configuration parameters that get applied to all parsers.\nParserSet parserSet = ParserSet\n    .create()\n    .add(JsonParser.class, UrlEncodingParser.class);\n    .forEach(x -> x.swaps(CalendarSwap.ISO8601DT.class))\n    .build();\n\nPerson person = parserSet\n    .getParser("text/json")\n    .parse(myReader, Person.class);\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: SerializerSets and ParserSets"})," for more information."]}),"\n"]})}),"\n",(0,i.jsx)(n.h4,{id:"svl-variables",children:"SVL Variables"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/svl.html",children:"org.apache.juneau.svl"}),' package defines an API for a language called "Simple Variable\nLanguage".\nIn a nutshell, Simple Variable Language (or SVL) is text that contains variables of the form ',(0,i.jsx)(n.code,{children:"$varName{varKey}"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Variables can be recursively nested within the varKey (e.g. ",(0,i.jsx)(n.code,{children:"$FOO{$BAR{xxx},$BAZ{xxx}}"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Variables can also return values that themselves contain more variables."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Use the default variable resolver to resolve a string that\n// contains $S (system property) variables\nString myProperty = VarResolver.DEFAULT.resolve("The Java home directory is $S{java.home}");\n'})}),"\n",(0,i.jsx)(n.p,{children:"The SVL variables are used widely throughout various annotations defined in Juneau allowing many features to be\nconfigured via external sources such as configuration files or environment variables/system properties.\nThe SVL APIs are extensible allowing for the addition of new types of variables."}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: Simple Variable Language"})," for more information."]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var a=s(96540);const i={},r=a.createContext(i);function t(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);