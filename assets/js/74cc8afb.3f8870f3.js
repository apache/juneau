"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[9377],{14936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"topics/16.05.00.JuneauPetstoreServer","title":"juneau-petstore-server","description":"The juneau-petstore-server module contains all of the guts of the application.","source":"@site/docs-staging/topics/16.05.00.JuneauPetstoreServer.md","sourceDirName":"topics","slug":"/topics/16.05.00.JuneauPetstoreServer","permalink":"/docs/topics/16.05.00.JuneauPetstoreServer","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/16.05.00.JuneauPetstoreServer.md","tags":[],"version":"current","frontMatter":{"title":"juneau-petstore-server"},"sidebar":"mainSidebar","previous":{"title":"16.4. juneau-petstore-client","permalink":"/docs/topics/16.04.00.JuneauPetstoreClient"},"next":{"title":"17.1. Security Basics","permalink":"/docs/topics/17.01.00.SecurityBasics"}}');var o=t(74848),s=t(28453);const a={title:"juneau-petstore-server"},i=void 0,c={},l=[{value:"App.java",id:"appjava",level:4},{value:"RootResources.java",id:"rootresourcesjava",level:4},{value:"PetStoreResource.java",id:"petstoreresourcejava",level:4},{value:"PetStoreResource.java",id:"petstoreresourcejava-1",level:4},{value:"Pet.java",id:"petjava",level:4}];function p(e){const n={code:"code",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"juneau-petstore-server"})," module contains all of the guts of the application.\nIt's a standard Spring Boot application with Juneau integration support."]}),"\n",(0,o.jsx)(n.p,{children:"For brevity, the app and configuration classes are combined into the following:"}),"\n",(0,o.jsx)(n.h4,{id:"appjava",children:"App.java"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@SpringBootApplication\n@EnableJpaRepositories(basePackages="org.apache.juneau.petstore")\n@EnableCaching\n@Controller\npublic class App {\n\n    //-----------------------------------------------------------------------------------------------------------------\n    // App\n    //-----------------------------------------------------------------------------------------------------------------\n\n    public static void main(String[] args) {\n        try {\n            new SpringApplicationBuilder(App.class).run(args);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    //-----------------------------------------------------------------------------------------------------------------\n    // Beans\n    //-----------------------------------------------------------------------------------------------------------------\n\n    @Bean\n    public PetStoreService petStoreService() {\n        return new PetStoreService();\n    }\n\n    @Bean\n    public RootResources rootResources() {\n        return new RootResources();\n    }\n\n    @Bean\n    public PetStoreResource petStoreResource() {\n        return new PetStoreResource();\n    }\n\n    @Bean\n    public ServletRegistrationBean<RootResources> getRootServlet(RootResources rootResources) {\n        return new ServletRegistrationBean<>(rootResources, "/*");\n    }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Notice how cleanly Juneau servlets fit into Spring Boot.\nNo special initializers are required to integrate Juneau with Spring Boot."}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"RootResources"})," class is the top-level entry point into the REST API.\nIt allows us to group child resources.\nIn our case though we only have one child resource...",(0,o.jsx)(n.code,{children:"PetStoreResource"}),":"]}),"\n",(0,o.jsx)(n.h4,{id:"rootresourcesjava",children:"RootResources.java"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Rest(\n    path="/*",\n    title="Root resources",\n    description="Example of a router resource page.",\n    children={\n        PetStoreResource.class\n    }\n)\n@HtmlDocConfig(\n    widgets={\n        ContentTypeMenuItem.class\n    },\n    navlinks={\n        "options: ?method=OPTIONS",\n        "$W{ContentTypeMenuItem}",\n        "source: $C{Source/gitHub}/org/apache/juneau/petstore/rest/$R{servletClassSimple}.java"\n    },\n    aside={\n        "",\n        " This is an example of a \'router\' page that serves as a jumping-off point to child resources.",\n        " Resources can be nested arbitrarily deep through router pages.",\n        " Note the options link provided that lets you see the generated swagger doc for this page.",\n        " Also note the sources link on these pages to view the source code for the page.",\n        " All content on pages in the UI are serialized POJOs.",\n        " In this case, it\'s a serialized array of beans with 2 properties, \'name\' and \'description\'.",\n        " Other features (such as this aside) are added through annotations.",\n        ""\n    }\n)\npublic class RootResources extends BasicSpringRestServletGroup {\n    private static final long serialVersionUID = 1L;\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["By extending from ",(0,o.jsx)(n.code,{children:"BasicSpringRestServletGroup"}),", the root servlet hooks into the injection framework of Spring\nto resolve spring beans such as the child resource ",(0,o.jsx)(n.code,{children:"PetStoreResource"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["This page renders as follows: ",(0,o.jsx)(n.code,{children:"http://localhost:5000"})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"PetStoreResource"})," class is the REST implementation of our ",(0,o.jsx)(n.code,{children:"PetStore"})," interface."]}),"\n",(0,o.jsx)(n.h4,{id:"petstoreresourcejava",children:"PetStoreResource.java"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Rest(\n    path="/petstore",\n    title="Petstore application",\n    description={\n        "This is a sample server Petstore server based on the Petstore sample at Swagger.io.",\n        "You can find out more about Swagger at http://swagger.io.",\n    },\n    swagger=@Swagger(\n        version="1.0.0",\n        title="Swagger Petstore",\n        termsOfService="You are on your own.",\n        contact=@Contact(\n            name="Juneau Development Team",\n            email="dev@juneau.apache.org",\n            url="http://juneau.apache.org"\n        ),\n        license=@License(\n            name="Apache 2.0",\n            url="http://www.apache.org/licenses/LICENSE-2.0.html"\n        ),\n        externalDocs=@ExternalDocs(\n            description="Find out more about Juneau",\n            url="http://juneau.apache.org"\n        ),\n        tags={\n            @Tag(\n                name="pet",\n                description="Everything about your Pets",\n                externalDocs=@ExternalDocs(\n                    description="Find out more",\n                    url="http://juneau.apache.org"\n                )\n            ),\n            @Tag(\n                name="store",\n                description="Access to Petstore orders"\n            ),\n            @Tag(\n                name="user",\n                description="Operations about user",\n                externalDocs=@ExternalDocs(\n                    description="Find out more about our store",\n                    url="http://juneau.apache.org"\n                )\n            )\n        }\n    ),\n    staticFiles={"htdocs:/htdocs"}\n)\n@HtmlDocConfig(\n    widgets={\n        ContentTypeMenuItem.class,\n    },\n    navlinks={\n        "up: request:/..",\n        "options: servlet:/?method=OPTIONS",\n        "$W{ContentTypeMenuItem}",\n        "source: $C{Source/gitHub}/org/apache/juneau/petstore/rest/$R{servletClassSimple}.java"\n    },\n    head={\n        "<link rel=\'icon\' href=\'$U{servlet:/htdocs/cat.png}\'/>",  // Add a cat icon to the page.\n    },\n    header={\n        "# $R{resourceTitle}",\n        "## $R{methodSummary}",\n        "$C{PetStore/headerImage}"\n    },\n    aside={\n        "",\n        " This page shows a standard nested REST resource.",\n        " It shows how different properties can be rendered on the same bean in different views.",\n        " It also shows examples of HtmlRender classes and @BeanProperty(format) annotations.",\n        " It also shows how the Queryable converter and query widget can be used to create searchable interfaces.",\n        ""\n    },\n    stylesheet="servlet:/htdocs/themes/dark.css"  // Use dark theme by default.\n)\npublic class PetStoreResource extends BasicRestObject implements PetStore {\n\n    @Autowired private PetStoreService store;\n\n    /**\n     * Navigation page\n     *\n     * @return Navigation page contents.\n     */\n    @RestGet(\n        path="/",\n        summary="Navigation page"\n    )\n    @HtmlDocConfig(\n        style={\n            "INHERIT",  // Flag for inheriting resource-level CSS.\n            "body { ",\n                "background-image: url(\'petstore/htdocs/background.jpg\'); ",\n                "background-color: black; ",\n                "background-size: cover; ",\n                "background-attachment: fixed; ",\n            "}"\n        }\n    )\n    public ResourceDescriptions getTopPage() {\n        return new ResourceDescriptions()\n            .append("pet", "All pets in the store")\n            .append("store", "Orders and inventory")\n            .append("user", "Petstore users")\n        ;\n    }\n\n    ...\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Clicking the ",(0,o.jsx)(n.code,{children:"petstore"})," link on the root page takes you to our PetStore resource: ",(0,o.jsx)(n.code,{children:"http://localhost:5000/petstore"})]}),"\n",(0,o.jsxs)(n.p,{children:["The methods defined in our ",(0,o.jsx)(n.code,{children:"PetStore"})," interface are implemented like so:"]}),"\n",(0,o.jsx)(n.h4,{id:"petstoreresourcejava-1",children:"PetStoreResource.java"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Override /* PetStore */\n@RestGet(\n    path="/pet",\n    summary="All pets in the store",\n    swagger=@OpSwagger(\n        tags="pet",\n        parameters={\n            Queryable.SWAGGER_PARAMS  // Documents searching.\n        }\n    ),\n    converters={Queryable.class}  // Searching support.\n)\n@Bean(on="Pet", excludeProperties="tags,photo")  // In this view, don\'t serialize tags/photos properties.\npublic Collection<Pet> getPets() throws NotAcceptable {\n    return store.getPets();\n}\n\n@Override /* PetStore */\n@RestGet(\n    path="/pet/{petId}",\n    summary="Find pet by ID",\n    description="Returns a single pet",\n    swagger=@OpSwagger(\n        tags="pet"\n    )\n)\npublic Pet getPet(long petId) throws IdNotFound, NotAcceptable {\n    return store.getPet(petId);\n}\n\n@Override /* PetStore */\n@RestPost(\n    path="/pet",\n    summary="Add a new pet to the store",\n    swagger=@OpSwagger(\n        tags="pet"\n    ),\n    roleGuard="ROLE_ADMIN || (ROLE_USER && ROLE_WRITABLE)"  // Restrict access to this method.\n)\npublic long createPet(CreatePet pet) throws IdConflict, NotAcceptable, UnsupportedMediaType {\n    return store.create(pet).getId();\n}\n\n...\n'})}),"\n",(0,o.jsxs)(n.p,{children:["After running the ",(0,o.jsx)(n.code,{children:"Main"})," method in the client code to populate the database, the page renders as follows: ",(0,o.jsx)(n.code,{children:"http://localhost:5000/petstore/pet"})]}),"\n",(0,o.jsxs)(n.p,{children:["The OPTIONS menu items takes you to the auto-generated Swagger UI for the application: ",(0,o.jsx)(n.code,{children:"http://localhost:10000/petstore/pet?method=OPTIONS"})]}),"\n",(0,o.jsx)(n.p,{children:"Since we've defined tags on our annotations, the pet-related operations are all grouped under the pet tag:"}),"\n",(0,o.jsx)(n.p,{children:"Information for all HTTP parts is automatically generated:"}),"\n",(0,o.jsx)(n.p,{children:"The schema models for POJO models is available in the Responses section of an operation:"}),"\n",(0,o.jsx)(n.p,{children:"Auto-generated examples are available for all supported languages:"}),"\n",(0,o.jsx)(n.p,{children:"For example, application/json5:"}),"\n",(0,o.jsx)(n.p,{children:"Examples can be derived in a number of ways.\nIn our case, we've defined a static method on our Pet class annotated with @Example:"}),"\n",(0,o.jsx)(n.h4,{id:"petjava",children:"Pet.java"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Example\npublic static Pet example() {\n    return new Pet()\n        .id(123)\n        .species(Species.DOG)\n        .name("Doggie")\n        .tags("friendly","smart")\n        .status(PetStatus.AVAILABLE);\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Similar functionality exists for request bodies as well:"}),"\n",(0,o.jsx)(n.p,{children:"At the bottom of the page is a listing of the POJO models in the app:"})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(96540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);