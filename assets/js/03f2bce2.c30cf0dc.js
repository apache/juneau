"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[2056],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},82201:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"release-notes/5.0.0.32","title":"Release 5.0.0.32","description":"Date: Oct 5, 2013","source":"@site/docs/release-notes/5.0.0.32.md","sourceDirName":"release-notes","slug":"/release-notes/5.0.0.32","permalink":"/docs/release-notes/5.0.0.32","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/release-notes/5.0.0.32.md","tags":[],"version":"current","frontMatter":{"title":"Release 5.0.0.32"},"sidebar":"mainSidebar","previous":{"title":"5.0.0.33","permalink":"/docs/release-notes/5.0.0.33"},"next":{"title":"5.0.0.31","permalink":"/docs/release-notes/5.0.0.31"}}');var r=s(74848),a=s(28453);const o={title:"Release 5.0.0.32"},i="Release 5.0.0.32",c={},l=[];function d(e){const n={code:"code",del:"del",h1:"h1",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"release-50032",children:"Release 5.0.0.32"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Date:"})," Oct 5, 2013"]}),"\n",(0,r.jsx)(n.p,{children:"Juno 5.0.0.32 is a moderate update."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["New support for generating and consuming fully-compliant JSON-Schema documents.\nSee  ",(0,r.jsx)(n.del,{children:"jsonschema"})," for information."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["New methods added to ",(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/parser/Parser.html",target:"_blank",children:"Parser"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"org.apache.juneau.parser.Parser.parseMap(Object,int,Class,Class,Class)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"org.apache.juneau.parser.Parser.parseCollection(Object,int,Class,Class)"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Bean.html",target:"_blank",children:"@Bean"})," annotation can now be defined on interfaces and inherited by subclasses."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Support for customizing serialized values for ",(0,r.jsx)(n.code,{children:"Enums"})," through overriding ",(0,r.jsx)(n.code,{children:"toString()"})," and ",(0,r.jsx)(n.code,{children:"fromString()"})," on the enum class.\nPreviously used ",(0,r.jsx)(n.code,{children:"Enum.valueOf()"})," to convert strings back into ",(0,r.jsx)(n.code,{children:"Enums"}),".\nUsed for JSON-Schema support to allow ",(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/bean/jsonschema/JsonType.html",target:"_blank",children:"JsonType"})," enum to be\nserialized to lowercase per the specification (e.g. ",(0,r.jsx)(n.code,{children:'"string"'})," instead of ",(0,r.jsx)(n.code,{children:'"STRING"'}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.del,{children:"Cognos"})," DTOs now have fluent-style bean setters."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Support for generic bean objects whose type was erased at compile time.\nPrevious behavior gave you an error message that the type could not be determined.\nNew behavior assumes a type of ",(0,r.jsx)(n.code,{children:"Object"})," when the type is erased."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Bug fixes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When duplicate fluent-style setters were defined with different parameter types (e.g. ",(0,r.jsx)(n.code,{children:"setFoo(Foo f)"}),", ",(0,r.jsx)(n.code,{children:"setFoo(Bar b)"}),"), the ",(0,r.jsx)("a",{href:"/site/apidocs/org/apache/juneau/BeanMap.html",target:"_blank",children:"BeanMap"})," API would sometime choose the wrong setter as the bean property setter.\nNow validates that the setter being chosen is the one whose return type matches the property getter."]}),"\n",(0,r.jsxs)(n.li,{children:["Passing in ",(0,r.jsx)(n.code,{children:"Accept"})," GET parameters with ",(0,r.jsx)(n.code,{children:"'+'"})," (e.g. ",(0,r.jsx)(n.code,{children:"&Accept=text/json+simple"}),") wasn't working anymore.\nThe ",(0,r.jsx)(n.code,{children:"Accept"})," parameter is supposed to interpret spaces as ",(0,r.jsx)(n.code,{children:"'+'"})," to allow you to not have to write\n",(0,r.jsx)(n.code,{children:"&Accept=text/json%2Bsimple"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Parsers would not set bean properties of abstract type ",(0,r.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Number.html",target:"_blank",children:"Number"}),".\nNow it detects the numeric type based on input and sets the value accordingly."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);