"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[1939],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(96540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},67065:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"topics/19.05.00.JuneauShadedRestServerSpringboot","title":"juneau-shaded-rest-server-springboot","description":"The juneau-shaded-rest-server-springboot artifact bundles REST server functionality plus Spring Boot integration. At 3.8 MB, it provides everything needed for building Juneau REST services with Spring Boot.","source":"@site/docs/topics/19.05.00.JuneauShadedRestServerSpringboot.md","sourceDirName":"topics","slug":"/topics/JuneauShadedRestServerSpringboot","permalink":"/docs/topics/JuneauShadedRestServerSpringboot","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/19.05.00.JuneauShadedRestServerSpringboot.md","tags":[],"version":"current","frontMatter":{"title":"juneau-shaded-rest-server-springboot","slug":"JuneauShadedRestServerSpringboot"},"sidebar":"mainSidebar","previous":{"title":"19.4. juneau-shaded-rest-server","permalink":"/docs/topics/JuneauShadedRestServer"},"next":{"title":"19.6. juneau-shaded-all","permalink":"/docs/topics/JuneauShadedAll"}}');var i=r(74848),s=r(28453);const a={title:"juneau-shaded-rest-server-springboot",slug:"JuneauShadedRestServerSpringboot"},o=void 0,c={},l=[{value:"What&#39;s Included",id:"whats-included",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Maven Dependency",id:"maven-dependency",level:2},{value:"Bazel Dependency",id:"bazel-dependency",level:2},{value:"External Dependencies",id:"external-dependencies",level:2},{value:"Required",id:"required",level:3},{value:"Optional",id:"optional",level:3},{value:"Example Usage",id:"example-usage",level:2},{value:"Spring Boot Application",id:"spring-boot-application",level:3},{value:"REST Resource with Spring Integration",id:"rest-resource-with-spring-integration",level:3},{value:"Spring Configuration",id:"spring-configuration",level:3},{value:"Application Properties",id:"application-properties",level:3},{value:"Spring Security Integration",id:"spring-security-integration",level:3},{value:"Accessing Security Context",id:"accessing-security-context",level:3},{value:"Spring Data Integration",id:"spring-data-integration",level:3},{value:"Transaction Management",id:"transaction-management",level:3},{value:"Exception Handling with Spring",id:"exception-handling-with-spring",level:3},{value:"Swagger Integration",id:"swagger-integration",level:3},{value:"Multi-Module Spring Boot Application",id:"multi-module-spring-boot-application",level:3},{value:"Features",id:"features",level:2},{value:"Spring Boot Auto-Configuration",id:"spring-boot-auto-configuration",level:3},{value:"Spring Ecosystem Integration",id:"spring-ecosystem-integration",level:3},{value:"Juneau Features",id:"juneau-features",level:3},{value:"Testing",id:"testing",level:2},{value:"Spring Boot Test",id:"spring-boot-test",level:3},{value:"MockMvc Integration",id:"mockmvc-integration",level:3},{value:"Migration from Individual Modules",id:"migration-from-individual-modules",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"juneau-shaded-rest-server-springboot"})," artifact bundles REST server functionality plus Spring Boot integration. At 3.8 MB, it provides everything needed for building Juneau REST services with Spring Boot."]}),"\n",(0,i.jsx)(n.h2,{id:"whats-included",children:"What's Included"}),"\n",(0,i.jsx)(n.p,{children:"This artifact includes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["All modules from ",(0,i.jsx)(n.a,{href:"/docs/topics/JuneauShadedRestServer",children:"juneau-shaded-rest-server"})]})," (core + REST server)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"juneau-rest-server-springboot"})," - Spring Boot auto-configuration and integration"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"juneau-shaded-rest-server-springboot"})," when you need:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Boot applications"})," - Leverage Spring Boot's ecosystem"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Auto-configuration"})," - Automatic Juneau setup with Spring Boot"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring dependency injection"})," - Use ",(0,i.jsx)(n.code,{children:"@Autowired"})," in REST resources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Security integration"})," - Leverage Spring's security framework"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring ecosystem"})," - Access to Spring Data, Spring Cloud, etc."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"maven-dependency",children:"Maven Dependency"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.apache.juneau</groupId>\n    <artifactId>juneau-shaded-rest-server-springboot</artifactId>\n    <version>${juneau.version}</version>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"bazel-dependency",children:"Bazel Dependency"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'maven_jar(\n    name = "juneau_rest_server_springboot",\n    artifact = "org.apache.juneau:juneau-shaded-rest-server-springboot:${juneau.version}",\n)\n\n# External dependencies\nmaven_jar(\n    name = "spring_boot_starter_web",\n    artifact = "org.springframework.boot:spring-boot-starter-web:3.2.0",\n)\n\njava_library(\n    name = "my_spring_api",\n    srcs = glob(["src/**/*.java"]),\n    deps = [\n        "@juneau_rest_server_springboot//jar",\n        "@spring_boot_starter_web//jar",\n    ],\n)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"external-dependencies",children:"External Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"juneau-shaded-rest-server-springboot"})," requires:"]}),"\n",(0,i.jsx)(n.h3,{id:"required",children:"Required"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Boot Starter Web 3.0+"})," - Spring Boot web support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Jakarta Servlet API 6.1+"})," - Servlet specification (transitively from Spring Boot)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"optional",children:"Optional"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Boot Starter Security"})," - For Spring Security integration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Jakarta XML Bind API 3.0+"})," - For XML serialization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Apache Jena"})," - For RDF support"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsx)(n.h3,{id:"spring-boot-application",children:"Spring Boot Application"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApplication.class, args);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rest-resource-with-spring-integration",children:"REST Resource with Spring Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.apache.juneau.rest.annotation.*;\nimport org.apache.juneau.rest.springboot.*;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n@Rest(\n    path="/api/pets",\n    title="Pet Store API"\n)\npublic class PetResource extends SpringRestServlet {\n    \n    @Autowired\n    private PetService petService;  // Spring bean injection\n    \n    @RestGet\n    public List<Pet> getAllPets() {\n        return petService.findAll();\n    }\n    \n    @RestGet(path="/{id}")\n    public Pet getPet(@Path long id) {\n        return petService.findById(id)\n            .orElseThrow(() -> new NotFound("Pet not found"));\n    }\n    \n    @RestPost\n    public Pet createPet(@Content Pet pet) {\n        return petService.save(pet);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"spring-configuration",children:"Spring Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.springframework.context.annotation.Configuration;\nimport org.apache.juneau.rest.springboot.JuneauRestInitializer;\n\n@Configuration\npublic class JuneauConfig implements JuneauRestInitializer {\n    \n    @Override\n    public void init(SpringRestServletBuilder builder) {\n        builder\n            .defaultAccept("application/json")\n            .defaultContentType("application/json")\n            .maxInput("10M");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"application-properties",children:"Application Properties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-properties",children:"# application.properties\n\n# Juneau settings\njuneau.defaultAccept=application/json\njuneau.defaultContentType=application/json\njuneau.maxInput=10M\n\n# Server settings\nserver.port=8080\nserver.servlet.context-path=/\n\n# Logging\nlogging.level.org.apache.juneau=DEBUG\n"})}),"\n",(0,i.jsx)(n.h3,{id:"spring-security-integration",children:"Spring Security Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\npublic class SecurityConfig {\n    \n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(auth -> auth\n                .requestMatchers("/api/public/**").permitAll()\n                .requestMatchers("/api/admin/**").hasRole("ADMIN")\n                .anyRequest().authenticated()\n            )\n            .httpBasic();\n        \n        return http.build();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"accessing-security-context",children:"Accessing Security Context"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Rest(path="/api/users")\npublic class UserResource extends SpringRestServlet {\n    \n    @RestGet(path="/me")\n    public User getCurrentUser() {\n        Authentication auth = SecurityContextHolder.getContext()\n            .getAuthentication();\n        \n        String username = auth.getName();\n        return userService.findByUsername(username);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"spring-data-integration",children:"Spring Data Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface PetRepository extends JpaRepository<Pet, Long> {\n    List<Pet> findBySpecies(String species);\n}\n\n@Rest(path="/api/pets")\npublic class PetResource extends SpringRestServlet {\n    \n    @Autowired\n    private PetRepository petRepository;\n    \n    @RestGet\n    public List<Pet> getAllPets(\n        @Query("species") String species\n    ) {\n        if (species != null)\n            return petRepository.findBySpecies(species);\n        return petRepository.findAll();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"transaction-management",children:"Transaction Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.springframework.transaction.annotation.Transactional;\n\n@Rest(path="/api/orders")\npublic class OrderResource extends SpringRestServlet {\n    \n    @Autowired\n    private OrderService orderService;\n    \n    @RestPost\n    @Transactional\n    public Order createOrder(@Content Order order) {\n        // Transactional operation\n        return orderService.create(order);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"exception-handling-with-spring",children:"Exception Handling with Spring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"import org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n    \n    @ExceptionHandler(EntityNotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleNotFound(\n        EntityNotFoundException ex\n    ) {\n        return ResponseEntity\n            .status(HttpStatus.NOT_FOUND)\n            .body(new ErrorResponse(ex.getMessage()));\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"swagger-integration",children:"Swagger Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Rest(\n    path="/api",\n    swagger=@Swagger(\n        title="Pet Store API",\n        version="1.0",\n        description="REST API for Pet Store",\n        contact=@Contact(\n            name="Support Team",\n            email="support@example.com"\n        ),\n        license=@License(\n            name="Apache 2.0",\n            url="http://www.apache.org/licenses/LICENSE-2.0.html"\n        )\n    )\n)\npublic class PetStoreApi extends SpringRestServlet {\n    // Swagger UI at: http://localhost:8080/api/swagger\n    // OpenAPI JSON at: http://localhost:8080/api/openapi.json\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"multi-module-spring-boot-application",children:"Multi-Module Spring Boot Application"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Main application\n@SpringBootApplication\n@ComponentScan(basePackages = {\n    "com.example.api",\n    "com.example.service"\n})\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApplication.class, args);\n    }\n}\n\n// REST resources in com.example.api\n@Rest(path="/users")\n@Component\npublic class UserResource extends SpringRestServlet {\n    @Autowired\n    private UserService userService;\n    // ...\n}\n\n// Services in com.example.service\n@Service\npublic class UserService {\n    @Autowired\n    private UserRepository userRepository;\n    // ...\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(n.h3,{id:"spring-boot-auto-configuration",children:"Spring Boot Auto-Configuration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Automatic servlet registration"}),"\n",(0,i.jsx)(n.li,{children:"Property-based configuration"}),"\n",(0,i.jsx)(n.li,{children:"Actuator integration"}),"\n",(0,i.jsx)(n.li,{children:"Metrics and health checks"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"spring-ecosystem-integration",children:"Spring Ecosystem Integration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Data"})," - Database access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Security"})," - Authentication/authorization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Cloud"})," - Microservices patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Cache"})," - Caching abstraction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring Scheduling"})," - Task scheduling"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"juneau-features",children:"Juneau Features"}),"\n",(0,i.jsxs)(n.p,{children:["All features from ",(0,i.jsx)(n.a,{href:"/docs/topics/JuneauShadedRestServer",children:"juneau-shaded-rest-server"})," plus:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Spring bean injection in REST resources"}),"\n",(0,i.jsx)(n.li,{children:"Access to Spring ApplicationContext"}),"\n",(0,i.jsx)(n.li,{children:"Integration with Spring's exception handling"}),"\n",(0,i.jsx)(n.li,{children:"Spring's AOP capabilities"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"spring-boot-test",children:"Spring Boot Test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n@ExtendWith(SpringExtension.class)\npublic class PetResourceTest {\n    \n    @Autowired\n    private TestRestTemplate restTemplate;\n    \n    @Test\n    public void testGetAllPets() {\n        ResponseEntity<Pet[]> response = restTemplate\n            .getForEntity("/api/pets", Pet[].class);\n        \n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertTrue(response.getBody().length > 0);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mockmvc-integration",children:"MockMvc Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.test.web.servlet.MockMvc;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;\n\n@WebMvcTest(PetResource.class)\npublic class PetResourceMockMvcTest {\n    \n    @Autowired\n    private MockMvc mockMvc;\n    \n    @MockBean\n    private PetService petService;\n    \n    @Test\n    public void testGetPet() throws Exception {\n        Pet pet = new Pet(1L, "Fluffy", "cat");\n        when(petService.findById(1L))\n            .thenReturn(Optional.of(pet));\n        \n        mockMvc.perform(get("/api/pets/1"))\n            .andExpect(status().isOk())\n            .andExpect(jsonPath("$.name").value("Fluffy"));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"migration-from-individual-modules",children:"Migration from Individual Modules"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Before:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.apache.juneau</groupId>\n    <artifactId>juneau-rest-server</artifactId>\n    <version>${juneau.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.juneau</groupId>\n    <artifactId>juneau-rest-server-springboot</artifactId>\n    <version>${juneau.version}</version>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"After:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.apache.juneau</groupId>\n    <artifactId>juneau-shaded-rest-server-springboot</artifactId>\n    <version>${juneau.version}</version>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Need client functionality too?"})," Use ",(0,i.jsx)(n.a,{href:"/docs/topics/JuneauShadedAll",children:"juneau-shaded-all"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learn about REST server:"})," See ",(0,i.jsx)(n.a,{href:"/docs/topics/JuneauRestServerBasics",children:"REST Server Basics"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learn about Spring Boot integration:"})," See ",(0,i.jsx)(n.a,{href:"/docs/topics/SpringBootIntegration",children:"Spring Boot Integration"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learn about Spring Security:"})," See ",(0,i.jsx)(n.a,{href:"/docs/topics/SpringSecurityIntegration",children:"Spring Security Integration"})]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);