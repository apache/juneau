"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[628],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(96540);const l={},a=s.createContext(l);function r(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(a.Provider,{value:t},e.children)}},62380:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"topics/10.08.00.CustomCallHandlers","title":"Custom Call Handlers","description":"The RestCallHandler interface provides the ability to","source":"@site/docs-staging/topics/10.08.00.CustomCallHandlers.md","sourceDirName":"topics","slug":"/topics/10.08.00.CustomCallHandlers","permalink":"/docs/topics/10.08.00.CustomCallHandlers","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs/docs-staging/topics/10.08.00.CustomCallHandlers.md","tags":[],"version":"current","frontMatter":{"title":"Custom Call Handlers"},"sidebar":"mainSidebar","previous":{"title":"10.7. Response Content","permalink":"/docs/topics/10.07.00.ResponseContent"},"next":{"title":"10.9. Interceptors","permalink":"/docs/topics/10.09.00.Interceptors"}}');var l=n(74848),a=n(28453);const r={title:"Custom Call Handlers"},i=void 0,o={},c=[];function d(e){const t={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(t.p,{children:["The ",(0,l.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestCallHandler.html",children:"RestCallHandler"})," interface provides the ability to\nprovide custom handling of requests."]}),"\n",(0,l.jsxs)("tree",{children:[(0,l.jsx)("node-0",{children:(0,l.jsx)("java-class",{children:(0,l.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestClient/Builder.html",children:"RestClient.Builder"})})}),(0,l.jsx)("node-1",{children:(0,l.jsx)("java-method",{children:(0,l.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestClient/Builder.html#callHandler(Class)",children:"callHandler(Class<? extends RestCallHandler>)"})})}),(0,l.jsx)("node-0",{children:(0,l.jsx)("java-interface",{children:(0,l.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestCallHandler.html",children:"RestCallHandler"})})}),(0,l.jsx)("node-1",{children:(0,l.jsx)("java-method",{children:(0,l.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestCallHandler.html#run(HttpHost,HttpRequest,HttpContext)",children:"run(HttpHost,HttpRequest,HttpContext)"})})})]}),"\n",(0,l.jsx)(t.admonition,{title:"Example",type:"tip",children:(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-java",children:"// Our custom call handler.\npublic class MyRestCallHandler implements RestCallHandler {\n\n    private final RestClient client;\n\n    public MyRestCallHandler(RestClient client) {\n        this.client = client;\n    }\n\n    @Override\n    public HttpResponse run(HttpHost target, HttpRequest request, HttpContext context) throws IOException {\n        // Insert any special handling here.\n        // The following is the default behavior:\n        if (target == null)\n            return client.execute((HttpUriRequest)request, context);\n        return client.execute(target, request, context);\n    }\n}\n\n// Create a client that uses our custom handler.\nRestClient client = RestClient()\n    .create()\n    .json()\n    .callHandler(MyCallHandler.class)\n    .build();\n"})})}),"\n",(0,l.jsxs)(t.p,{children:["Note that there are other ways of accomplishing this such as extending the ",(0,l.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestClient.html",children:"RestClient"})," class and overriding the ",(0,l.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestClient.html#run(HttpHost,HttpRequest,HttpContext)",children:"RestClient.run(HttpHost,HttpRequest,HttpContext)"})," method or by defining your own ",(0,l.jsx)(t.a,{href:"../apidocs/org/apache/http/protocol/HttpRequestExecutor.html",children:"HttpRequestExecutor"}),".\nUsing this interface is often simpler though."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);