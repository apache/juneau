"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[6569],{28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>o});var a=s(96540);const t={},n=a.createContext(t);function i(e){const r=a.useContext(n);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(n.Provider,{value:r},e.children)}},86823:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"topics/02.10.00.SerializerSetsParserSets","title":"SerializerSets and ParserSets","description":"On top of the serializers and parsers are the SerializerSet and ParserSet classes.","source":"@site/docs/topics/02.10.00.SerializerSetsParserSets.md","sourceDirName":"topics","slug":"/topics/SerializerSetsParserSets","permalink":"/docs/topics/SerializerSetsParserSets","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/02.10.00.SerializerSetsParserSets.md","tags":[],"version":"current","frontMatter":{"title":"SerializerSets and ParserSets","slug":"SerializerSetsParserSets"},"sidebar":"mainSidebar","previous":{"title":"2.9. Complex Data Types","permalink":"/docs/topics/ComplexDataTypes"},"next":{"title":"2.11.1. Swap Basics","permalink":"/docs/topics/SwapBasics"}}');var t=s(74848),n=s(28453);const i={title:"SerializerSets and ParserSets",slug:"SerializerSetsParserSets"},o=void 0,l={},c=[];function p(e){const r={code:"code",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["On top of the serializers and parsers are the ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/serializer/SerializerSet.html",target:"_blank",children:"SerializerSet"})," and ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/parser/ParserSet.html",target:"_blank",children:"ParserSet"})," classes.\nThese classes allow serializers and parsers to be grouped and retrieved by W3C-compliant HTTP ",(0,t.jsx)(r.code,{children:"Accept"})," and\n",(0,t.jsx)(r.code,{children:"Content-Type"})," values..."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'// Construct a new serializer group with configuration parameters that get applied\n// to all serializers.\nSerializerSet serializers = SerializerSet.create()\n    .add(JsonSerializer.class, UrlEncodingSerializer.class)\n    .forEach(x -> x.swaps(TemporalCalendarSwap.IsoLocalDateTime.class))\n    .forEachWS(x -> x.ws())   // or .useWhitespace(true)\n    .build();\n\n// Find the appropriate serializer by Accept type and serialize our POJO to the\n// specified writer.\nserializers\n    .getSerializer("text/invalid, text/json;q=0.8, text/*;q:0.6, *\\/*;q=0.0")\n    .serialize(myPerson, myWriter);\n\n// Construct a new parser group with configuration parameters that get applied to all parsers.\nParserSet parsers = ParserSet.create()\n    .add(JsonSerializer.class, UrlEncodingSerializer.class)\n    .forEach(x -> x.swaps(CalendarSwap.IsoLocalDateTime.class))\n    .build();\n\nPerson myPerson = parsers\n    .getParser("text/json")\n    .parse(myReader, Person.class);\n'})}),"\n",(0,t.jsxs)(r.p,{children:["The REST servlet API builds upon the ",(0,t.jsx)(r.code,{children:"SerializerSet"})," and ",(0,t.jsx)(r.code,{children:"ParserSet"})," classes to provide annotated REST servlets that\nautomatically negotiate the HTTP media types and allow the developer to work with requests and responses as POJOs."]})]})}function d(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);