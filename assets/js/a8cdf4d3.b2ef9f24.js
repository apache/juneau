"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[4324],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var s=t(96540);const a={},o=s.createContext(a);function d(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),s.createElement(o.Provider,{value:n},e.children)}},28844:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>l,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"topics/08.04.02.InferredHttpMethodsAndPaths","title":"Inferred HTTP Methods and Paths","description":"When the name and/or path values are not specified, their values are inferred from the Java method name.","source":"@site/docs-staging/topics/08.04.02.InferredHttpMethodsAndPaths.md","sourceDirName":"topics","slug":"/topics/08.04.02.InferredHttpMethodsAndPaths","permalink":"/docs/topics/08.04.02.InferredHttpMethodsAndPaths","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/08.04.02.InferredHttpMethodsAndPaths.md","tags":[],"version":"current","frontMatter":{"title":"Inferred HTTP Methods and Paths"},"sidebar":"mainSidebar","previous":{"title":"8.4.1. @RestOp-Annotated Method Basics","permalink":"/docs/topics/08.04.01.RestOpAnnotatedMethodBasics"},"next":{"title":"8.4.3. Java Method Parameters","permalink":"/docs/topics/08.04.03.JavaMethodParameters"}}');var a=t(74848),o=t(28453);const d={title:"Inferred HTTP Methods and Paths"},i=void 0,r={},c=[];function h(e){const n={admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["When the ",(0,a.jsx)(n.code,{children:"name"})," and/or ",(0,a.jsx)(n.code,{children:"path"})," values are not specified, their values are inferred from the Java method name."]}),"\n",(0,a.jsx)(n.p,{children:"The HTTP method can be inferred from the Java method by starting the method name with any of the following:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"get"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"put"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"post"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"delete"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"options"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"head"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"trace"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"patch"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"path"})," is not defined, it's inferred from the Java method name (minus the prefix above)."]}),"\n",(0,a.jsxs)(n.admonition,{title:"Examples",type:"tip",children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Method="GET", path="/foo"\n@RestOp\npublic String getFoo() {...}\n'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Method="DELETE", path="/foo"\n@RestOp\npublic String deleteFoo() {...}\n'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Method="GET", path="/foo"\n// "GET" is default\n@RestOp\npublic String foo() {...}\n'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Method="GET", path="/"\n@RestOp(path="/")\npublic String foo() {...}\n'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Method="GET", path="/"\n@RestOp\npublic String get() {...}\n'})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Method="POST", path="/"\n@RestOp\npublic String post() {...}\n'})})]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"name"})," and ",(0,a.jsx)(n.code,{children:"path"})," are both specified, the Java method name can be anything."]})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);