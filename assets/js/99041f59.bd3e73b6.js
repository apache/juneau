"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[870],{11316:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>t,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/08.06.00.Marshalling","title":"Marshalling","description":"Juneau uses Parsers and Serializers for marshalling HTTP request and response bodies to POJOs using the Content-Type header to match the best parser and the Accept header to match the best serializer.","source":"@site/docs-staging/topics/08.06.00.Marshalling.md","sourceDirName":"topics","slug":"/topics/08.06.00.Marshalling","permalink":"/docs/topics/08.06.00.Marshalling","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/08.06.00.Marshalling.md","tags":[],"version":"current","frontMatter":{"title":"Marshalling"},"sidebar":"tutorialSidebar","previous":{"title":"8.5.7. HTTP Part APIs","permalink":"/docs/topics/08.05.07.HttpPartApis"},"next":{"title":"8.7. Handling Form Posts","permalink":"/docs/topics/08.07.00.HandlingFormPosts"}}');var r=n(74848),i=n(28453);const o={title:"Marshalling"},t=void 0,c={},l=[];function h(e){const a={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:["Juneau uses ",(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/parser/Parser.html",children:"Parsers"})," and ",(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/serializer/Serializer.html",children:"Serializers"})," for marshalling HTTP request and response bodies to POJOs using the ",(0,r.jsx)(a.code,{children:"Content-Type"})," header to match the best parser and the ",(0,r.jsx)(a.code,{children:"Accept"})," header to match the best serializer."]}),"\n",(0,r.jsx)(a.p,{children:"Serializers and parsers can be associated with REST servlets using the following annotations:"}),"\n",(0,r.jsxs)("tree",{children:[(0,r.jsx)("node-0",{children:(0,r.jsx)("java-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html",children:"Rest"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html#serializers()",children:"serializers"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html#serializers()",children:"parsers"})})}),(0,r.jsx)("node-0",{children:(0,r.jsx)("java-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/annotation/RestOp.html",children:"RestOp"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/annotation/RestOp.html#serializers()",children:"serializers"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/annotation/RestOp.html#serializers()",children:"parsers"})})})]}),"\n",(0,r.jsxs)(a.p,{children:["Request bodies are parsed and passed in via ",(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/http/annotation/Content.html",children:"@Content"}),"-annotated parameters, and response bodies are returned or thrown by ",(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/annotation/RestOp.html",children:"@RestOp"}),"-annotated methods and serialized."]}),"\n",(0,r.jsx)(a.admonition,{title:"Example",type:"tip",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"@Rest(\n    serializers={JsonParser.class, HtmlSerializer.class},\n    parsers={JsonParser.class, HtmlParser.class}\n)\npublic class MyResource {\n\n    // Override at the method level.\n    @RestPost(parsers={XmlParser.class})\n    public MyPojo myMethod(@Content MyPojo myPojo) {\n        // Do something with your parsed POJO.\n        // Then return it and serialize the POJO.\n    }\n}\n"})})}),"\n",(0,r.jsx)(a.p,{children:"The following classes provide common default serializers and parsers that can be\nused as-is or augmented by child classes:"}),"\n",(0,r.jsxs)("tree",{children:[(0,r.jsx)("node-0",{children:(0,r.jsx)(a.strong,{children:"Classes:"})}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("javac-abstract-class",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/servlet/BasicRestServlet.html",children:"BasicRestServlet"})})," ",(0,r.jsx)("javac-abstract-class",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/servlet/BasicRestServletGroup.html",children:"BasicRestServletGroup"})})," ",(0,r.jsx)("javac-abstract-class",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/servlet/BasicRestObject.html",children:"BasicRestObject"})})," ",(0,r.jsx)("javac-abstract-class",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/servlet/BasicRestObjectGroup.html",children:"BasicRestObjectGroup"})})]}),(0,r.jsx)("node-0",{children:(0,r.jsx)(a.strong,{children:"Interfaces:"})}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("javac-interface",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/config/BasicJsonConfig.html",children:"BasicJsonConfig"})})," ",(0,r.jsx)("javac-interface",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/config/BasicJsonHtmlConfig.html",children:"BasicJsonHtmlConfig"})})," ",(0,r.jsx)("javac-interface",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/config/BasicJson5Config.html",children:"BasicJson5Config"})})," ",(0,r.jsx)("javac-interface",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/config/BasicOpenApiConfig.html",children:"BasicOpenApiConfig"})})," ",(0,r.jsx)("javac-interface",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/rest/config/BasicUniversalConfig.html",children:"BasicUniversalConfig"})})]})]}),"\n",(0,r.jsx)(a.p,{children:"Serializers and parsers can also be defined programmatically using an INIT hook method like shown below:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"@Rest\npublic class MyResource {\n\n    @RestInit\n    public void init(RestContext.Builder builder) {\n        builder.serializers().add(JsonSerializer.class, HtmlSerializer.class);\n        builder.parsers().add(JsonParser.class, HtmlParser.class);\n    }\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["They can also be defined through ",(0,r.jsx)(a.a,{href:"/docs/topics/TODO",children:"custom REST contexts and builders"}),"."]}),"\n",(0,r.jsx)(a.p,{children:"Config annotations allow you to define serializer and parser properties using specialized annotations at either the\nclass or operation levels:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'@Rest(\n    ...\n)\n@BeanConfig(sortProperties="true")\n@SerializerConfig(trimNulls="true")\n@JsonConfig(escapeSolidus="true")\npublic class MyResource extends BasicRestServlet {\n\n    @RestPost\n    @BeanConfig(sortProperties="false")\n    @SerializerConfig(trimNulls="false")\n    public MyPojo myMethod(@Content MyPojo myPojo) {\n        ...\n    }\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Swaps are associated serializers and parsers registered on a REST resource via the ",(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/annotation/BeanConfig.html",children:"BeanConfig"})," annotation on either the class or method level:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"// Servlet with transforms applied\n@Rest(\n    ...\n)\n@BeanConfig(\n    swaps={\n        // Calendars should be serialized/parsed as ISO8601 date-time strings\n        TemporalCalendarSwap.IsoInstant.class,\n\n        // Byte arrays should be serialized/parsed as BASE64-encoded strings\n        ByteArraySwap.Base64.class\n    },\n    beanFilters={\n        // Subclasses of MyInterface will be treated as MyInterface objects.\n        // Bean properties not defined on that interface will be ignored.\n        MyInterface.class\n    }\n)\npublic MyResource extends BasicRestServlet {...}\n"})}),"\n",(0,r.jsx)(a.p,{children:"Config annotations are defined for all serializers and parsers:"}),"\n",(0,r.jsx)("tree",{children:(0,r.jsxs)("node-0",{children:[(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/annotation/BeanConfig.html",children:"BeanConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/csv/annotation/CsvConfig.html",children:"CsvConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/html/annotation/HtmlConfig.html",children:"HtmlConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/html/annotation/HtmlDocConfig.html",children:"HtmlDocConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/json/annotation/JsonConfig.html",children:"JsonConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/jsonschema/annotation/JsonSchemaConfig.html",children:"JsonSchemaConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/msgpack/annotation/MsgPackConfig.html",children:"MsgPackConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/oapi/annotation/OpenApiConfig.html",children:"OpenApiConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/parser/annotation/ParserConfig.html",children:"ParserConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/plaintext/annotation/PlainTextConfig.html",children:"PlainTextConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/serializer/annotation/SerializerConfig.html",children:"SerializerConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/soap/annotation/SoapXmlConfig.html",children:"SoapXmlConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/uon/annotation/UonConfig.html",children:"UonConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/urlencoding/annotation/UrlEncodingConfig.html",children:"UrlEncodingConfig"})})," ",(0,r.jsx)("javac-annotation",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlConfig.html",children:"XmlConfig"})})]})}),"\n",(0,r.jsx)(a.admonition,{title:"See Also",type:"info",children:(0,r.jsx)("tree",{children:(0,r.jsxs)("node-0",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/examples/rest/PhotosResource.html",children:"PhotosResource"})})," - An example of a REST resource that uses a custom serializer and parser."]})})})]})}function d(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>t});var s=n(96540);const r={},i=s.createContext(r);function o(e){const a=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:a},e.children)}}}]);