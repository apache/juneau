"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[6525],{28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var s=n(96540);const r={},o=s.createContext(r);function c(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(o.Provider,{value:t},e.children)}},77051:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/10.09.00.Interceptors","title":"Interceptors","description":"The RestCallInterceptor API provides a quick way","source":"@site/docs-staging/topics/10.09.00.Interceptors.md","sourceDirName":"topics","slug":"/topics/10.09.00.Interceptors","permalink":"/docs/topics/10.09.00.Interceptors","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/10.09.00.Interceptors.md","tags":[],"version":"current","frontMatter":{"title":"Interceptors"},"sidebar":"tutorialSidebar","previous":{"title":"10.8. Custom Call Handlers","permalink":"/docs/topics/10.08.00.CustomCallHandlers"},"next":{"title":"10.10.1. REST Proxy Basics","permalink":"/docs/topics/10.10.01.RestProxyBasics"}}');var r=n(74848),o=n(28453);const c={title:"Interceptors"},a=void 0,i={},l=[];function p(e){const t={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestCallInterceptor.html",children:"RestCallInterceptor"})," API provides a quick way\nof intercepting and manipulating requests and responses beyond the existing ",(0,r.jsx)(t.a,{href:"../apidocs/org/apache/http/HttpRequestInterceptor.html",children:"HttpRequestInterceptor"})," and ",(0,r.jsx)(t.a,{href:"../apidocs/org/apache/http/HttpResponseInterceptor.html",children:"HttpResponseInterceptor"})," APIs."]}),"\n",(0,r.jsxs)("tree",{children:[(0,r.jsx)("node-0",{children:(0,r.jsx)("java-class",{children:(0,r.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestClient/Builder.html",children:"RestClient.Builder"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method",{children:(0,r.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestClient/Builder.html#interceptors(Object...)",children:"interceptors(Object...)"})})}),(0,r.jsx)("node-0",{children:(0,r.jsx)("java-class",{children:(0,r.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestRequest.html",children:"RestRequest"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method",{children:(0,r.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestRequest.html#interceptors(RestCallInterceptor...)",children:"interceptors(RestCallInterceptor...)"})})}),(0,r.jsx)("node-0",{children:(0,r.jsx)("java-interface",{children:(0,r.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestCallInterceptor.html",children:"RestCallInterceptor"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method",{children:(0,r.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestCallInterceptor.html#onInit(RestRequest)",children:"onInit(RestRequest)"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method",{children:(0,r.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestCallInterceptor.html#onConnect(RestRequest,RestResponse)",children:"onConnect(RestRequest,RestResponse)"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method",{children:(0,r.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/client/RestCallInterceptor.html#onClose(RestRequest,RestResponse)",children:"onClose(RestRequest,RestResponse)"})})})]}),"\n",(0,r.jsx)(t.admonition,{title:"Example",type:"tip",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"// Create a client with a customized interceptor.\nRestClient client = RestClient\n    .create()\n    .interceptors(\n        new RestCallInterceptor() {\n\n            @Override\n            public void onInit(RestRequest req) throws Exception {\n                // Intercept immediately after RestRequest object is created and all headers/query/form-data has been\n                // set on the request from the client.\n            }\n\n            @Override\n            public void onConnect(RestRequest req, RestResponse res) throws Exception {\n                // Intercept immediately after an HTTP response has been received.\n            }\n\n            @Override\n            public void onClose(RestRequest req, RestResponse res) throws Exception {\n                // Intercept when the response body is consumed.\n            }\n        }\n    )\n    .build();\n"})})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);