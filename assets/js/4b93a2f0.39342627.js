"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[2450],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(96540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},73433:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"topics/02.26.01.XmlBasics","title":"XML Basics","description":"Juneau supports converting arbitrary POJOs to and from XML using ultra-efficient serializers and parsers.","source":"@site/docs-staging/topics/02.26.01.XmlBasics.md","sourceDirName":"topics","slug":"/topics/02.26.01.XmlBasics","permalink":"/docs/topics/02.26.01.XmlBasics","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.26.01.XmlBasics.md","tags":[],"version":"current","frontMatter":{"title":"XML Basics"},"sidebar":"mainSidebar","previous":{"title":"2.25. JSON Schema Support","permalink":"/docs/topics/02.25.00.JsonSchemaDetails"},"next":{"title":"2.26.2. XML Methodology","permalink":"/docs/topics/02.26.02.XmlMethodology"}}');var a=s(74848),r=s(28453);const i={title:"XML Basics"},o=void 0,c={},l=[{value:"Sample Beans",id:"sample-beans",level:5},{value:"Sample Code",id:"sample-code",level:5},{value:"Normal XML:",id:"normal-xml",level:5}];function d(e){const n={code:"code",h5:"h5",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Juneau supports converting arbitrary POJOs to and from XML using ultra-efficient serializers and parsers."}),"\n",(0,a.jsx)(n.p,{children:"The XML serializer converts POJOs directly to XML without the need for intermediate DOM objects.\nLikewise, the XML parser uses a STaX parser and creates POJOs directly without intermediate DOM objects."}),"\n",(0,a.jsx)(n.p,{children:"Unlike frameworks such as JAXB, Juneau does not require POJO classes to be annotated to produce and consume XML.\nHowever, several XML annotations are provided for handling namespaces and fine-tuning the format of the XML produced."}),"\n",(0,a.jsx)(n.p,{children:"The following example shows XML for a typical bean:"}),"\n",(0,a.jsx)(n.h5,{id:"sample-beans",children:"Sample Beans"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Bean(typeName="person")\npublic class Person {\n\n    // Bean properties\n    public String name;\n    @Swap(TemporalCalendarSwap.IsoInstant.class) public Calendar birthDate;\n    public List addresses;\n\n    // Getters/setters omitted\n}\n\n@Bean(typeName="address")\npublic class Address {\n\n    // Bean properties\n    public String street, city;\n    public StateEnum state;\n    public int zip;\n    public boolean isCurrent;\n\n    // Getters/setters omitted\n}\n'})}),"\n",(0,a.jsx)(n.h5,{id:"sample-code",children:"Sample Code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'Person person = new Person()\n    .name("John Smith")\n    .birthDate("1946-08-12T00:00:00Z")\n    .addresses(\n        new Address()\n            .street("100 Main Street")\n            .city("Anywhereville")\n            .state(NY)\n            .zip(12345)\n            .isCurrent(true);\n    );\n'})}),"\n",(0,a.jsx)(n.h5,{id:"normal-xml",children:"Normal XML:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:"<person>\n    <name>John Smith</name>\n    <birthDate>1946-08-12T04:00:00Z</birthDate>\n    <addresses>\n        <address>\n            <street>100 Main Street</street>\n            <city>Anywhereville</city>\n            <state>NY</state>\n            <zip>12345</zip>\n            <isCurrent>true</isCurrent>\n        </address>\n    </addresses>\n</person>\n"})}),"\n",(0,a.jsx)(n.p,{children:"Juneau produces JSON-equivalent XML, meaning any valid JSON document can be losslessly converted into an XML equivalent.\nIn fact, all of the Juneau serializers and parsers are built upon this JSON-equivalence."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);