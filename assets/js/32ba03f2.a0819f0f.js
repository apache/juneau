"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[1188],{28453:(e,s,o)=>{o.d(s,{R:()=>a,x:()=>c});var r=o(96540);const t={},n=r.createContext(t);function a(e){const s=r.useContext(n);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(n.Provider,{value:s},e.children)}},55196:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"topics/09.25.00.ResponseProcessors","title":"Response Processors","description":"The REST Server API uses the concept of registered response processors for converting objects returned by REST methods","source":"@site/docs/topics/09.25.00.ResponseProcessors.md","sourceDirName":"topics","slug":"/topics/ResponseProcessors","permalink":"/docs/topics/ResponseProcessors","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/09.25.00.ResponseProcessors.md","tags":[],"version":"current","frontMatter":{"title":"Response Processors","slug":"ResponseProcessors"},"sidebar":"mainSidebar","previous":{"title":"9.24. RestOp Context","permalink":"/docs/topics/RestOpContext"},"next":{"title":"9.26. REST RPC","permalink":"/docs/topics/RestRpc"}}');var t=o(74848),n=o(28453);const a={title:"Response Processors",slug:"ResponseProcessors"},c=void 0,i={},l=[];function p(e){const s={code:"code",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["The REST Server API uses the concept of registered response processors for converting objects returned by REST methods\nor set through ",(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/RestResponse.html#setContent(java.lang.Object)",target:"_blank",children:"RestResponse.setContent(Object)"})," into appropriate HTTP responses.\nBy default, REST resource classes are registered with the following response processors:"]}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/processor/HttpEntityProcessor.html",target:"_blank",children:"HttpEntityProcessor"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/processor/HttpResourceProcessor.html",target:"_blank",children:"HttpResourceProcessor"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/processor/HttpResponseProcessor.html",target:"_blank",children:"HttpResponseProcessor"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/processor/InputStreamProcessor.html",target:"_blank",children:"InputStreamProcessor"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/processor/PlainTextPojoProcessor.html",target:"_blank",children:"PlainTextPojoProcessor"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/processor/ReaderProcessor.html",target:"_blank",children:"ReaderProcessor"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/processor/ResponseBeanProcessor.html",target:"_blank",children:"ResponseBeanProcessor"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/processor/SerializedPojoProcessor.html",target:"_blank",children:"SerializedPojoProcessor"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/processor/ThrowableProcessor.html",target:"_blank",children:"ThrowableProcessor"})})})]}),"\n",(0,t.jsx)(s.p,{children:"Custom response processors can be associated with REST resources via the following:"}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:(0,t.jsx)("java-annotation",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/annotation/Rest.html",target:"_blank",children:"Rest"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("javac-method-annotation",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/annotation/Rest.html#responseProcessors()",target:"_blank",children:"responseProcessors"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/RestContext.Builder.html",target:"_blank",children:"RestContext.Builder"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("javac-method",{children:(0,t.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/RestContext.Builder.html#responseProcessors()",target:"_blank",children:"responseProcessors()"})})})]}),"\n",(0,t.jsx)(s.p,{children:"Response processors can be used to process POJOs that cannot normally be handled through Juneau serializers, or because\nit's simply easier to define response processors for special cases."}),"\n",(0,t.jsxs)(s.p,{children:["The following example shows how to create a response processor to handle special ",(0,t.jsx)(s.code,{children:"Foo"})," objects outside the normal Juneau\narchitecture."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Rest(responseProcessors=FooProcessor.class)\npublic class MyResource {\n\n    @RestGet("/getFoo")\n    public Foo getFoo() {\n        return new Foo("Some value");\n    }\n\n    public static class FooProcessor implements ResponseProcessor {\n        @Override\n        public int process(RestOpContext opContext, RestRequest req, RestResponse res) {\n            Object output = res.getContent(Object.class);\n            if (output instanceof Foo) {\n                try {\n                    Foo foo = (Foo)output;\n                    // Set some headers.\n                    res.setHeader("Foo-ID", foo.getId());\n                    // Set the real content.\n                    res.setContent("Special handling for Foo object: " + foo.getValue());\n                } catch (Exception e) {\n                    throw new InternalServerError(e);\n                }\n                return FINISHED;  // We handled it.\n            }\n            return CONTINUE;  // Let next processor handle it.\n        }\n    }\n}\n'})})]})}function d(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);