"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[821],{28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>l});var s=a(96540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},35368:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"topics/08.19.00.LoggingAndDebugging","title":"Logging / Debugging","description":"The REST APIs provides supports enabling logging of HTTP requests and responses through the following annotations:","source":"@site/docs-staging/topics/08.19.00.LoggingAndDebugging.md","sourceDirName":"topics","slug":"/topics/08.19.00.LoggingAndDebugging","permalink":"/docs/topics/08.19.00.LoggingAndDebugging","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs/docs-staging/topics/08.19.00.LoggingAndDebugging.md","tags":[],"version":"current","frontMatter":{"title":"Logging / Debugging"},"sidebar":"mainSidebar","previous":{"title":"8.18.6. HTML Stylesheets","permalink":"/docs/topics/08.18.06.HtmlStylesheets"},"next":{"title":"8.20. HTTP Status Codes","permalink":"/docs/topics/08.20.00.HttpStatusCodes"}}');var t=a(74848),r=a(28453);const o={title:"Logging / Debugging"},l=void 0,i={},c=[{value:"STATUS_LINE",id:"status_line",level:4},{value:"HEADER",id:"header",level:4},{value:"ENTITY",id:"entity",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The REST APIs provides supports enabling logging of HTTP requests and responses through the following annotations:"}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:(0,t.jsx)("java-annotation",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html",children:"Rest"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("java-method-annotation",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html#debug()",children:"debug"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("java-method-annotation",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html#debugOn()",children:"debugOn"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-annotation",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/RestOp.html",children:"RestOp"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("java-method-annotation",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/RestOp.html#debug()",children:"debug"})})})]}),"\n",(0,t.jsx)(n.p,{children:"Debug mode enables the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"HTTP request/response bodies are cached in memory for logging purposes."}),"\n",(0,t.jsxs)(n.li,{children:["HTTP requests/responses are logged to the registered ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/logger/CallLogger.html",children:"CallLogger"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The possible annotation values are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"true"})," - Debug is enabled for all requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"false"})," - Debug is disabled for all requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"conditional"})," - Debug is enabled only for requests that have a ",(0,t.jsx)(n.code,{children:"Debug: true"})," header."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Example",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Enable debugging on all op calls on this resource\n@Rest(debug="true")\npublic class MyResource {...}\n'})})}),"\n",(0,t.jsx)(n.p,{children:"These annotations support SVL variables, so it's possible to define them as a system property for example."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Enable via system property 'MyResource.debug'\n@Rest(debug=\"$S{MyResource.debug}\")\npublic class MyResource {...}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html#debugOn()",children:"@Rest(debugOn)"})," annotation can also be used to\nenable debugging.\nIt takes a comma-delimited list of key-value pairs, the keys being class or method names, and the values being one of ",(0,t.jsx)(n.code,{children:"true|false|conditional"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Turn on debug per-request on the class and always on the doX() method\n@Rest(debugOn="MyResource=conditional,MyResource.doX=true")\npublic class MyResource {...}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The primary advantage of ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html#debugOn()",children:"@Rest(debugOn)"})," is that\nyou can control debugging externally such as through a system property or environment variable:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Turn on debug per-request on the class and always on the doX() method\n@Rest(debugOn="$E{DEBUG}")\npublic class MyResource {...}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Debugging can also be enabled programmatically with the use of the following APIs:"}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/debug/DebugEnablement.html",children:"DebugEnablement"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("javac-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/debug/BasicDebugEnablement.html",children:"BasicDebugEnablement"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html",children:"RestContext.Builder"})})}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("javac-method",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#debugEnablement()",children:"debugEnablement()"})})," ",(0,t.jsx)("javac-method",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#debugEnablement(Class)",children:"debugEnablement(Class)"})})," ",(0,t.jsx)("javac-method",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#debugEnablement(DebugEnablement)",children:"debugEnablement(DebugEnablement)"})})]})]}),"\n",(0,t.jsx)(n.p,{children:"HTTP calls can be logged with the following levels of granularity:"}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/logger/CallLoggingDetail.html",children:"CallLoggingDetail"})})}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("javac-field",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/logger/CallLoggingDetail.html#STATUS_LINE",children:"STATUS_LINE"})})," ",(0,t.jsx)("javac-field",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/logger/CallLoggingDetail.html#HEADER",children:"HEADER"})})," ",(0,t.jsx)("javac-field",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/logger/CallLoggingDetail.html#ENTITY",children:"ENTITY"})})]})]}),"\n",(0,t.jsx)(n.p,{children:"The following examples show the output format for each detail type:"}),"\n",(0,t.jsx)(n.h4,{id:"status_line",children:"STATUS_LINE"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"WARNING: [500] HTTP POST /foo?foo=bar\n"})}),"\n",(0,t.jsx)(n.h4,{id:"header",children:"HEADER"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"WARNING:\n=== HTTP Call (incoming) ===================================================\n[500] HTTP POST /foo?foo=bar\n    Request length: 3 bytes\n    Response code: 500\n    Response length: 3 bytes\n    Exec time: 20ms\n---Request Headers---\n    Foo: bar\n---Response Headers---\n    Foo: bar\n    `Content-Type: text/plain`\n=== END ===================================================================\n"})}),"\n",(0,t.jsx)(n.h4,{id:"entity",children:"ENTITY"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"WARNING:\n=== HTTP Call (incoming) ===================================================\n[500] HTTP POST /foo?foo=bar\n    Request length: 3 bytes\n    Response code: 500\n    Response length: 3 bytes\n    Exec time: 20ms\n---Request Headers---\n    Foo: bar\n---Response Headers---\n    Foo: bar\n    `Content-Type: text/plain`\n---Request Content UTF-8---\nFoo\n---Request Content Hex---\n46 6F 6F\n---Response Content UTF-8---\nFoo\n---Response Content Hex---\n46 6F 6F\n=== END ===================================================================\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The interface responsible for generating the log entries is ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/logger/CallLogger.html",children:"CallLogger"})," and the default is ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/logger/BasicCallLogger.html",children:"BasicCallLogger"})," which produces the output above."]}),"\n",(0,t.jsx)(n.p,{children:"It can be changed through any of the following:"}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:(0,t.jsx)("java-annotation",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html",children:"Rest"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("javac-method-annotation",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/Rest.html#callLogger()",children:"callLogger()"})})}),(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html",children:"RestContext.Builder"})})}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("javac-method",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#callLogger()",children:"callLogger()"})})," ",(0,t.jsx)("javac-method",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#callLogger(Class)",children:"callLogger(Class)"})})," ",(0,t.jsx)("javac-method",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#callLogger(CallLogger)",children:"callLogger(CallLogger)"})})]})]}),"\n",(0,t.jsx)(n.p,{children:"The call logger uses logging rules to map requests to logging detail levels."}),"\n",(0,t.jsx)(n.p,{children:"By default, these are the logging rules:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"RestLogger\n    .create()\n    .beanStore(beanStore)  // Allow injected beans in constructor\n    .normalRules(  // Rules when debugging is not enabled\n        RestLoggerRule.create()  // Log 500+ errors with status-line and header information\n            .statusFilter(x -> x >= 500)\n            .level(SEVERE)\n            .requestDetail(HEADER)\n            .responseDetail(HEADER)\n            .build(),\n        RestLoggerRule.create()  // Log 400-500 errors with just status-line information\n            .statusFilter(x -> x >= 400)\n            .level(WARNING)\n            .requestDetail(STATUS_LINE)\n            .responseDetail(STATUS_LINE)\n            .build()\n    )\n    .debugRules(  // Rules when debugging is enabled\n        RestLoggerRule.create()  // Log everything with full details\n            .level(SEVERE)\n            .requestDetail(ENTITY)\n            .responseDetail(ENTITY)\n            .build()\n    );\n"})}),"\n",(0,t.jsx)(n.p,{children:"Thrown exceptions get logged with a stack trace hash and a counter like below:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"WARNING: [500,9b85cc96.13] HTTP POST /foo?foo=bar\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Stack trace hashes are controlled by the ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/stats/ThrownStore.html",children:"ThrownStore"})," bean\nwhich is configured via the following:"]}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html",children:"RestContext.Builder"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("java-method",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#thrownStore()",children:"thrownStore()"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("java-method",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#thrownStore(Class)",children:"thrownStore(Class)"})})}),(0,t.jsx)("node-1",{children:(0,t.jsx)("java-method",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext/Builder.html#thrownStore(ThrownStore)",children:"thrownStore(ThrownStore)"})})})]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/logger/BasicTestCallLogger.html",children:"BasicTestCallLogger"})," class is useful for testing and allows you to suppress logging when testing error conditions by passing in a ",(0,t.jsx)(n.code,{children:"noTrace=true"})," query parameter or ",(0,t.jsx)(n.code,{children:"No-Trace: true"})," header on requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/debug/DebugEnablement.html",children:"DebugEnablement"}),", ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/logger/CallLogger.html",children:"CallLogger"}),", and ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/stats/ThrownStore.html",children:"ThrownStore"})," can all be defined globally as Spring beans in a Spring Boot environment."]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);