"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[2453],{21956:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"topics/05.04.02.LogicVariables","title":"Logic Variables","description":"The default variable resolver also provides the following logic variables for performing simple logical operations:","source":"@site/docs/topics/05.04.02.LogicVariables.md","sourceDirName":"topics","slug":"/topics/05.04.02.LogicVariables","permalink":"/docs/topics/05.04.02.LogicVariables","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs/topics/05.04.02.LogicVariables.md","tags":[],"version":"current","frontMatter":{"title":"Logic Variables"},"sidebar":"tutorialSidebar","previous":{"title":"5.4.1. Variable Basics","permalink":"/docs/topics/05.04.01.VariableBasics"},"next":{"title":"5.5. Modded/Encoded Entries","permalink":"/docs/topics/05.05.00.ModdedEntries"}}');var r=a(74848),o=a(28453);const i={title:"Logic Variables"},c=void 0,l={},t=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The default variable resolver also provides the following logic variables for performing simple logical operations:"}),"\n",(0,r.jsxs)("tree",{children:[(0,r.jsx)("node-0",{children:"Logic Variables"}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/svl/vars/IfVar.html",children:"IfVar"})})," - ",(0,r.jsx)(n.code,{children:"$IF{arg,then[,else]}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/svl/vars/SwitchVar.html",children:"SwitchVar"})})," - ",(0,r.jsx)(n.code,{children:"$SW{arg,pattern1:then1[,pattern2:then2...]}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/svl/vars/CoalesceVar.html",children:"CoalesceVar"})})," - ",(0,r.jsx)(n.code,{children:"$CO{arg1[,arg2...]}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/svl/vars/PatternMatchVar.html",children:"PatternMatchVar"})})," - ",(0,r.jsx)(n.code,{children:"$PM{arg,pattern}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/svl/vars/NotEmptyVar.html",children:"NotEmptyVar"})})," - ",(0,r.jsx)(n.code,{children:"$NE{arg}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/svl/vars/UpperCaseVar.html",children:"UpperCaseVar"})})," - ",(0,r.jsx)(n.code,{children:"$UC{arg}"})]}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("java-class",{children:(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/svl/vars/LowerCaseVar.html",children:"LowerCaseVar"})})," - ",(0,r.jsx)(n.code,{children:"$LC{arg}"})]})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$IF"})," variable can be used for simple if/else logic:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"# Value set to 'foo' if myBooleanProperty is true\n\nkey1 =\n    $IF{\n        $S{myBooleanProperty},\n        foo\n    }\n\n# Value set to 'foo' if myBooleanProperty is true, 'bar' if false.\n\nkey2 =\n    $IF{\n        $S{myBooleanProperty},\n        foo,\n        bar\n    }\n\n# Value set to key1 value if myBooleanProperty is true, key2 value if false.\n\nkey3 =\n    $IF{\n        $S{myBooleanProperty},\n        $C{key1},\n        $C{key2}\n    }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$SW"})," variable can be used for switch blocks based on pattern matching:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"# Shell command depends on the OS\n\nshellCommand =\n    $SW{\n        $LC{$S{os.name}},\n        *win*: bat,\n        linux: bash,\n        *: sh\n    }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$CO"})," variable can be used for coalescing of values (finding the first non-null/empty match):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"# Debug flag can be enabled by system property or environment variable.\n\ndebug =\n    $CO{\n        $S{debug},\n        $E{DEBUG},\n        false\n    }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$PM"})," variable can be used for calculating boolean values:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ini",children:"# Debug flag can be enabled by system property or environment variable.\n\nisWindows =\n    $PM{\n        $LC{$S{os.name}},\n        *win*\n    }\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var s=a(96540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);