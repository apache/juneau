"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[427],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(96540);const s={},o=a.createContext(s);function r(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:t},e.children)}},57945:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"topics/17.03.00.JuneauPetstoreApi","title":"juneau-petstore-api","description":"The juneau-petstore-api module contains the Java interface of our application and the DTOs that go along with it.","source":"@site/docs/topics/17.03.00.JuneauPetstoreApi.md","sourceDirName":"topics","slug":"/topics/JuneauPetstoreApi","permalink":"/docs/topics/JuneauPetstoreApi","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/17.03.00.JuneauPetstoreApi.md","tags":[],"version":"current","frontMatter":{"title":"juneau-petstore-api","slug":"JuneauPetstoreApi"},"sidebar":"mainSidebar","previous":{"title":"17.2. Running the App","permalink":"/docs/topics/JuneauPetstoreRunning"},"next":{"title":"17.4. juneau-petstore-client","permalink":"/docs/topics/JuneauPetstoreClient"}}');var s=n(74848),o=n(28453);const r={title:"juneau-petstore-api",slug:"JuneauPetstoreApi"},i=void 0,c={},d=[{value:"PetStore.java",id:"petstorejava",level:4},{value:"Maven Dependency",id:"maven-dependency",level:4},{value:"Pet.java",id:"petjava",level:4}];function p(e){const t={a:"a",code:"code",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://github.com/apache/juneau-petstore/tree/master/juneau-petstore-api",children:"juneau-petstore-api"})," module contains the Java interface of our application and the DTOs that go along with it."]}),"\n",(0,s.jsx)(t.p,{children:"These classes are meant to be shared between the server and client side code."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://github.com/apache/juneau-petstore/blob/master/juneau-petstore-api/src/main/java/org/apache/juneau/petstore/PetStore.java",children:"PetStore"})," class is our primary class for defining our application."]}),"\n",(0,s.jsx)(t.p,{children:"It's a standard Java interface with annotations used to describe how the methods map to REST calls."}),"\n",(0,s.jsx)(t.h4,{id:"petstorejava",children:(0,s.jsx)(t.a,{href:"https://github.com/apache/juneau-petstore/blob/master/juneau-petstore-api/src/main/java/org/apache/juneau/petstore/PetStore.java",children:"PetStore.java"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Remote(path="/petstore")\npublic interface PetStore {\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Pets\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns all pets in the database.\n     *\n     * @return All pets in the database.\n     * @throws NotAcceptable Unsupported `Accept` header specified.\n     */\n    @RemoteGet("/pet")\n    public Collection<Pet> getPets() throws NotAcceptable;\n\n    /**\n     * Returns a pet from the database.\n     *\n     * @param petId The ID of the pet to retrieve.\n     * @return The pet.\n     * @throws IdNotFound Pet was not found.\n     * @throws NotAcceptable Unsupported `Accept` header specified.\n     */\n    @RemoteGet("/pet/{petId}")\n    public Pet getPet(\n            name="petId",\n            schema=@Schema(description="ID of pet to return")\n        ) long petId\n    ) throws IdNotFound, NotAcceptable;\n\n    /**\n     * Adds a pet to the database.\n     *\n     * @param pet The pet data to add to the database.\n     * @return Ok if successful.\n     * @throws IdConflict ID already in use.\n     * @throws NotAcceptable Unsupported `Accept` header specified.\n     * @throws UnsupportedMediaType Unsupported `Content-Type` header specified.\n     */\n    @RemotePost("/pet")\n    public long createPet(\n        @Content(\n            schema=@Schema(description="Pet object to add to the store")\n        ) CreatePet pet\n    ) throws IdConflict, NotAcceptable, UnsupportedMediaType;\n\n    /**\n     * Updates a pet in the database.\n     *\n     * @param pet The pet data to add to the database.\n     * @return Ok if successful.\n     * @throws IdNotFound ID not found.\n     * @throws NotAcceptable Unsupported `Accept` header specified.\n     * @throws UnsupportedMediaType Unsupported `Content-Type` header specified.\n     */\n    @RemotePut("/pet/{petId}")\n    public Ok updatePet(\n        @Content(\n            schema=@Schema(description="Pet object that needs to be added to the store")\n        ) UpdatePet pet\n    ) throws IdNotFound, NotAcceptable, UnsupportedMediaType;\n\n    /**\n     * Find all pets with the matching statuses.\n     *\n     * @param status The statuses to match against.\n     * @return The pets that match the specified statuses.\n     * @throws NotAcceptable Unsupported `Accept` header specified.\n     */\n    @RemoteGet("/pet/findByStatus")\n    public Collection<Pet> findPetsByStatus(\n        @Query(\n            name="status",\n            schema=@Schema(\n                description="Status values that need to be considered for filter.",\n                required=true,\n                type="array",\n                collectionFormat="csv",\n                items=@Items(\n                    type="string",\n                    _enum="AVAILABLE,PENDING,SOLD",\n                    _default="AVAILABLE"\n                )\n            )\n        ) PetStatus[] status\n    ) throws NotAcceptable;\n\n    /**\n     * Deletes the specified pet.\n     *\n     * @param apiKey Security key.\n     * @param petId ID of pet to delete.\n     * @return Ok if successful.\n     * @throws IdNotFound Pet not found.\n     * @throws NotAcceptable Unsupported `Accept` header specified.\n     */\n    @RemoteDelete("/pet/{petId}")\n    public Ok deletePet(\n        @Header(\n            name="api_key",\n            schema=@Schema(\n                description="Security API key",\n                required=true\n            )\n        ) String apiKey,\n        @Path(\n            name="petId",\n            schema=@Schema(description="Pet id to delete")\n        ) long petId\n    ) throws IdNotFound, NotAcceptable;\n\n    /**\n     * Deletes all pets in the database.\n     *\n     * @return Ok if successful.\n     */\n    @RemoteDelete("/pet")\n    public Ok deleteAllPets();\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Orders\n    //------------------------------------------------------------------------------------------------------------------\n\n    // ... (additional order methods would go here)\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"@Remote"})," and ",(0,s.jsx)(t.code,{children:"@RemoteX"})," are client-side annotations used to map the method calls to REST and will be describe in the\nclient code section."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"@Path"})," and ",(0,s.jsx)(t.code,{children:"@Body"})," are used by both the client and server side code to map to REST artifacts on both sides."]}),"\n",(0,s.jsx)(t.p,{children:"Both sets of annotations are provided by pulling in the Juneau dependency below:"}),"\n",(0,s.jsx)(t.h4,{id:"maven-dependency",children:"Maven Dependency"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.apache.juneau</groupId>\n    <artifactId>juneau-marshall</artifactId>\n    <version>9.x.x</version>\n</dependency>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://github.com/apache/juneau-petstore/blob/master/juneau-petstore-api/src/main/java/org/apache/juneau/petstore/dto/Pet.java",children:"Pet"})," class is a DTO that gets serialized over the REST connection."]}),"\n",(0,s.jsx)(t.p,{children:"It is also annotated with JPA annotations so that they can easily be stored in a JPA datastore on the server side."}),"\n",(0,s.jsx)(t.h4,{id:"petjava",children:(0,s.jsx)(t.a,{href:"https://github.com/apache/juneau-petstore/blob/master/juneau-petstore-api/src/main/java/org/apache/juneau/petstore/dto/Pet.java",children:"Pet.java"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Bean(typeName="Pet", properties="id,species,name,tags,price,status")\n@Entity(name="PetstorePet")\npublic class Pet {\n\n    @Column @Id @GeneratedValue\n    @Schema(description="Unique identifier for this pet.")\n    @Html(link="servlet:/pet/{id}")\n    private long id;\n\n    @Column(length=50)\n    Schema(description="Pet name.", minLength=3, maxLength=50)\n    private String name;\n\n    @Column\n    @Schema(description="Price of pet.", maximum="999.99")\n    @Html(render=PriceRender.class)\n    private float price;\n\n    // ... (additional fields and methods would go here)\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The annotations here are a combination of Juneau annotations for controlling marshalling (",(0,s.jsx)(t.code,{children:"@Bean"}),", ",(0,s.jsx)(t.code,{children:"@Html"}),") and\ndocumentation/validation (",(0,s.jsx)(t.code,{children:"@Schema"}),"), and JPA annotations for database persistence (",(0,s.jsx)(t.code,{children:"@Entity"}),", ",(0,s.jsx)(t.code,{children:"@Column"}),")."]}),"\n",(0,s.jsx)(t.p,{children:"Most applications may choose to have separate classes for DTOs and JPA beans since you typically are not going to want\nto expose server-side details to client-side code."}),"\n",(0,s.jsx)(t.p,{children:"In these examples however they were combined into the same classes for brevity."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);