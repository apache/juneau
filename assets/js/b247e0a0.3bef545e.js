"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[176],{28453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>o});var s=n(96540);const r={},t=s.createContext(r);function i(e){const a=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:a},e.children)}},61788:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/02.11.01.SwapBasics","title":"Swap Basics","description":"Swaps are a critical component of Juneau.","source":"@site/docs-staging/topics/02.11.01.SwapBasics.md","sourceDirName":"topics","slug":"/topics/02.11.01.SwapBasics","permalink":"/docs/topics/02.11.01.SwapBasics","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.11.01.SwapBasics.md","tags":[],"version":"current","frontMatter":{"title":"Swap Basics"},"sidebar":"tutorialSidebar","previous":{"title":"2.10. Serializer/Parser Sets","permalink":"/docs/topics/02.10.00.SerializerSetsParserSets"},"next":{"title":"2.11.2. Default Swaps","permalink":"/docs/topics/02.11.02.DefaultSwaps"}}');var r=n(74848),t=n(28453);const i={title:"Swap Basics"},o=void 0,c={},l=[];function p(e){const a={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.a,{href:"../apidocs/org/apache/juneau/swap/ObjectSwap.html",children:"Swaps"})," are a critical component of Juneau.\nThey allow the serializers and parsers to handle Java objects that wouldn't normally be serializable."]}),"\n",(0,r.jsx)(a.p,{children:"Swaps are, simply put, 'object swappers' that swap in serializable objects for non-serializable ones during serialization, and vis-versa during parsing."}),"\n",(0,r.jsxs)(a.p,{children:["Some examples of non-serializable objects are ",(0,r.jsx)(a.code,{children:"File"}),", ",(0,r.jsx)(a.code,{children:"Reader"}),", ",(0,r.jsx)(a.code,{children:"Iterable"}),", etc...\nThese are classes that aren't beans and cannot be represented as simple ",(0,r.jsx)(a.code,{children:"Maps"}),", ",(0,r.jsx)(a.code,{children:"Collections"}),", or primitives."]}),"\n",(0,r.jsxs)(a.p,{children:["In the following example, we introduce a ",(0,r.jsx)(a.code,{children:"ObjectSwap"})," that will swap in a bean of a particular type with a map\ncontaining customized key-value pairs:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'// Sample swap for converting a bean to a specialized map of key-value pairs.\npublic class MyBeanSwap extends ObjectSwap {\n\n    // Converts a bean to a generic map.\n    @Override /* ObjectSwap */\n    public JsonMap swap(BeanSession session, MyBean bean) {\n        return JsonMap.of("foo", bean.getBar());\n    }\n\n    // Converts the generic map back into a bean.\n    @Override /* ObjectSwap */\n    public MyBean unswap(BeanSession session, JsonMap map, ClassMeta hint) throws Exception {\n        MyBean bean = new MyBean();\n        bean.setBar(map.getString("foo"));\n        return bean;\n    }\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"The swap can then be associated with serializers and parsers like so:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"// Create a new JSON serializer with our swap.\nWriterSerializer serializer = JsonSerializer.create().simple().swaps(MyBeanSwap.class).build();\nString json = serializer.serialize(new MyBean());\n\n// Create a JSON parser with our swap.\nReaderParser parser = JsonParser.create().swaps(MyBeanSwap.class).build();\nMyBean bean = parser.parse(json, MyBean.class);\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Another example of a ",(0,r.jsx)(a.code,{children:"ObjectSwap"})," is one that converts ",(0,r.jsx)(a.code,{children:"byte[]"})," arrays to BASE64-encoded strings:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:'public class ByteArrayBase64Swap extends StringSwap {\n\n    @Override /* StringSwap */\n    public String swap(byte[] bytes) throws Exception {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        OutputStream b64os = MimeUtility.encode(baos, "base64");\n        b64os.write(bytes);\n        b64os.close();\n        return new String(baos.toByteArray());\n    }\n\n    @Override /* StringSwap */\n    public byte[] unswap(String string, ClassMeta hint) throws Exception {\n        byte[] bytes = string.getBytes();\n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        InputStream b64is = MimeUtility.decode(bais, "base64");\n        byte[] tmp = new byte[bytes.length];\n        int n = b64is.read(tmp);\n        byte[] res = new byte[n];\n        System.arraycopy(tmp, 0, res, 0, n);\n        return res;\n    }\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"The following example shows the BASE64 swap in use:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"// Create a JSON serializer and register the BASE64 encoding swap with it.\nWriterSerializer serializer = JsonSerializer.create().simple().swaps(ByteArrayBase64Swap.class).build();\nReaderParser parser = JsonParser.create().swaps(ByteArrayBase64Swap.class).build();\n\nbyte[] bytes = {1,2,3};\nString json = serializer.serialize(bytes);      // Produces \"'AQID'\"\nbytes = parser.parse(json, byte[].class);       // Reproduces {1,2,3}\n\nbyte[][] bytes2d = {{1,2,3},{4,5,6},null};\njson = serializer.serialize(bytes2d);           // Produces \"['AQID','BAUG',null]\"\nbytes2d = parser.parse(json, byte[][].class);   // Reproduces {{1,2,3},{4,5,6},null}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["The ",(0,r.jsx)(a.a,{href:"https://juneau.apache.org/site/apidocs-9.0.1/org/apache/juneau/BeanContextable.Builder.html#swap(java.lang.Class,java.lang.Class,org.apache.juneau.utils.ThrowingFunction)",children:"BeanContextable.Builder.swap(Class,Class,ThrowingFunction)"})," and ",(0,r.jsx)(a.a,{href:"https://juneau.apache.org/site/apidocs-9.0.1/org/apache/juneau/BeanContextable.Builder.html#swap(java.lang.Class,java.lang.Class,org.apache.juneau.utils.ThrowingFunction,org.apache.juneau.utils.ThrowingFunction)",children:"BeanContextable.Builder.swap(Class,Class,ThrowingFunction,ThrowingFunction)"})," methods are another way to define swaps by using functions."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-java",children:"// Use a function to convert beans to strings.\nWriterSerializer serializer = JsonSerializer\n    .create()\n    .simple()\n    .swap(MyBean.class, String.class, x -> myBeanStringifier(x))\n    .build();\n"})})]})}function u(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);