"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[1235],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(96540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},37237:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"topics/02.13.02.BeanSubTypes","title":"Bean Subtypes","description":"In addition to the bean type name support described above, simplified support is provided for bean subtypes.","source":"@site/docs-staging/topics/02.13.02.BeanSubTypes.md","sourceDirName":"topics","slug":"/topics/02.13.02.BeanSubTypes","permalink":"/docs/topics/02.13.02.BeanSubTypes","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs/docs-staging/topics/02.13.02.BeanSubTypes.md","tags":[],"version":"current","frontMatter":{"title":"Bean Subtypes"},"sidebar":"mainSidebar","previous":{"title":"2.13.1. Bean Dictionary Basics","permalink":"/docs/topics/02.13.01.BeanDictionaryBasics"},"next":{"title":"2.14. Virtual Beans","permalink":"/docs/topics/02.14.00.VirtualBeans"}}');var a=s(74848),i=s(28453);const o={title:"Bean Subtypes"},c=void 0,r={},p=[];function l(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"In addition to the bean type name support described above, simplified support is provided for bean subtypes."}),"\n",(0,a.jsx)(n.p,{children:"Bean subtypes are similar in concept to bean type names, except for the following differences:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"You specify the list of possible subclasses through an annotation on a parent bean class."}),"\n",(0,a.jsx)(n.li,{children:"You do not need to register the subtype classes on the bean dictionary of the parser."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"In the following example, the abstract class has two subclasses:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Abstract superclass\n@Bean(\n    dictionary={A1.class, A2.class}\n)\npublic abstract class A {\n    public String f0 = "f0";\n}\n\n// Subclass 1\n@Bean(typeName="A1")\npublic class A1 extends A {\n    public String f1;\n}\n\n// Subclass 2\n@Bean(typeName="A2")\npublic class A2 extends A {\n    public String f2;\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["When serialized, the subtype is serialized as a virtual ",(0,a.jsx)(n.code,{children:"_type"})," property:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"A1 object = new A1();\nobject.f1 = \"f1\";\nString json = Json5.of(object);\nassertEquals(\"{_type:'A1',f1:'f1',f0:'f0'}\", json);\n"})}),"\n",(0,a.jsx)(n.p,{children:"The following shows what happens when parsing back into the original object."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"A object = Json.to(json, A.class);\nassertTrue(object instanceof A1);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);