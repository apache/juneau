"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[8251],{28453:(e,i,r)=>{r.d(i,{R:()=>o,x:()=>t});var n=r(96540);const s={},c=n.createContext(s);function o(e){const i=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(c.Provider,{value:i},e.children)}},61166:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"topics/13.10.00.Listeners","title":"Listeners","description":"As mentioned previously, the lifecycle methods for the Microservice class are explicitly defined as non-final so that they can be overridden by subclasses.","source":"@site/docs/topics/13.10.00.Listeners.md","sourceDirName":"topics","slug":"/topics/MicroserviceCoreListeners","permalink":"/docs/topics/MicroserviceCoreListeners","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/13.10.00.Listeners.md","tags":[],"version":"current","frontMatter":{"title":"Listeners","slug":"MicroserviceCoreListeners"},"sidebar":"mainSidebar","previous":{"title":"13.9. Console Commands","permalink":"/docs/topics/ConsoleCommands"},"next":{"title":"14.1. juneau-microservice-jetty Basics","permalink":"/docs/topics/JuneauMicroserviceJettyBasics"}}');var s=r(74848),c=r(28453);const o={title:"Listeners",slug:"MicroserviceCoreListeners"},t=void 0,a={},d=[];function l(e){const i={code:"code",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:["As mentioned previously, the lifecycle methods for the ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.html",target:"_blank",children:"Microservice"})," class are explicitly defined as non-final so that they can be overridden by subclasses.\nIn addition to this support, an interface for defining event listeners for your microservice:"]}),"\n",(0,s.jsxs)("tree",{children:[(0,s.jsx)("node-0",{children:(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html",target:"_blank",children:"Microservice.Builder"})})}),(0,s.jsx)("node-1",{children:(0,s.jsx)("java-method",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.Builder.html#listener(org.apache.juneau.microservice.MicroserviceListener)",target:"_blank",children:"listener(MicroserviceListener)"})})}),(0,s.jsx)("node-0",{children:(0,s.jsx)("java-interface",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/MicroserviceListener.html",target:"_blank",children:"MicroserviceListener"})})}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("javac-method",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/MicroserviceListener.html#onStart(org.apache.juneau.microservice.Microservice)",target:"_blank",children:"onStart(Microservice)"})})," ",(0,s.jsx)("javac-method",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/MicroserviceListener.html#onStop(org.apache.juneau.microservice.Microservice)",target:"_blank",children:"onStop(Microservice)"})})," ",(0,s.jsx)("javac-method",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/MicroserviceListener.html#onConfigChange(org.apache.juneau.microservice.Microservice,org.apache.juneau.config.event.ConfigEvents)",target:"_blank",children:"onConfigChange(Microservice,ConfigEvents)"})})]}),(0,s.jsx)("node-0",{children:(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/BasicMicroserviceListener.html",target:"_blank",children:"BasicMicroserviceListener"})})})]}),"\n",(0,s.jsx)(i.p,{children:"This listener API can be used for listening for and reacting to configuration changes on the file system."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'public class MyMicroserviceListener extends BasicMicroserviceListener {\n\n    @Override /* MicroserviceListener */\n    public void onConfigChange(Microservice microservice, ConfigEvents events) {\n\n        // Restart the microservice if anything was modified in one of our sections\n        if (events.isSectionChanged("MySection"))\n            microservice.stop().start();\n    }\n}\n'})}),"\n",(0,s.jsxs)(i.p,{children:["Note that the ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/microservice/Microservice.html#onConfigChange(org.apache.juneau.config.event.ConfigEvents)",target:"_blank",children:"Microservice.onConfigChange(ConfigEvents)"})," method can also be overridden to react to configuration changes as well:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'public class MyMicroservice extends Microservice {\n\n    @Override /* MicroserviceListener */\n    public void onConfigChange(ConfigEvents events) {\n\n        // Restart the microservice if anything was modified in one of our sections\n        if (events.isSectionChanged("MySection"))\n            this.stop().start();\n    }\n}\n'})})]})}function h(e={}){const{wrapper:i}={...(0,c.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);