"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[8147],{23585:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"topics/12.05.00.Manifest","title":"Manifest","description":"The Microservice.Builder.manifest(Object))","source":"@site/docs-staging/topics/12.05.00.Manifest.md","sourceDirName":"topics","slug":"/topics/12.05.00.Manifest","permalink":"/docs/topics/12.05.00.Manifest","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs/docs-staging/topics/12.05.00.Manifest.md","tags":[],"version":"current","frontMatter":{"title":"Manifest"},"sidebar":"mainSidebar","previous":{"title":"12.4. Args","permalink":"/docs/topics/12.04.00.Args"},"next":{"title":"12.6. Config","permalink":"/docs/topics/12.06.00.Config"}}');var t=i(74848),a=i(28453);const o={title:"Manifest"},r=void 0,c={},l=[];function h(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/microservice/Microservice/Builder.html#manifest(Object)",children:"Microservice.Builder.manifest(Object)"}),"\nmethod can be used to specify the contents or location of of the main manifest file of the executable jar.\nIf you do not specify the location/contents of the manifest file, the microservice will attempt to resolve it through\nthe following methods: - Looking on the file system for a file at ",(0,t.jsx)(n.code,{children:"META-INF/MANIFEST.MF"}),".\nThis is primarily to allow for running microservices from within eclipse workspaces where the manifest file is located\nin the project root."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Using the class loader for this class to find the file at the URL ",(0,t.jsx)(n.code,{children:"META-INF/MANIFEST.MF"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If you do manually specify the manifest file, you can pass in any of the following types:"}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsx)("node-0",{children:"Manifest File Types"}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/utils/ManifestFile.html",children:"ManifestFile"})})," - A pre-parsed manifest file"]}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/java/util/jar/Manifest.html",children:"Manifest"})})," - A pre-parsed manifest file"]}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/java/io/Reader.html",children:"Reader"})})," - Containing the raw contents of the manifest"]}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/java/io/InputStream.html",children:"InputStream"})})," - Containing the raw contents of the manifest"]}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/java/io/File.html",children:"File"})})," - File containing the raw contents of the manifest"]}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/java/lang/String.html",children:"String"})})," - Path to file containing the raw contents of the manifest"]}),(0,t.jsxs)("node-1",{children:[(0,t.jsx)("java-class",{children:(0,t.jsx)(n.a,{href:"../apidocs/java/lang/Class.html",children:"Class"})})," - Finds and loads the manifest file of the jar file that the specified class is contained within"]})]}),"\n",(0,t.jsxs)(n.p,{children:["The manifest file can be retrieved using the the ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/microservice/Microservice.html#getManifest()",children:"Microservice.getManifest()"})," method which provides an API for accessing manifest file entries.\nThis method returns an instance of ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/utils/ManifestFile.html",children:"ManifestFile"})," which extends\nfrom ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/collections/JsonMap.html",children:"JsonMap"})," allowing you to retrieve entries as any data\ntypes supported by that class."]}),"\n",(0,t.jsx)(n.admonition,{title:"Example",type:"tip",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'ManifestFile manifestFile = Microservice.getInstance().getManifest();\n\nString mainClass = manifestFile.getString("Main-Class");\nint myInt = manifestFile.getInt("My-Int", 123);\nboolean myBoolean = manifestFile.getBoolean("My-Boolean");\n'})})}),"\n",(0,t.jsxs)(n.p,{children:["The manifest is also used for the ",(0,t.jsx)(n.a,{href:"../apidocs/org/apache/juneau/svl/vars/ManifestFileVar.html",children:"$MF"})," SVL variable."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Examples",type:"tip",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// $MF used in variable resolver.\nVarResolver var = Microservice.getInstance().getVarResolver();\nSystem.out.println(vr.resolve("The main class is $MF{Main-Class}"));\n'})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// $MF used in annotation.\n@Rest(\n    title="$MF{Application-Title}",\n    ...\n)\n'})})]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(96540);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);