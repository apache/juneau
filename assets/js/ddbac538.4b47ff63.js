"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[7137],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},72447:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"topics/02.32.02.OpenApiMethodology","title":"OpenAPI Methodology","description":"Unlike the other Juneau serializers and parsers that convert input and output directly to-and-from POJOs, the OpenAPI","source":"@site/docs/topics/02.32.02.OpenApiMethodology.md","sourceDirName":"topics","slug":"/topics/OpenApiMethodology","permalink":"/docs/topics/OpenApiMethodology","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/02.32.02.OpenApiMethodology.md","tags":[],"version":"current","frontMatter":{"title":"OpenAPI Methodology","slug":"OpenApiMethodology"},"sidebar":"mainSidebar","previous":{"title":"2.32.1. OpenApi Basics","permalink":"/docs/topics/OpenApiBasics"},"next":{"title":"2.32.3. OpenAPI Serializers","permalink":"/docs/topics/OpenApiSerializers"}}');var a=n(74848),s=n(28453);const i={title:"OpenAPI Methodology",slug:"OpenApiMethodology"},o=void 0,d={},c=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["Unlike the other Juneau serializers and parsers that convert input and output directly to-and-from POJOs, the OpenAPI\nserializers and parsers use intermediate objects based on the ",(0,a.jsx)(t.code,{children:"type"})," and ",(0,a.jsx)(t.code,{children:"format"}),' of the schema.\nThe following table shows the "natural" intermediate type of the object based on the ',(0,a.jsx)(t.code,{children:"type/format"}),":"]}),"\n",(0,a.jsxs)("table",{class:"code-table",children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"Type"}),(0,a.jsx)("th",{children:"Format"}),(0,a.jsx)("th",{children:"Intermediate Java Type"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsxs)("td",{rowSpan:"4",children:[(0,a.jsx)(t.code,{children:"string"})," or empty"]}),(0,a.jsxs)("td",{children:[(0,a.jsx)(t.code,{children:"byte"}),(0,a.jsx)("br",{}),(0,a.jsx)(t.code,{children:"binary"}),(0,a.jsx)("br",{}),(0,a.jsx)(t.code,{children:"binary-spaced"})]}),(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"byte[]"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsxs)("td",{children:[(0,a.jsx)(t.code,{children:"date"}),(0,a.jsx)("br",{}),(0,a.jsx)(t.code,{children:"date-time"})]}),(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Calendar.html",target:"_blank",children:"Calendar"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"uon"})}),(0,a.jsxs)("td",{children:["No intermediate type.",(0,a.jsx)("br",{}),"(serialized directly to/from POJO)"]})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:"empty"}),(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html",target:"_blank",children:"String"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"boolean"})}),(0,a.jsx)("td",{children:"empty"}),(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Boolean.html",target:"_blank",children:"Boolean"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{rowSpan:"2",children:(0,a.jsx)(t.code,{children:"integer"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"int32"})}),(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Integer.html",target:"_blank",children:"Integer"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"int64"})}),(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Long.html",target:"_blank",children:"Long"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{rowSpan:"2",children:(0,a.jsx)(t.code,{children:"number"})}),(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"float"})}),(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Float.html",target:"_blank",children:"Float"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"double"})}),(0,a.jsx)("td",{children:(0,a.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Double.html",target:"_blank",children:"Double"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{rowSpan:"2",children:(0,a.jsx)(t.code,{children:"array"})}),(0,a.jsx)("td",{children:"empty"}),(0,a.jsx)("td",{children:"Arrays of intermediate types on this list."})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"uon"})}),(0,a.jsxs)("td",{children:["No intermediate type.",(0,a.jsx)("br",{}),"(serialized directly to/from POJO)"]})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{rowSpan:"2",children:(0,a.jsx)(t.code,{children:"object"})}),(0,a.jsx)("td",{children:"empty"}),(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"Map<String,Object>"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)(t.code,{children:"uon"})}),(0,a.jsxs)("td",{children:["No intermediate type.",(0,a.jsx)("br",{}),"(serialized directly to/from POJO)"]})]})]}),"\n",(0,a.jsx)(t.p,{children:"The valid POJO types for serializing/parsing are based on the intermediate types above.\nAs a general rule, any POJOs that are the intermediate type or transformable to or from the intermediate type are valid\nPOJO types."}),"\n",(0,a.jsx)(t.p,{children:"For example, the following POJO type can be transformed to and from a byte array."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Sample POJO class convertable to and from a byte[].\npublic class MyPojo {\n\n    // Constructor used by parser.\n    public MyPojo(byte[] value) {...}\n\n    // toX method used by serializer.\n    public byte[] toBytes() {...}\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"This example shows how that POJO can be converted to a BASE64-encoded string."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Construct a POJO.\nMyPojo myPojo = ...;\n\n// Define a schema.\nHttpPartSchema schema = HttpPartSchema.tByte().build();\n\n// Convert POJO to BASE64-encoded string.\nHttpPartSerializer serializer = OpenApiSerializer.DEFAULT;\nString httpPart = serializer.serialize(schema, myPojo);\n\n// Convert BASE64-encoded string back into a POJO.\nHttpPartParser parser = OpenApiParser.DEFAULT;\nmyPojo = parser.parse(schema, httpPart, MyPojo.class);\n"})}),"\n",(0,a.jsx)(t.p,{children:"In addition to defining format, the schema also allows for validations of the serialized form."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// Construct a POJO.\nMyPojo myPojo = ...;\n\n// Define a schema.\n// Serialized string must be no smaller than 100 characters.\nHttpPartSchema schema = HttpPartSchema.tByte().minLength(100).build();\n\n// Convert POJO to BASE64-encoded string.\nHttpPartSerializer serializer = OpenApiSerializer.DEFAULT;\nString httpPart;\ntry {\n    httpPart = serializer.serialize(schema, myPojo);\n} catch (SchemaValidationException e) {\n    // Oops, output too small.\n}\n\n// Convert BASE64-encoded string back into a POJO.\nHttpPartParser parser = OpenApiParser.DEFAULT;\ntry {\n    myPojo = parser.parse(schema, httpPart, MyPojo.class);\n} catch (SchemaValidationException e) {\n    // Oops, input too small.\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"It looks simple but the implementation is highly sophisticated being able to serialize and parse and validate using\ncomplex schemas."}),"\n",(0,a.jsx)(t.p,{children:"The next sections go more into depth on serializing and parsing various POJO types."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);