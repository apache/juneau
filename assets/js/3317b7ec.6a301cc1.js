"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[8888],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(96540);const s={},r=a.createContext(s);function o(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:t},e.children)}},87232:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"topics/02.11.05.OneWaySwaps","title":"One-way Swaps","description":"In the previous sections, we defined two-way swaps, meaning swaps where the original objects could be reconstructing","source":"@site/docs/topics/02.11.05.OneWaySwaps.md","sourceDirName":"topics","slug":"/topics/OneWaySwaps","permalink":"/docs/topics/OneWaySwaps","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/02.11.05.OneWaySwaps.md","tags":[],"version":"current","frontMatter":{"title":"One-way Swaps","slug":"OneWaySwaps"},"sidebar":"mainSidebar","previous":{"title":"2.11.4. Per-media-type Swaps","permalink":"/docs/topics/02.11.04.PerMediaTypeSwaps"},"next":{"title":"2.11.6. @Swap Annotation","permalink":"/docs/topics/SwapAnnotation"}}');var s=n(74848),r=n(28453);const o={title:"One-way Swaps",slug:"OneWaySwaps"},i=void 0,c={},p=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"In the previous sections, we defined two-way swaps, meaning swaps where the original objects could be reconstructing\nduring parsing.\nHowever, there are certain kinds of objects that we may want to support for serializing but that are not possible to\nreconstruct during parsing.\nFor these, we can use one-way object swaps."}),"\n",(0,s.jsxs)(t.p,{children:["A one-way swap is simply an object transform that only implements the ",(0,s.jsx)(t.code,{children:"swap()"})," method.\nThe ",(0,s.jsx)(t.code,{children:"unswap()"})," method is simply left unimplemented."]}),"\n",(0,s.jsxs)(t.p,{children:["An example of a one-way swaps would be one that allows ",(0,s.jsx)(t.code,{children:"Iterators"})," to be serialized as JSON arrays.\nIt can make sense to be able to render ",(0,s.jsx)(t.code,{children:"Iterators"})," as arrays but in general it's not possible to reconstruct an\n",(0,s.jsx)(t.code,{children:"Iterator"})," during parsing."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"public class IteratorSwap extends ObjectSwap {\n    @Override /* ObjectSwap */\n    public List swap(Iterator iterator) {\n        List list = new LinkedList();\n        while (iterator.hasNext())\n            list.add(iterator.next());\n        return list;\n    }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Here is an example of our one-way swap being used.\nNote that trying to parse the original object will cause a ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/parser/ParseException.html",target:"_blank",children:"ParseException"})," to be thrown."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'// Create a JSON serializer that can serialize Iterators.\nWriterSerializer serializer = JsonSerializer.create().simple().swaps(IteratorSwap.class).build();\n\n// Construct an iterator we want to serialize.\nIterator iterator = JsonList.of(1,2,3).iterator();\n\n// Serialize our Iterator\nString json = serializer.serialize(iterator);\t\t// Produces "[1,2,3]"\n\n// Try to parse it.\nReaderParser parser = JsonParser.create().swaps(IteratorSwap.class).build();\niterator = parser.parse(json, Iterator.class);\t\t// Throws ParseException!!!\n'})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);