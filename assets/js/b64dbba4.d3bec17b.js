"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[8380],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(96540);const a={},t=r.createContext(a);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},35048:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"topics/02.06.00.ContextSettings","title":"Context Settings","description":"Serializers and parsers have a wide variety of configurable settings.","source":"@site/docs/topics/02.06.00.ContextSettings.md","sourceDirName":"topics","slug":"/topics/ContextSettings","permalink":"/docs/topics/ContextSettings","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/02.06.00.ContextSettings.md","tags":[],"version":"current","frontMatter":{"title":"Context Settings","slug":"ContextSettings"},"sidebar":"mainSidebar","previous":{"title":"2.5. HTTP Part Serializers/Parsers","permalink":"/docs/topics/HttpPartSerializersParsers"},"next":{"title":"2.7. Context Annotations","permalink":"/docs/topics/ContextAnnotations"}}');var a=s(74848),t=s(28453);const i={title:"Context Settings",slug:"ContextSettings"},o=void 0,l={},c=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Serializers and parsers have a wide variety of configurable settings.\nTheir builders all extend from the ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/BeanContext.Builder.html",target:"_blank",children:"BeanContext.Builder"})," class\nthat allows you to easily construct new instances from scratch or build upon existing instances."]}),"\n",(0,a.jsx)(n.p,{children:"For example, the following code shows how to configure a JSON serializer:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"WriterSerializer serializer = JsonSerializer\n    .create()          // Create a JsonSerializer.Builder\n    .simpleMode()      // Simple mode\n    .ws()              // Use whitespace\n    .sq()              // Use single quotes\n    .sortProperties()  // Sort bean properties by name\n    .build();          // Create a JsonSerializer\n"})}),"\n",(0,a.jsx)(n.p,{children:"However, each of the serializers and parsers already contain reusable instances with common configurations."}),"\n",(0,a.jsx)(n.p,{children:"For example, JSON has the following predefined reusable serializers and parsers:"}),"\n",(0,a.jsxs)("tree",{children:[(0,a.jsx)("node-0",{children:(0,a.jsx)("java-class",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/JsonSerializer.html",target:"_blank",children:"JsonSerializer"})})}),(0,a.jsxs)("node-1",{children:[(0,a.jsx)("javac-field",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/JsonSerializer.html#DEFAULT",target:"_blank",children:"DEFAULT"})}),(0,a.jsx)("javac-field",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/JsonSerializer.html#DEFAULT_READABLE",target:"_blank",children:"DEFAULT_READABLE"})})]}),(0,a.jsx)("node-0",{children:(0,a.jsx)("java-class",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/Json5Serializer.html",target:"_blank",children:"Json5Serializer"})})}),(0,a.jsxs)("node-1",{children:[(0,a.jsx)("javac-field",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/Json5Serializer.html#DEFAULT",target:"_blank",children:"DEFAULT"})})," ",(0,a.jsx)("javac-field",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/Json5Serializer.html#DEFAULT_READABLE",target:"_blank",children:"DEFAULT_READABLE"})})]}),(0,a.jsx)("node-0",{children:(0,a.jsx)("java-class",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/JsonParser.html",target:"_blank",children:"JsonParser"})})}),(0,a.jsxs)("node-1",{children:[(0,a.jsx)("javac-field",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/JsonParser.html#DEFAULT",target:"_blank",children:"DEFAULT"})})," ",(0,a.jsx)("javac-field",{children:(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/json/JsonParser.html#DEFAULT_STRICT",target:"_blank",children:"DEFAULT_STRICT"})})]})]}),"\n",(0,a.jsx)(n.p,{children:"These can be used directly, as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Serialize a POJO to LAX JSON.\nString json = Json5Serializer.DEFAULT.serialize(myPojo);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For performance reasons, serializers and parsers are immutable.\nHowever, they can be 'copied' and modified using the ",(0,a.jsx)(n.code,{children:"copy()"})," method."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Clone and customize an existing serializer.\nWriterSerializer serializer = Json5Serializer.DEFAULT\n    .copy()          // Create a new builder with copied settings.\n    .quoteChar('\"')  // Use a different quote character.\n    .build();\n"})}),"\n",(0,a.jsx)(n.p,{children:"Default values for configurable settings can be set globally using either system properties or environment variables."}),"\n",(0,a.jsxs)(n.p,{children:["For example, the default ",(0,a.jsx)(n.code,{children:"useWhitespace"})," setting can be set by either the system property\n",(0,a.jsx)(n.code,{children:"WriterSerializer.useWhitespace"})," or environment variable ",(0,a.jsx)(n.code,{children:"WRITERSERIALIZER_USEWHITESPACE"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The builder setters will identify when default values can be set this way."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);