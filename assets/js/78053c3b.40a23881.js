"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[4438],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(96540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},58555:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"topics/13.06.00.Config","title":"Config","description":"In Config, we described how to associate a configuration file with your microservice.","source":"@site/docs-staging/topics/13.06.00.Config.md","sourceDirName":"topics","slug":"/topics/13.06.00.Config","permalink":"/docs/topics/13.06.00.Config","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/13.06.00.Config.md","tags":[],"version":"current","frontMatter":{"title":"Config"},"sidebar":"tutorialSidebar","previous":{"title":"13.5. Predefined Resource Classes","permalink":"/docs/topics/13.05.00.PredefinedResourceClasses"},"next":{"title":"13.7. Jetty XML","permalink":"/docs/topics/13.07.00.JettyXml"}}');var i=t(74848),o=t(28453);const a={title:"Config"},r=void 0,l={},c=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"In Config, we described how to associate a configuration file with your microservice.\nIn this section we describe how that configuration can be used to customize the behavior or your REST resource classes."}),"\n",(0,i.jsxs)(n.p,{children:["The most common usage for the configuration file is to reference values using the ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/config/vars/ConfigVar.html",children:"$C"})," variable in annotations.\nFor example, the ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/config/DefaultConfig.html",children:"DefaultConfig"})," interface that defines\nthe annotations that control the look-and-feel of classes that extend from ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/servlet/BasicRestServlet.html",children:"BasicRestServlet"})," use several ",(0,i.jsx)(n.code,{children:"$C"})," variables to externalize values:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Rest(\n    ...\n    // These are static files that are served up by the servlet under the specified sub-paths.\n    // For example, "/servletPath/htdocs/javadoc.css" resolves to the file "[servlet-package]/htdocs/javadoc.css"\n    // By default, we define static files through the external configuration file.\n    staticFiles="$C{REST/staticFiles}"\n)\n// HTML-page specific settings\n@HtmlDocConfig(\n\n    // Default page header contents.\n    header={\n        "$RS{title}",  // Use @Rest(title)\n        "$RS{operationSummary,description}", // Use either @RestOp(summary) or @Rest(description)\n        "$C{REST/header}"  // Extra header HTML defined in external config file.\n    },\n\n    // Default stylesheet to use for the page.\n    // Can be overridden from external config file.\n    // Default is DevOps look-and-feel (aka Depression look-and-feel).\n    stylesheet="$C{REST/theme,servlet:/htdocs/themes/devops.css}",\n\n    // Default contents to add to the  section of the HTML page.\n    // Use it to add a favicon link to the page.\n    head={\n        ""\n    },\n\n    // No default page footer contents.\n    // Can be overridden from external config file.\n    footer="$C{REST/footer}",\n    ...\n)\npublic interface BasicRestConfig {}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["These values in turn are pulled from the external configuration file shown below.\nNote that the configuration file can also contain ",(0,i.jsx)(n.code,{children:"$C"})," variables."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"#=======================================================================================================================\n# REST settings\n#=======================================================================================================================\n[REST]\n\n# Mappings to folders containing static files.\n# Can be in the working directory or in the classpath.\n\nstaticFiles = htdocs:files/htdocs\n\n# Stylesheet to use for HTML views.\n\ntheme = servlet:/htdocs/themes/devops.css\n\nheaderIcon = servlet:/htdocs/images/juneau.png\nheaderLink = http://juneau.apache.org\nfooterIcon = servlet:/htdocs/images/asf.png\nfooterLink = http://www.apache.org\n\nfavicon = $C{REST/headerIcon}\nheader =\n\nfooter =\n"})}),"\n",(0,i.jsx)(n.p,{children:"Configuration files can also be accessed programmatically."}),"\n",(0,i.jsx)(n.p,{children:"There are 3 primary ways of getting access to the config file:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/microservice/Microservice.html#getConfig()",children:"Microservice.getConfig()"})," - Any initialization-time variables can be used."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestContext.html#getConfig()",children:"RestContext.getConfig()"})," - Any initialization-time variables can be used."]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{title:"Example usage",type:"tip",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"#----------------------------------\n# Configuration for MyHelloResource\n#----------------------------------\n[MyHelloResource]\ngreeting = Hello world!\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'#---------------------------------\n# Contents of MyHelloResource.java\n#---------------------------------\n@Rest(...)\npublic class MyHelloResource extends BasicRestServlet {\n    private String greeting;\n\n    // Or access config file in servlet init method.\n    @Override /* Servlet */\n    public void init() {\n        Config config = getContext().getConfig();\n        this.greeting = config.getString("MyHelloResource/greeting");\n    }\n}\n'})})]}),"\n",(0,i.jsxs)(n.p,{children:["Additional user-defined variables at the servlet level can be defined by adding a\n",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/annotation/RestInit.html",children:"RestInit"})," hook method\nand using the  ",(0,i.jsx)(n.code,{children:"RestContext.Builder.vars(Class...)"})," method."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/rest/RestRequest.html#getConfig()",children:"RestRequest.getConfig()"})}),"\n",(0,i.jsx)(n.li,{children:"An instance method to access it from inside a REST method."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Any initialization-time or request-time variables can be used."}),"\n",(0,i.jsxs)(n.admonition,{title:"Example usage",type:"tip",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"#----------------------------------\n# Configuration for MyHelloResource\n#----------------------------------\n[MyHelloResource]\ngreeting = Hello $RP{person}! // $RP is RequestPathVar\nlocalizedGreeting = $L{HelloMessage,$RP{person}} // $L is LocalizationVar with args\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'#---------------------------------\n# Contents of MyHelloResource.java\n#---------------------------------\n@Rest(\n    path="/hello",\n    messages="nls/Messages",\n    ...\n)\npublic class MyHelloResource extends BasicRestServlet {\n\n    /** Standard hello message. */\n    @RestGet("/{person}")\n    public String sayHello(RestRequest req) {\n        return req.getConfig().getString("MyHelloResource/greeting");\n    }\n\n    /** Hello message in users language. */\n    @RestGet("/localized/{person}")\n    public String sayLocalizedHello(RestRequest req) {\n        return req.getConfig().getString("MyHelloResource/localizedGreeting");\n    }\n}\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"#---------------------------------------\n# Contents of nls/Messages_en.properties\n\n#---------------------------------------\nMyHelloResource.HelloMessage = Hello {0}!\n"})})]}),"\n",(0,i.jsx)(n.p,{children:"Additional user-defined variables can be defined at this level by overriding the oajr.RestContext.Builder.vars(Class...)\nmethod.\nThat sayLocalizedHello() example might need some explanation since there's a lot going on there."}),"\n",(0,i.jsxs)(n.p,{children:["Here's what happens when an HTTP call is made to ",(0,i.jsx)(n.code,{children:"GET /hello/localized/Bob"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The HTTP call matches the /hello path on the MyHelloResource class."}),"\n",(0,i.jsx)(n.li,{children:"The HTTP call matches the /localized/{person} path on the sayLocalizedHello() method."}),"\n",(0,i.jsx)(n.li,{children:'The request attribute person gets assigned the value "Bob".'}),"\n",(0,i.jsxs)(n.li,{children:['The call to req.getConfig().getString("MyHelloResource/localizedGreeting") finds the value ',(0,i.jsx)(n.code,{children:"$L{HelloMessage,$RP{person}}"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The arguments in the ",(0,i.jsx)(n.code,{children:"$L{}"})," variable get resolved, resulting in ",(0,i.jsx)(n.code,{children:"$L{HelloMessage,Bob}"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"$L{}"}),' variable gets resolved to the message "Hello ',0,'!" in the localized properties file of the servlet based on the Accept-Language header on the request.']}),"\n",(0,i.jsx)(n.li,{children:'The arguments get replaced in the message resulting in "Hello Bob!".'}),"\n",(0,i.jsx)(n.li,{children:'The resulting message "Hello Bob!" is returned as a POJO to be serialized to whatever content type was specified on the Accept header on the request.'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This particular example is needlessly complex but it gives an idea of how variables can be used recursively to produce\nsophisticated results"}),"\n",(0,i.jsx)(n.admonition,{title:"See Also",type:"info",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"juneau-config"})})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);