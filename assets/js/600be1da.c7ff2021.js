"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[8560],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},67275:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"release-notes/5.1.0.03","title":"Release 5.1.0.3","description":"Date: Jun 28, 2014","source":"@site/docs-staging/release-notes/5.1.0.03.md","sourceDirName":"release-notes","slug":"/release-notes/5.1.0.03","permalink":"/docs/release-notes/5.1.0.03","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs/docs-staging/release-notes/5.1.0.03.md","tags":[],"version":"current","frontMatter":{"title":"Release 5.1.0.3"},"sidebar":"mainSidebar","previous":{"title":"5.1.0.04","permalink":"/docs/release-notes/5.1.0.04"},"next":{"title":"5.1.0.02","permalink":"/docs/release-notes/5.1.0.02"}}');var r=t(74848),i=t(28453);const a={title:"Release 5.1.0.3"},o="Release 5.1.0.3",l={},d=[{value:"Core API updates",id:"core-api-updates",level:3},{value:"REST Server API updates",id:"rest-server-api-updates",level:3}];function c(e){const n={a:"a",code:"code",del:"del",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"release-5103",children:"Release 5.1.0.3"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Date:"})," Jun 28, 2014"]}),"\n",(0,r.jsx)(n.p,{children:"Juno 5.1.0.3 is a moderate update."}),"\n",(0,r.jsx)(n.h3,{id:"core-api-updates",children:"Core API updates"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Ability to detect and use non-public bean classes, getters/setters, and fields using the following new properties:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.del,{children:"BeanContext.BEAN_beanConstructorVisibility"})," - Control which bean constructors are visible to Juno."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.del,{children:"BeanContext.BEAN_beanClassVisibility"})," - Control which bean classes are interpreted as beans to Juno."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.del,{children:"BeanContext.BEAN_beanFieldVisibility"})," - Control which fields are visible to Juno as bean properties."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.del,{children:"BeanContext.BEAN_beanMethodVisibility"})," - Control which getters/setters are visible to Juno as bean properties."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Removed ",(0,r.jsx)(n.code,{children:"BeanContext.INCLUDE_BEAN_FIELD_PROPERTIES"})," and ",(0,r.jsx)(n.code,{children:"BeanContext.INCLUDE_BEAN_METHOD_PROPERTIES"})," properties, since\nignoring fields and methods can be accomplished by setting the appropriate properties above to ",(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/Visibility.html#NONE",children:"Visibility.NONE"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Also, the ",(0,r.jsx)(n.del,{children:"@BeanProperty"})," annotation can now be used on non-public fields/getters/setters to override the default\nbehavior defined by the ",(0,r.jsx)(n.code,{children:"VISIBILITY"})," properties identified above.\nThis is a convenient way of identifying protected or private fields or methods as bean properties.\nPreviously, you could only identify public fields/getters/setters using this annotation."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["New ",(0,r.jsx)(n.del,{children:"BeanContext.BEAN_useJavaBeanIntrospector"})," property that lets Juno use the Java bean ",(0,r.jsx)(n.code,{children:"Introspector"})," class to determine bean properties. In the previous release, the method for determining bean properties was a mixture of Juno-based and Introspector-based. Now it's either pure Juno-based or pure Introspector-based. The result is considerably cleaner code and consistent behavior."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["New ",(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/BeanIgnore.html",children:"@BeanIgnore"})," annotation. Replaces the previous ",(0,r.jsx)(n.del,{children:"@BeanProperty(hidden=true)"})," annotation for ignoring bean properties. Can also be used on classes that look like beans so that they're not treated as beans."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Support for parsing into non-static member classes. This applies to all parsers."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["New ",(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/json/annotation/Json.html#wrapperAttr()",children:"@Json(wrapperAttr)"})," annotation that automatically wraps beans and objects in a wrapper attribute when serializing to or parsing from JSON."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Changed the default ordering of bean properties to be in parent-to-child class order."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["New ",(0,r.jsx)(n.del,{children:"BeanFilter.readProperty(Object,String,Object)"})," and ",(0,r.jsx)(n.del,{children:"BeanFilter.writeProperty(Object,String,Object)"})," methods added to ",(0,r.jsx)(n.del,{children:"BeanFilter"})," class to allow individualized serialization and parsing behavior on a class-by-class basis."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Eliminated previous restriction where bean subtype attributes had to be listed first in JSON objects when using the ",(0,r.jsx)(n.del,{children:"Bean.subTypeProperty()"})," annotation. The previous behavior was not strictly JSON-compliant since JSON objects are supposed to consist of unordered lists of key/value pairs. While targeted for JSON, the restriction is also lifted for all other parsers."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["New fluent-style ",(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanMap.html#load(String)",children:"BeanMap.load()"})," methods for initializing bean maps."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/html/HtmlDocSerializer.html",children:"HtmlDocSerializer"})," will now embed the data portion of the output in a ",(0,r.jsx)(n.code,{children:"<div id='data'>"})," element to make it easier to extract the data portion of the page in Javascript in browsers."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"rest-server-api-updates",children:"REST Server API updates"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["New ",(0,r.jsx)(n.del,{children:"RestRequest.getJavaMethod()"})," method for getting access to the method used to handle a request. Useful for accessing the method name or annotations during requests, such as in calls to ",(0,r.jsx)(n.del,{children:"RestGuard.guard(RestRequest,RestResponse)"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Fixed bug when using Jetty where you tried to read text input after a header was written."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Added new string variables ",(0,r.jsx)(n.code,{children:"$A{...}"})," (request attributes) and ",(0,r.jsx)(n.code,{children:"$P{...}"})," (request parameters) to ",(0,r.jsx)(n.code,{children:"RestServlet.createRequestVarResolver(RestRequest)"}),"."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);