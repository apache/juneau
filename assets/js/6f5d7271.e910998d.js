"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[6763],{28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var t=a(96540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},86630:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"topics/02.04.04.BeanpAnnotation","title":"@Beanp Annotation","description":"The @Beanp annotation is used to tailor how individual bean","source":"@site/docs/topics/02.04.04.BeanpAnnotation.md","sourceDirName":"topics","slug":"/topics/BeanpAnnotation","permalink":"/docs/topics/BeanpAnnotation","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/02.04.04.BeanpAnnotation.md","tags":[],"version":"current","frontMatter":{"title":"@Beanp Annotation","slug":"BeanpAnnotation"},"sidebar":"mainSidebar","previous":{"title":"2.4.3. @Bean Annotation","permalink":"/docs/topics/BeanAnnotation"},"next":{"title":"2.4.5. @Beanc Annotation","permalink":"/docs/topics/BeancAnnotation"}}');var i=a(74848),s=a(28453);const o={title:"@Beanp Annotation",slug:"BeanpAnnotation"},r=void 0,l={},p=[];function c(e){const n={admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Beanp.html",target:"_blank",children:"@Beanp"})," annotation is used to tailor how individual bean\nproperties are interpreted by the framework."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Beanp.html#name()",target:"_blank",children:"@Beanp(name)"})," annotation is used to override the name\nof the bean property."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class MyBean {\n    @Beanp(name="Bar")\n    public String getFoo() {...}\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Name.html",target:"_blank",children:"@Name"})," annotation is a shortcut for specifying a bean property\nname:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class MyBean {\n    @Name("Bar")\n    public String getFoo() {...}\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If the ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/BeanContext.Builder.html#beanFieldVisibility(org.apache.juneau.Visibility)",target:"_blank",children:"beanFieldVisibility"}),"\nsetting on the bean context excludes this field (e.g.\nthe visibility is set to the default of PUBLIC but the field is PROTECTED), this annotation can be used to force the\nfield to be identified as a property."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class MyBean {\n    @Beanp\n    protected String getFoo() {...}\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The bean property named ",(0,i.jsx)(n.code,{children:"*"}),' is the designated "dynamic property" which allows for "extra" bean properties not otherwise\ndefined.\nThis is similar in concept to the Jackson ',(0,i.jsx)(n.code,{children:"@JsonGetterAll"})," and ",(0,i.jsx)(n.code,{children:"@JsonSetterAll"})," annotations but generalized for all\nsupported marshall languages.\nThe primary purpose is for backwards compatibility in parsing newer streams with addition information into older beans."]}),"\n",(0,i.jsx)(n.p,{children:"The following shows various ways of using dynamic bean properties."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Option #1 - A simple public Map field.\n// The field name can be anything.\npublic class BeanWithDynaField {\n\n    @Beanp("*")\n    public Map extraStuff = new LinkedHashMap();\n}\n\n// Option #2 - Getters and setters.\n// Method names can be anything.\n// Getter must return a Map with String keys.\n// Setter must take in two arguments, a String and Object.\npublic class BeanWithDynaMethods {\n\n    @Beanp("*")\n    public Map getMyExtraStuff() {\n        ...\n    }\n\n    @Beanp("*")\n    public void setAnExtraField(String name, Object value) {\n        ...\n    }\n}\n\n// Option #3 - Getter only.\n// Properties will be added through the getter.\npublic class BeanWithDynaGetterOnly {\n\n    @Beanp("*")\n    public Map getMyExtraStuff() {\n        ...\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Similar rules apply for value types and swaps.\nThe property values optionally can be any serializable type or use swaps."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// A serializable type other than Object.\npublic class BeanWithDynaFieldWithListValues {\n\n    @Beanp("*")\n    public Map> getMyExtraStuff() {\n        ...\n    }\n}\n\n// A swapped value.\npublic class BeanWithDynaFieldWithSwappedValues {\n\n    @Beanp(name="*", swap=TemporalCalendarSwap.IsoOffsetDateTime.class)\n    public Map getMyExtraStuff() {\n        ...\n    }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Note that if you're not interested in these additional properties, you can also use the ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/BeanContext.Builder.html#ignoreUnknownBeanProperties()",target:"_blank",children:"ignoreUnknownBeanProperties"})," setting to ignore values that don't fit into existing properties."]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Beanp.html#value()",target:"_blank",children:"@Beanp(value)"})," annotation is a synonym for ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Beanp.html#name()",target:"_blank",children:"@Beanp(name)"}),".\nUse it in cases where you're only specifying a name so that you can shorten your annotation."]}),"\n",(0,i.jsx)(n.p,{children:"The following annotations are equivalent:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Beanp(name="foo")\n\n@Beanp("foo")\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Beanp.html#type()",target:"_blank",children:"@Beanp(type)"})," annotation is used to identify a\nspecialized class type for a generalized property.\nNormally the type is inferred through reflection of the field type or getter return type.\nHowever, you'll want to specify this value if you're parsing beans where the bean property class is an interface or\nabstract class to identify the bean type to instantiate.\nOtherwise, you may cause an ",(0,i.jsx)("a",{href:"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/InstantiationException.html",target:"_blank",children:"InstantiationException"})," when trying to\nset these fields."]}),"\n",(0,i.jsx)(n.p,{children:"This property must denote a concrete class with a no-arg constructor."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class MyBean {\n\n    // Identify concrete type as a HashMap.\n    @Beanp(type=HashMap.class)\n    public Map p1;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Beanp.html#params()",target:"_blank",children:"@Beanp(params)"})," annotation is for bean properties of\ntype map or collection.\nIt's used to identify the class types of the contents of the bean property object when the general parameter types are\ninterfaces or abstract classes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public class MyBean {\n\n    // This is a HashMap.\n    @Beanp(type=HashMap.class, params={String.class,Integer.class})\n    public Map p1;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Beanp.html#properties()",target:"_blank",children:"@Beanp(properties)"})," annotation is used to limit\nwhich child properties are rendered by the serializers."]}),"\n",(0,i.jsx)(n.p,{children:"It can be used on any of the following bean property types:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Beans - Only render the specified properties of the bean."}),"\n",(0,i.jsx)(n.li,{children:"Maps - Only render the specified entries in the map."}),"\n",(0,i.jsx)(n.li,{children:"Bean/Map arrays - Same but applied to each element in the array."}),"\n",(0,i.jsx)(n.li,{children:"Bean/Map collections - Same but applied to each element in the collection."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'public class MyClass {\n    // Only render \'f1\' when serializing this bean property.\n    @Beanp(properties={"f1"})\n    public MyChildClass x1 = new MyChildClass();\n}\n\npublic class MyChildClass {\n    public int f1 = 1;\n    public int f2 = 2;\n}\n\n// Renders "{x1:{f1:1}}"\nString json = Json.of(new MyClass());\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)("a",{href:"/site/apidocs/org/apache/juneau/annotation/Beanp.html#format()",target:"_blank",children:"@Beanp(format)"})," annotation specifies a String format\nfor converting a bean property value to a formatted string."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Serialize a float as a string with 2 decimal places.\n@Beanp(format="$%.2f")\npublic float price;\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);