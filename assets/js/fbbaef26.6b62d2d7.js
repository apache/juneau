"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[1949],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(96540);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},85413:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"topics/09.07.00.HandlingFormPosts","title":"Form Posts","description":"HTTP form posts can be handled two ways:","source":"@site/docs/topics/09.07.00.HandlingFormPosts.md","sourceDirName":"topics","slug":"/topics/HandlingFormPosts","permalink":"/docs/topics/HandlingFormPosts","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/09.07.00.HandlingFormPosts.md","tags":[],"version":"current","frontMatter":{"title":"Form Posts","slug":"HandlingFormPosts"},"sidebar":"mainSidebar","previous":{"title":"9.6. Marshalling","permalink":"/docs/topics/Marshalling"},"next":{"title":"9.8. Guards","permalink":"/docs/topics/Guards"}}');var a=n(74848),i=n(28453);const o={title:"Form Posts",slug:"HandlingFormPosts"},s=void 0,l={},c=[{value:"Multi-part Form Posts",id:"multi-part-form-posts",level:4}];function p(e){const t={admonition:"admonition",code:"code",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"HTTP form posts can be handled two ways:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["By parsing the entire HTTP body into a POJO using the registered ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/urlencoding/UrlEncodingParser.html",target:"_blank",children:"UrlEncodingParser"})]}),"\n",(0,a.jsx)(t.li,{children:"By access the form post entries as HTTP parts."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["The following example shows the first approach of handling an ",(0,a.jsx)(t.code,{children:"application/x-www-form-urlencoded"})," request of the form ",(0,a.jsx)(t.code,{children:"aString=foo&aNumber=123&aDate=2001-07-04T15:30:45Z"})," and loading it into a simple bean."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"// A simple bean.\npublic static class FormInputBean {\n    public String aString;\n    public int aNumber;\n    @Swap(TemporalCalendarSwap.IsoLocalDateTime.class)\n    public Calendar aDate;\n}\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Rest(...)\npublic class MyRestResource extends BasicRestServlet {\n\n    // Our form input endpoint.\n    @RestPost("/")\n    public Object doPost(@Content FormInputBean input) {\n        // Just mirror back the request\n        return input;\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"The next example shows handling it as individual parts:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'// Our form input endpoint.\n@RestPost("/")\npublic Object doPost(\n    @FormData("aString") String aString,\n    @FormData("aNumber") int aNumber,\n    @FormData("aDate") Calendar aDate) {\n    ...\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"The advantage to the form input bean is that it can handle any of the parsable types (e.g.\nJSON, XML...) in addition to URL-Encoding while the latter approach only supports URL-Encoding."}),"\n",(0,a.jsxs)(t.admonition,{type:"warning",children:[(0,a.jsx)(t.p,{children:"If you're using form input beans:"}),(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["DO NOT use the ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/http/annotation/FormData.html",target:"_blank",children:"@FormData"})," attribute or ",(0,a.jsx)("a",{href:"https://jakarta.ee/specifications/servlet/6.0/apidocs/jakarta/servlet/http/HttpServletRequest.html#getParameter(String)",target:"_blank",children:"HttpServletRequest.getParameter(String)"})," method since this will cause the underlying JEE servlet to parse the HTTP body as a form post. Your input bean will end up being null since there won't be any content left after the servlet has parsed the body of the request."]}),"\n",(0,a.jsxs)(t.li,{children:["This applies to WHENEVER you use ",(0,a.jsx)(t.code,{children:"@Content"})," or ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/rest/RestRequest.html#getContent()",target:"_blank",children:"RestRequest.getContent()"}),". If you want to be able to consume url-encoded form post bodies as POJOs in Spring Boot, you'll need to add the following Spring Bean to your configuration to prevent Spring Boot from automatically consuming the body itself:"]}),"\n"]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@SpringBootApplication\n@Controller\npublic class SpringBootAppConfig {\n\n    @Bean\n    public FilterRegistrationBean registration(HiddenHttpMethodFilter filter) {\n        FilterRegistrationBean reg = new FilterRegistrationBean(filter);\n        reg.setEnabled(false);\n        return reg;\n    }\n}\n"})})]}),"\n",(0,a.jsx)(t.h4,{id:"multi-part-form-posts",children:"Multi-part Form Posts"}),"\n",(0,a.jsx)(t.p,{children:"The Juneau framework does not natively support multipart form posts.\nHowever, it can be done in conjunction with the Apache Commons File Upload library or through the Servlet 3.0 API\ndirectly.\nThe following is an example that uses the File Upload library to allow files to be uploaded as multipart form posts."}),"\n",(0,a.jsx)(t.admonition,{title:"Example",type:"tip",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Rest(\n    path="/tempDir"\n)\npublic class TempDirResource extends DirectoryResource {\n\n    @RestPost(path="/upload", matchers=TempDirResource.MultipartFormDataMatcher.class)\n    public Redirect uploadFile(RestRequest req) throws Exception {\n        ServletFileUpload upload = new ServletFileUpload();\n        FileItemIterator iter = upload.getItemIterator(req);\n        while (iter.hasNext()) {\n            FileItemStream item = iter.next();\n            if (item.getFieldName().equals("contents")) {\n                File file = new File(getRootDir(), item.getName());\n                IOPipe.create(item.openStream(), new FileOutputStream(file)).closeOut().run();\n            }\n        }\n        return new Redirect(); // Redirect to the servlet root.\n    }\n\n    /** Causes a 404 if POST isn\'t multipart/form-data */\n    public static class MultipartFormDataMatcher extends RestMatcher {\n\n        @Override /* RestMatcher */\n        public boolean matches(RestRequest req) {\n            String contentType = req.getContentType();\n            return contentType != null && contentType.startsWith("multipart/form-data");\n        }\n    }\n'})})}),"\n",(0,a.jsxs)(t.p,{children:["The following shows using the ",(0,a.jsx)(t.code,{children:"HttpServletRequest.getParts()"})," method to retrieve multi-part form posts when using Jetty.\nThis example is pulled from the PetStore application."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@RestPost\npublic SeeOtherRoot uploadFile(RestRequest req) throws Exception {\n\n    // Required for Jetty.\n    MultipartConfigElement mce = new MultipartConfigElement((String)null);\n    req.setAttribute("org.eclipse.jetty.multipartConfig", mce);\n\n    String id = UUID.randomUUID().toString();\n    BufferedImage img = null;\n    for (Part part : req.getParts()) {\n        switch (part.getName()) {\n            case "id":\n                id = IOUtils.read(part.getInputStream());\n                break;\n            case "file":\n                img = ImageIO.read(part.getInputStream());\n        }\n    }\n    addPhoto(id, img);\n    return new SeeOtherRoot(); // Redirect to the servlet root.\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);