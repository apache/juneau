"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[182],{10589:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"topics/12.10.00.Listeners","title":"Listeners","description":"As mentioned previously, the lifecycle methods for the Microservice class are explicitly defined as non-final so that they can be overridden by subclasses.","source":"@site/docs-staging/topics/12.10.00.Listeners.md","sourceDirName":"topics","slug":"/topics/12.10.00.Listeners","permalink":"/docs/topics/12.10.00.Listeners","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/12.10.00.Listeners.md","tags":[],"version":"current","frontMatter":{"title":"Listeners"},"sidebar":"tutorialSidebar","previous":{"title":"12.9. Console Commands","permalink":"/docs/topics/12.09.00.ConsoleCommands"},"next":{"title":"13.1. juneau-microservice-jetty Basics","permalink":"/docs/topics/13.01.00.JuneauMicroserviceJettyBasics"}}');var r=n(74848),c=n(28453);const o={title:"Listeners"},t=void 0,a={},d=[];function l(e){const i={a:"a",code:"code",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["As mentioned previously, the lifecycle methods for the ",(0,r.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/Microservice.html",children:"Microservice"})," class are explicitly defined as non-final so that they can be overridden by subclasses.\nIn addition to this support, an interface for defining event listeners for your microservice:"]}),"\n",(0,r.jsxs)("tree",{children:[(0,r.jsx)("node-0",{children:(0,r.jsx)("java-class",{children:(0,r.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/Microservice/Builder.html",children:"Microservice.Builder"})})}),(0,r.jsx)("node-1",{children:(0,r.jsx)("java-method",{children:(0,r.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/Microservice/Builder.html#listener(MicroserviceListener)",children:"listener(MicroserviceListener)"})})}),(0,r.jsx)("node-0",{children:(0,r.jsx)("java-interface",{children:(0,r.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/MicroserviceListener.html",children:"MicroserviceListener"})})}),(0,r.jsxs)("node-1",{children:[(0,r.jsx)("javac-method",{children:(0,r.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/MicroserviceListener.html#onStart(Microservice)",children:"onStart(Microservice)"})})," ",(0,r.jsx)("javac-method",{children:(0,r.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/MicroserviceListener.html#onStop(Microservice)",children:"onStop(Microservice)"})})," ",(0,r.jsx)("javac-method",{children:(0,r.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/MicroserviceListener.html#onConfigChange(Microservice,ConfigEvents)",children:"onConfigChange(Microservice,ConfigEvents)"})})]}),(0,r.jsx)("node-0",{children:(0,r.jsx)("java-class",{children:(0,r.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/BasicMicroserviceListener.html",children:"BasicMicroserviceListener"})})})]}),"\n",(0,r.jsx)(i.p,{children:"This listener API can be used for listening for and reacting to configuration changes on the file system."}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'public class MyMicroserviceListener extends BasicMicroserviceListener {\n\n    @Override /* MicroserviceListener */\n    public void onConfigChange(Microservice microservice, ConfigEvents events) {\n\n        // Restart the microservice if anything was modified in one of our sections\n        if (events.isSectionChanged("MySection"))\n            microservice.stop().start();\n    }\n}\n'})}),"\n",(0,r.jsxs)(i.p,{children:["Note that the ",(0,r.jsx)(i.a,{href:"../apidocs/org/apache/juneau/microservice/Microservice.html#onConfigChange(ConfigEvents)",children:"Microservice.onConfigChange(ConfigEvents)"})," method can also be overridden to react to configuration changes as well:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'public class MyMicroservice extends Microservice {\n\n    @Override /* MicroserviceListener */\n    public void onConfigChange(ConfigEvents events) {\n\n        // Restart the microservice if anything was modified in one of our sections\n        if (events.isSectionChanged("MySection"))\n            this.stop().start();\n    }\n}\n'})})]})}function h(e={}){const{wrapper:i}={...(0,c.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>t});var s=n(96540);const r={},c=s.createContext(r);function o(e){const i=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:i},e.children)}}}]);