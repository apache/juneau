"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[9609],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(96540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}},82566:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"topics/02.14.00.VirtualBeans","title":"Virtual Beans","description":"The BeanContext.Builder.disableInterfaceProxies()) setting (enabled by default) allows the Juneau parsers to parse content into virtual beans (bean interfaces without implementation classes).","source":"@site/docs-staging/topics/02.14.00.VirtualBeans.md","sourceDirName":"topics","slug":"/topics/02.14.00.VirtualBeans","permalink":"/docs/topics/02.14.00.VirtualBeans","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.14.00.VirtualBeans.md","tags":[],"version":"current","frontMatter":{"title":"Virtual Beans"},"sidebar":"mainSidebar","previous":{"title":"2.13.2. Bean Sub Types","permalink":"/docs/topics/02.13.02.BeanSubTypes"},"next":{"title":"2.15. Recursion","permalink":"/docs/topics/02.15.00.Recursion"}}');var s=t(74848),i=t(28453);const r={title:"Virtual Beans"},o=void 0,c={},l=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext/Builder.html#disableInterfaceProxies()",children:"BeanContext.Builder.disableInterfaceProxies()"})," setting (enabled by default) allows the Juneau parsers to parse content into virtual beans (bean interfaces without implementation classes)."]}),"\n",(0,s.jsx)(n.p,{children:"For example, the following code creates an instance of the specified unimplemented interface:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Our unimplemented interface\npublic interface Address {\n\n    String getStreet();\n    void setStreet(String value);\n\n    String getCity();\n    void setCity(String value);\n\n    StateEnum getState();\n    void setState(StateEnum value);\n\n    int getZip();\n    void setZip(int value);\n}\n\n// Our code\nAddress address = Json.to(\n    \"{street:'123 Main St', city:'Anywhere', state:'PR', zip:12345}\",\n    Address.class\n);\n\nint zip = address.getZip();\naddress.setState(StateEnum.NY);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Getter and setter values can be any ",(0,s.jsx)(n.a,{href:"/docs/topics/TODO",children:"TODO: parsable"})," values, even other virtual beans."]}),"\n",(0,s.jsxs)(n.p,{children:["Under-the-covers, a virtual bean is simply a proxy interface on top of an existing ",(0,s.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanMap.html",children:"BeanMap"})," instance.\nFrom a programmatic point-of-view, they're indistinguishable from real beans, and can be manipulated and serialized like\nany other bean."]}),"\n",(0,s.jsxs)(n.p,{children:["Virtual beans can also be created programmatically using the ",(0,s.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext.html",children:"BeanContext"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"Address address = BeanContext.DEFAULT.createSession().newBean(Address.class);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);