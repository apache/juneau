"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[6342],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(96540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},37574:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"topics/18.04.00.JuneauExamplesRestSpringboot","title":"juneau-examples-rest-springboot","description":"The juneau-examples-rest-springboot module demonstrates how to integrate Apache Juneau REST servers with Spring Boot for enterprise-grade microservice applications.","source":"@site/docs/topics/18.04.00.JuneauExamplesRestSpringboot.md","sourceDirName":"topics","slug":"/topics/JuneauExamplesRestSpringboot","permalink":"/docs/topics/JuneauExamplesRestSpringboot","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/18.04.00.JuneauExamplesRestSpringboot.md","tags":[],"version":"current","frontMatter":{"slug":"JuneauExamplesRestSpringboot"},"sidebar":"mainSidebar","previous":{"title":"18.3. juneau-examples-rest-jetty","permalink":"/docs/topics/JuneauExamplesRestJetty"},"next":{"title":"19.1. Security Basics","permalink":"/docs/topics/SecurityBasics"}}');var t=r(74848),s=r(28453);const o={slug:"JuneauExamplesRestSpringboot"},a="juneau-examples-rest-springboot",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"Example Implementation",id:"example-implementation",level:2},{value:"Main Application Class",id:"main-application-class",level:3},{value:"Key Features",id:"key-features",level:3},{value:"Spring Boot Integration Patterns",id:"spring-boot-integration-patterns",level:2},{value:"REST Resource as Spring Bean",id:"rest-resource-as-spring-bean",level:3},{value:"Dependency Injection in REST Resources",id:"dependency-injection-in-rest-resources",level:3},{value:"Servlet Registration",id:"servlet-registration",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Application Properties",id:"application-properties",level:3},{value:"YAML Configuration",id:"yaml-configuration",level:3},{value:"Running the Example",id:"running-the-example",level:2},{value:"Development Mode",id:"development-mode",level:3},{value:"Production Deployment",id:"production-deployment",level:3},{value:"Available Endpoints",id:"available-endpoints",level:2},{value:"Spring Boot Actuator Endpoints",id:"spring-boot-actuator-endpoints",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Profile-Based Configuration",id:"profile-based-configuration",level:3},{value:"Custom Configuration Properties",id:"custom-configuration-properties",level:3},{value:"Conditional Bean Creation",id:"conditional-bean-creation",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Deployment Options",id:"deployment-options",level:2},{value:"JAR Deployment",id:"jar-deployment",level:3},{value:"Docker Deployment",id:"docker-deployment",level:3},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:3},{value:"Monitoring and Management",id:"monitoring-and-management",level:2},{value:"Spring Boot Actuator",id:"spring-boot-actuator",level:3},{value:"Custom Health Indicators",id:"custom-health-indicators",level:3},{value:"Metrics Integration",id:"metrics-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Configuration Management",id:"configuration-management",level:3},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Security",id:"security",level:3},{value:"Related Documentation",id:"related-documentation",level:2},{value:"Source Code",id:"source-code",level:2},{value:"Contributing",id:"contributing",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"juneau-examples-rest-springboot",children:"juneau-examples-rest-springboot"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://github.com/apache/juneau/tree/master/juneau-examples/juneau-examples-rest-springboot",children:"juneau-examples-rest-springboot"})," module demonstrates how to integrate Apache Juneau REST servers with Spring Boot for enterprise-grade microservice applications."]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"This example shows how to leverage Spring Boot's powerful features while using Juneau's REST capabilities. It demonstrates Spring Boot integration patterns, dependency injection, and enterprise deployment scenarios."}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Java 17+"}),"\n",(0,t.jsx)(n.li,{children:"Maven 3.6+"}),"\n",(0,t.jsx)(n.li,{children:"Spring Boot 2.0+ (tested with Spring Boot 2.7+)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsx)(n.p,{children:"Add the following dependencies to your project:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.apache.juneau</groupId>\n    <artifactId>juneau-rest-server-springboot</artifactId>\n    <version>${juneau.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.juneau</groupId>\n    <artifactId>juneau-examples-rest</artifactId>\n    <version>${juneau.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <version>${spring.boot.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n    <version>${spring.boot.version}</version>\n</dependency>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"example-implementation",children:"Example Implementation"}),"\n",(0,t.jsx)(n.h3,{id:"main-application-class",children:"Main Application Class"}),"\n",(0,t.jsx)(n.p,{children:"The example demonstrates Spring Boot integration with Juneau REST:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package org.apache.juneau.examples.rest.springboot;\n\nimport org.apache.juneau.rest.annotation.*;\nimport org.apache.juneau.rest.springboot.*;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.builder.*;\nimport org.springframework.boot.web.servlet.*;\nimport org.springframework.context.annotation.*;\nimport org.springframework.stereotype.Controller;\n\n@SpringBootApplication\n@Controller\npublic class App {\n\n    public static void main(String[] args) {\n        try {\n            new SpringApplicationBuilder(App.class).run(args);\n            System.out.println("Initialized. App available on http://localhost:5000");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Bean\n    public RootResources getRootResources() {\n        return new RootResources();\n    }\n\n    @Bean\n    public HelloWorldResource getHelloWorldResource() {\n        return new HelloWorldResource();\n    }\n\n    @Bean\n    public HelloWorldMessageProvider getHelloWorldMessageProvider() {\n        return new HelloWorldMessageProvider("Hello Spring injection user!");\n    }\n\n    @Bean\n    public ServletRegistrationBean<jakarta.servlet.Servlet> getRootServlet(RootResources rootResources) {\n        return new ServletRegistrationBean<>(rootResources, "/*");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Spring Boot Integration"})," - Full Spring Boot auto-configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dependency Injection"})," - Spring's IoC container integration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bean Management"})," - REST resources as Spring beans"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Actuator Support"})," - Built-in monitoring and management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configuration Properties"})," - Spring Boot configuration support"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"spring-boot-integration-patterns",children:"Spring Boot Integration Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"rest-resource-as-spring-bean",children:"REST Resource as Spring Bean"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Bean\npublic HelloWorldResource getHelloWorldResource() {\n    return new HelloWorldResource();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dependency-injection-in-rest-resources",children:"Dependency Injection in REST Resources"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Rest(path="/hello")\npublic class HelloWorldResource extends SpringRestServlet {\n    \n    @Autowired\n    private HelloWorldMessageProvider messageProvider;\n    \n    @RestGet\n    public String getMessage() {\n        return messageProvider.getMessage();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"servlet-registration",children:"Servlet Registration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Bean\npublic ServletRegistrationBean<jakarta.servlet.Servlet> getRootServlet(RootResources rootResources) {\n    return new ServletRegistrationBean<>(rootResources, "/*");\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"application-properties",children:"Application Properties"}),"\n",(0,t.jsxs)(n.p,{children:["Configure the application using ",(0,t.jsx)(n.code,{children:"application.properties"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-properties",children:"# Server configuration\nserver.port=5000\nserver.servlet.context-path=/\n\n# Spring Boot configuration\nspring.application.name=juneau-examples-rest-springboot\nspring.profiles.active=dev\n\n# Juneau REST configuration\njuneau.rest.path=/api\njuneau.rest.serializers=JsonSerializer,XmlSerializer\njuneau.rest.parsers=JsonParser,XmlParser\n\n# Logging configuration\nlogging.level.org.apache.juneau=DEBUG\nlogging.level.org.springframework=INFO\n"})}),"\n",(0,t.jsx)(n.h3,{id:"yaml-configuration",children:"YAML Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Alternative YAML configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"server:\n  port: 5000\n  servlet:\n    context-path: /\n\nspring:\n  application:\n    name: juneau-examples-rest-springboot\n  profiles:\n    active: dev\n\njuneau:\n  rest:\n    path: /api\n    serializers:\n      - JsonSerializer\n      - XmlSerializer\n    parsers:\n      - JsonParser\n      - XmlParser\n\nlogging:\n  level:\n    org.apache.juneau: DEBUG\n    org.springframework: INFO\n"})}),"\n",(0,t.jsx)(n.h2,{id:"running-the-example",children:"Running the Example"}),"\n",(0,t.jsx)(n.h3,{id:"development-mode",children:"Development Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Clone the repository\ngit clone https://github.com/apache/juneau.git\ncd juneau\n\n# Build the project\nmvn clean package\n\n# Run the Spring Boot example\nmvn spring-boot:run -pl juneau-examples/juneau-examples-rest-springboot\n"})}),"\n",(0,t.jsx)(n.h3,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run with specific profile\njava -jar juneau-examples-rest-springboot.jar --spring.profiles.active=prod\n\n# Run with custom configuration\njava -jar juneau-examples-rest-springboot.jar --server.port=8080\n\n# Run with external configuration\njava -jar juneau-examples-rest-springboot.jar --spring.config.location=classpath:/application-prod.properties\n"})}),"\n",(0,t.jsx)(n.h2,{id:"available-endpoints",children:"Available Endpoints"}),"\n",(0,t.jsxs)(n.p,{children:["The application provides all REST examples from the ",(0,t.jsx)(n.a,{href:"https://github.com/apache/juneau/tree/master/juneau-examples/juneau-examples-rest",children:"juneau-examples-rest"})," module:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Root Resources"})," - ",(0,t.jsx)(n.code,{children:"GET /api/"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hello World"})," - ",(0,t.jsx)(n.code,{children:"GET /api/helloWorld"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Request Echo"})," - ",(0,t.jsx)(n.code,{children:"GET /api/requestEcho"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Photos"})," - ",(0,t.jsx)(n.code,{children:"GET /api/photos"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DTO Examples"})," - Various DTO demonstration endpoints"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"spring-boot-actuator-endpoints",children:"Spring Boot Actuator Endpoints"}),"\n",(0,t.jsx)(n.p,{children:"Additional Spring Boot management endpoints:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Health Check"})," - ",(0,t.jsx)(n.code,{children:"GET /actuator/health"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Application Info"})," - ",(0,t.jsx)(n.code,{children:"GET /actuator/info"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Metrics"})," - ",(0,t.jsx)(n.code,{children:"GET /actuator/metrics"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Environment"})," - ",(0,t.jsx)(n.code,{children:"GET /actuator/env"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"profile-based-configuration",children:"Profile-Based Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Configuration\n@Profile("dev")\npublic class DevConfig {\n    \n    @Bean\n    public HelloWorldMessageProvider devMessageProvider() {\n        return new HelloWorldMessageProvider("Hello from DEV environment!");\n    }\n}\n\n@Configuration\n@Profile("prod")\npublic class ProdConfig {\n    \n    @Bean\n    public HelloWorldMessageProvider prodMessageProvider() {\n        return new HelloWorldMessageProvider("Hello from PROD environment!");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-configuration-properties",children:"Custom Configuration Properties"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ConfigurationProperties(prefix = "juneau.rest")\npublic class JuneauRestProperties {\n    \n    private String path = "/api";\n    private List<String> serializers = Arrays.asList("JsonSerializer");\n    private List<String> parsers = Arrays.asList("JsonParser");\n    \n    // Getters and setters\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"conditional-bean-creation",children:"Conditional Bean Creation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Bean\n@ConditionalOnProperty(name = "juneau.rest.console.enabled", havingValue = "true")\npublic RestConsole getRestConsole() {\n    return new RestConsole();\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@SpringBootTest\n@AutoConfigureTestDatabase\nclass HelloWorldResourceTest {\n    \n    @Autowired\n    private HelloWorldResource helloWorldResource;\n    \n    @Test\n    void testGetMessage() {\n        String message = helloWorldResource.getMessage();\n        assertThat(message).isNotNull();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass RestIntegrationTest {\n    \n    @Autowired\n    private TestRestTemplate restTemplate;\n    \n    @Test\n    void testHelloWorldEndpoint() {\n        ResponseEntity<String> response = restTemplate.getForEntity("/api/helloWorld", String.class);\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"deployment-options",children:"Deployment Options"}),"\n",(0,t.jsx)(n.h3,{id:"jar-deployment",children:"JAR Deployment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create executable JAR\nmvn clean package\n\n# Run standalone\njava -jar target/juneau-examples-rest-springboot-${version}.jar\n"})}),"\n",(0,t.jsx)(n.h3,{id:"docker-deployment",children:"Docker Deployment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",children:'FROM openjdk:17-jre-slim\nCOPY target/juneau-examples-rest-springboot.jar app.jar\nEXPOSE 5000\nENTRYPOINT ["java", "-jar", "/app.jar"]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: juneau-springboot-example\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: juneau-springboot-example\n  template:\n    metadata:\n      labels:\n        app: juneau-springboot-example\n    spec:\n      containers:\n      - name: app\n        image: juneau-springboot-example:latest\n        ports:\n        - containerPort: 5000\n        env:\n        - name: SPRING_PROFILES_ACTIVE\n          value: "prod"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-management",children:"Monitoring and Management"}),"\n",(0,t.jsx)(n.h3,{id:"spring-boot-actuator",children:"Spring Boot Actuator"}),"\n",(0,t.jsx)(n.p,{children:"Enable comprehensive monitoring:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-properties",children:"# Actuator configuration\nmanagement.endpoints.web.exposure.include=health,info,metrics,env\nmanagement.endpoint.health.show-details=always\nmanagement.info.env.enabled=true\n"})}),"\n",(0,t.jsx)(n.h3,{id:"custom-health-indicators",children:"Custom Health Indicators"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\npublic class JuneauHealthIndicator implements HealthIndicator {\n    \n    @Override\n    public Health health() {\n        // Custom health check logic\n        return Health.up()\n            .withDetail("juneau", "Available")\n            .build();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"metrics-integration",children:"Metrics Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\npublic class JuneauMetrics {\n    \n    private final MeterRegistry meterRegistry;\n    \n    public JuneauMetrics(MeterRegistry meterRegistry) {\n        this.meterRegistry = meterRegistry;\n    }\n    \n    public void recordRequest(String endpoint) {\n        meterRegistry.counter("juneau.requests", "endpoint", endpoint).increment();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use Spring profiles for environment-specific configuration"}),"\n",(0,t.jsx)(n.li,{children:"Implement configuration validation"}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"@ConfigurationProperties"})," for type-safe configuration"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Prefer constructor injection over field injection"}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"@Qualifier"})," for multiple bean implementations"]}),"\n",(0,t.jsx)(n.li,{children:"Implement proper bean lifecycle management"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use Spring's ",(0,t.jsx)(n.code,{children:"@ControllerAdvice"})," for global error handling"]}),"\n",(0,t.jsx)(n.li,{children:"Implement custom exception handlers"}),"\n",(0,t.jsx)(n.li,{children:"Provide meaningful error responses"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Integrate with Spring Security"}),"\n",(0,t.jsx)(n.li,{children:"Use HTTPS in production"}),"\n",(0,t.jsx)(n.li,{children:"Implement proper authentication and authorization"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,t.jsxs)("tree",{children:[(0,t.jsxs)("node-0",{children:[(0,t.jsx)("java-doc",{children:(0,t.jsx)("a",{href:"/docs/topics/JuneauExamplesRest",target:"_blank",children:"juneau-examples-rest"})})," - REST API examples"]}),(0,t.jsxs)("node-0",{children:[(0,t.jsx)("java-doc",{children:(0,t.jsx)("a",{href:"/docs/topics/JuneauExamplesRestJetty",target:"_blank",children:"juneau-examples-rest-jetty"})})," - Jetty examples"]}),(0,t.jsxs)("node-0",{children:[(0,t.jsx)("java-doc",{children:(0,t.jsx)("a",{href:"/docs/topics/JuneauRestServerSpringbootBasics",target:"_blank",children:"Juneau REST Server Spring Boot"})})," - Spring Boot integration"]}),(0,t.jsxs)("node-0",{children:[(0,t.jsx)("java-doc",{children:(0,t.jsx)("a",{href:"/docs/topics/JuneauRestServerBasics",target:"_blank",children:"Juneau REST Server Basics"})})," - REST server fundamentals"]})]}),"\n",(0,t.jsx)(n.h2,{id:"source-code",children:"Source Code"}),"\n",(0,t.jsxs)(n.p,{children:["The complete source code for the Spring Boot examples is available in the ",(0,t.jsx)(n.a,{href:"https://github.com/apache/juneau/tree/master/juneau-examples/juneau-examples-rest-springboot",children:"juneau-examples-rest-springboot"})," module of the Apache Juneau project."]}),"\n",(0,t.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,t.jsx)(n.p,{children:"To contribute improvements to the Spring Boot examples:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Follow Spring Boot best practices"}),"\n",(0,t.jsx)(n.li,{children:"Include comprehensive tests"}),"\n",(0,t.jsx)(n.li,{children:"Update documentation when adding new features"}),"\n",(0,t.jsx)(n.li,{children:"Ensure compatibility with supported Spring Boot versions"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);