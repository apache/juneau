"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[432],{28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var r=n(96540);const t={},a=r.createContext(t);function i(e){const s=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:s},e.children)}},94376:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"topics/07.01.05.CustomErrorMessages","title":"Custom Error Messages","description":"Custom error messages allow you to provide contextual information when BCT assertions fail. This makes test failures more informative and helps identify issues faster during debugging.","source":"@site/docs/topics/07.01.05.CustomErrorMessages.md","sourceDirName":"topics","slug":"/topics/CustomErrorMessages","permalink":"/docs/topics/CustomErrorMessages","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/07.01.05.CustomErrorMessages.md","tags":[],"version":"current","frontMatter":{"title":"Custom Error Messages","slug":"CustomErrorMessages"},"sidebar":"mainSidebar","previous":{"title":"7.1.4. Property Extractors","permalink":"/docs/topics/PropertyExtractors"},"next":{"title":"8.1. juneau-rest-common Basics","permalink":"/docs/topics/JuneauRestCommonBasics"}}');var t=n(74848),a=n(28453);const i={title:"Custom Error Messages",slug:"CustomErrorMessages"},o="Custom Error Messages",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Static Messages",id:"static-messages",level:3},{value:"Dynamic Messages with Placeholders",id:"dynamic-messages-with-placeholders",level:3},{value:"Supplier-Based Messages",id:"supplier-based-messages",level:3},{value:"Advanced Usage Examples",id:"advanced-usage-examples",level:2},{value:"Testing in Loops",id:"testing-in-loops",level:3},{value:"Testing with Context Information",id:"testing-with-context-information",level:3},{value:"Testing with Timestamps",id:"testing-with-timestamps",level:3},{value:"Testing with Environment Information",id:"testing-with-environment-information",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"When to Use Custom Messages",id:"when-to-use-custom-messages",level:3},{value:"Message Guidelines",id:"message-guidelines",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Combining with Other Features",id:"combining-with-other-features",level:2},{value:"Custom Messages with Custom Converters",id:"custom-messages-with-custom-converters",level:3},{value:"Custom Messages in Parameterized Tests",id:"custom-messages-in-parameterized-tests",level:3},{value:"Custom Messages with Dynamic Test Names",id:"custom-messages-with-dynamic-test-names",level:3},{value:"Error Message Examples",id:"error-message-examples",level:2},{value:"Before (Without Custom Message)",id:"before-without-custom-message",level:3},{value:"After (With Custom Message)",id:"after-with-custom-message",level:3},{value:"Advanced Example",id:"advanced-example",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Test Phase Identification",id:"test-phase-identification",level:3},{value:"Batch Processing",id:"batch-processing",level:3},{value:"Conditional Testing",id:"conditional-testing",level:3},{value:"Integration Test Context",id:"integration-test-context",level:3},{value:"See Also",id:"see-also",level:2}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"custom-error-messages",children:"Custom Error Messages"})}),"\n",(0,t.jsx)(s.p,{children:"Custom error messages allow you to provide contextual information when BCT assertions fail. This makes test failures more informative and helps identify issues faster during debugging."}),"\n",(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(s.p,{children:"BCT supports three types of custom error messages:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Static messages"})," - Simple string messages"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Dynamic messages with placeholders"})," - Messages with variable substitution"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Supplier-based messages"})," - Lazy evaluation for expensive message generation"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(s.h3,{id:"static-messages",children:"Static Messages"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'// Simple static message\nassertBean(args().setMessage("User validation failed"), \n          user, "email", "john@example.com");\n\n// More descriptive context\nassertBean(args().setMessage("Expected user to be active but was inactive"),\n          user, "isActive", "true");\n\n// Test context information\nassertBean(args().setMessage("Order status check for order #12345"),\n          order, "status", "PENDING");\n'})}),"\n",(0,t.jsx)(s.h3,{id:"dynamic-messages-with-placeholders",children:"Dynamic Messages with Placeholders"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'// Single placeholder\nString testName = "validateUser";\nassertBean(args().setMessage("Test {0} failed", testName),\n          result, "status", "SUCCESS");\n\n// Multiple placeholders\nString userName = "Alice";\nint iteration = 5;\nassertBean(args().setMessage("User {0} validation failed on iteration {1}", userName, iteration),\n          user, "isValid", "true");\n\n// Contextual information\nString orderId = "ORD-123";\nString expectedStatus = "COMPLETED";\nassertBean(args().setMessage("Order {0} expected status {1}", orderId, expectedStatus),\n          order, "status", expectedStatus);\n'})}),"\n",(0,t.jsx)(s.h3,{id:"supplier-based-messages",children:"Supplier-Based Messages"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'// Lazy evaluation for expensive computation\nassertBean(args().setMessage(() -> "Test failed at " + Instant.now()),\n          user, "lastLogin", expectedTime);\n\n// Complex context information\nassertBean(args().setMessage(() -> {\n    return String.format("Test failed in %s on thread %s",\n        Thread.currentThread().getName(),\n        Thread.currentThread().getId());\n}),\n          result, "status", "SUCCESS");\n\n// Conditional message generation\nassertBean(args().setMessage(() -> {\n    if (isDebugMode()) {\n        return "Debug: Full stack trace available";\n    } else {\n        return "Test failed - enable debug for details";\n    }\n}),\n          user, "email", "john@example.com");\n'})}),"\n",(0,t.jsx)(s.h2,{id:"advanced-usage-examples",children:"Advanced Usage Examples"}),"\n",(0,t.jsx)(s.h3,{id:"testing-in-loops",children:"Testing in Loops"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testMultipleOrders() {\n    List<Order> orders = getOrders();\n    \n    for (int i = 0; i < orders.size(); i++) {\n        Order order = orders.get(i);\n        assertBean(args().setMessage("Order validation failed at index {0}", i),\n                  order, "status,total", "PENDING,99.99");\n    }\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"testing-with-context-information",children:"Testing with Context Information"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testUsersByRole() {\n    Map<String, User> usersByRole = getUsersByRole();\n    \n    for (Map.Entry<String, User> entry : usersByRole.entrySet()) {\n        String role = entry.getKey();\n        User user = entry.getValue();\n        \n        assertBean(args().setMessage("User validation failed for role: {0}", role),\n                  user, "role,isActive", role + ",true");\n    }\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"testing-with-timestamps",children:"Testing with Timestamps"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testOrderProcessing() {\n    Order order = processOrder();\n    \n    assertBean(args().setMessage(() -> \n        String.format("Order processed at %s, validation failed", LocalDateTime.now())),\n        order, "status", "COMPLETED");\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"testing-with-environment-information",children:"Testing with Environment Information"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testConfiguration() {\n    Config config = loadConfig();\n    String environment = System.getProperty("env", "unknown");\n    \n    assertBean(args().setMessage("Config validation failed in environment: {0}", environment),\n              config, "database.host,database.port", "localhost,5432");\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(s.h3,{id:"when-to-use-custom-messages",children:"When to Use Custom Messages"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Use custom messages when:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Testing in loops or with multiple iterations"}),"\n",(0,t.jsx)(s.li,{children:"Test failures need additional context"}),"\n",(0,t.jsx)(s.li,{children:"Debugging complex test scenarios"}),"\n",(0,t.jsx)(s.li,{children:"Testing with dynamic or generated data"}),"\n",(0,t.jsx)(s.li,{children:"Running tests in different environments"}),"\n",(0,t.jsx)(s.li,{children:"Testing concurrent or parallel scenarios"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Avoid custom messages when:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"The test is simple and self-explanatory"}),"\n",(0,t.jsx)(s.li,{children:"The assertion failure message is already clear"}),"\n",(0,t.jsx)(s.li,{children:"Adding message overhead provides no value"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"message-guidelines",children:"Message Guidelines"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Be specific"}),": Include relevant context (IDs, names, indices)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Be concise"}),": Keep messages short but informative"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Include values"}),": Add expected/actual values when helpful"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Add context"}),": Include loop indices, test phases, environment info"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Use suppliers for expensive operations"}),": Defer message generation until needed"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Avoid sensitive data"}),": Don't include passwords, tokens, or PII in messages"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'// Bad - expensive computation always executed\nString heavyComputation = performExpensiveOperation();\nassertBean(args().setMessage("Test failed with: " + heavyComputation),\n          user, "status", "ACTIVE");\n\n// Good - computation only happens on failure\nassertBean(args().setMessage(() -> "Test failed with: " + performExpensiveOperation()),\n          user, "status", "ACTIVE");\n'})}),"\n",(0,t.jsx)(s.h2,{id:"combining-with-other-features",children:"Combining with Other Features"}),"\n",(0,t.jsx)(s.h3,{id:"custom-messages-with-custom-converters",children:"Custom Messages with Custom Converters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'var converter = BasicBeanConverter.builder()\n    .defaultSettings()\n    .addStringifier(LocalDate.class, date -> \n        date.format(DateTimeFormatter.ISO_LOCAL_DATE))\n    .build();\n\nassertBean(args()\n    .setBeanConverter(converter)\n    .setMessage("Date validation failed for user {0}", userId),\n    user, "birthDate", "1990-01-15");\n'})}),"\n",(0,t.jsx)(s.h3,{id:"custom-messages-in-parameterized-tests",children:"Custom Messages in Parameterized Tests"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@ParameterizedTest\n@ValueSource(strings = {"alice@example.com", "bob@example.com", "carol@example.com"})\nvoid testUserEmails(String email) {\n    User user = findUserByEmail(email);\n    \n    assertBean(args().setMessage("User validation failed for email: {0}", email),\n              user, "email,isVerified", email + ",true");\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"custom-messages-with-dynamic-test-names",children:"Custom Messages with Dynamic Test Names"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@TestFactory\nStream<DynamicTest> testOrders() {\n    return orders.stream()\n        .map(order -> DynamicTest.dynamicTest(\n            "Test Order #" + order.getId(),\n            () -> assertBean(\n                args().setMessage("Order {0} validation failed", order.getId()),\n                order, "status", "PENDING")));\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"error-message-examples",children:"Error Message Examples"}),"\n",(0,t.jsx)(s.h3,{id:"before-without-custom-message",children:"Before (Without Custom Message)"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"org.opentest4j.AssertionFailedError: \nExpected: COMPLETED\nActual: PENDING\n"})}),"\n",(0,t.jsx)(s.h3,{id:"after-with-custom-message",children:"After (With Custom Message)"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"org.opentest4j.AssertionFailedError: Order ORD-123 expected status COMPLETED\nExpected: COMPLETED\nActual: PENDING\n"})}),"\n",(0,t.jsx)(s.h3,{id:"advanced-example",children:"Advanced Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testOrderProcessing() {\n    Order order = createOrder();\n    \n    // Process order\n    processOrder(order);\n    \n    // Validate with detailed context\n    assertBean(args().setMessage(() -> \n        String.format(\n            "Order validation failed:\\n" +\n            "  Order ID: %s\\n" +\n            "  Customer: %s\\n" +\n            "  Processing Time: %s\\n" +\n            "  Thread: %s",\n            order.getId(),\n            order.getCustomer().getName(),\n            Duration.between(order.getCreatedAt(), Instant.now()),\n            Thread.currentThread().getName()\n        )),\n        order, "status,isPaid,isShipped", "COMPLETED,true,true");\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Output on failure:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"org.opentest4j.AssertionFailedError: Order validation failed:\n  Order ID: ORD-123\n  Customer: John Doe\n  Processing Time: PT2.5S\n  Thread: main\nExpected: COMPLETED\nActual: PENDING\n"})}),"\n",(0,t.jsx)(s.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(s.h3,{id:"test-phase-identification",children:"Test Phase Identification"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testUserLifecycle() {\n    // Creation phase\n    User user = createUser();\n    assertBean(args().setMessage("User creation phase failed"),\n              user, "status", "NEW");\n    \n    // Activation phase\n    activateUser(user);\n    assertBean(args().setMessage("User activation phase failed"),\n              user, "status", "ACTIVE");\n    \n    // Verification phase\n    verifyUser(user);\n    assertBean(args().setMessage("User verification phase failed"),\n              user, "status,isVerified", "ACTIVE,true");\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"batch-processing",children:"Batch Processing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testBatchProcessing() {\n    List<Order> orders = loadOrders();\n    \n    for (int i = 0; i < orders.size(); i++) {\n        Order order = orders.get(i);\n        processOrder(order);\n        \n        assertBean(args().setMessage(\n            "Batch processing failed at index {0} of {1}, Order ID: {2}",\n            i, orders.size(), order.getId()),\n            order, "status", "PROCESSED");\n    }\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"conditional-testing",children:"Conditional Testing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testUserPermissions() {\n    User user = loadUser();\n    String expectedRole = user.isAdmin() ? "ADMIN" : "USER";\n    \n    assertBean(args().setMessage(\n        "Permission check failed for {0} user (expected role: {1})",\n        user.isAdmin() ? "admin" : "regular",\n        expectedRole),\n        user, "role,hasAccess", expectedRole + ",true");\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"integration-test-context",children:"Integration Test Context"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'@Test\nvoid testOrderIntegration() {\n    // Create test data\n    Order order = createTestOrder();\n    String testId = UUID.randomUUID().toString();\n    \n    // Call external service\n    ExternalService service = getExternalService();\n    Result result = service.processOrder(order);\n    \n    // Validate with full context\n    assertBean(args().setMessage(() -> \n        String.format(\n            "Integration test failed:\\n" +\n            "  Test ID: %s\\n" +\n            "  Service: %s\\n" +\n            "  Order ID: %s\\n" +\n            "  Response Time: %dms",\n            testId,\n            service.getClass().getSimpleName(),\n            order.getId(),\n            result.getResponseTime()\n        )),\n        result, "status,errorCode", "SUCCESS,null");\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/topics/Stringifiers",children:"Stringifiers"})," - Converting objects to strings"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/topics/Listifiers",children:"Listifiers"})," - Converting collection-like objects to lists"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/topics/Swappers",children:"Swappers"})," - Transforming objects before processing"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/topics/PropertyExtractors",children:"PropertyExtractors"})," - Custom property access logic"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/topics/JuneauBctBasics",children:"juneau-bct Basics"})," - Main BCT documentation"]}),"\n"]})]})}function g(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);