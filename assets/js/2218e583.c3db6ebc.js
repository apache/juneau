"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[5437],{10482:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"topics/07.01.04.PropertyExtractors","title":"Property Extractors","description":"Property extractors define custom property access logic for objects that don\'t follow standard JavaBean patterns or require specialized property extraction. They provide a flexible way to access properties from any object structure.","source":"@site/docs/topics/07.01.04.PropertyExtractors.md","sourceDirName":"topics","slug":"/topics/PropertyExtractors","permalink":"/docs/topics/PropertyExtractors","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/07.01.04.PropertyExtractors.md","tags":[],"version":"current","frontMatter":{"title":"Property Extractors","slug":"PropertyExtractors"},"sidebar":"mainSidebar","previous":{"title":"7.1.3. Swappers","permalink":"/docs/topics/Swappers"},"next":{"title":"7.1.5. Custom Error Messages","permalink":"/docs/topics/CustomErrorMessages"}}');var o=t(74848),a=t(28453);const c={title:"Property Extractors",slug:"PropertyExtractors"},i="Property Extractors",s={},p=[{value:"Overview",id:"overview",level:2},{value:"Custom Property Extractors",id:"custom-property-extractors",level:2},{value:"Basic Property Extractor",id:"basic-property-extractor",level:3},{value:"Advanced Property Extractor Example",id:"advanced-property-extractor-example",level:3},{value:"Property Alias Extractor",id:"property-alias-extractor",level:3},{value:"Computed Property Extractor",id:"computed-property-extractor",level:3},{value:"Complex Property Extraction Examples",id:"complex-property-extraction-examples",level:2},{value:"XML/JSON Document Extractor",id:"xmljson-document-extractor",level:3},{value:"Reflection-Based Private Field Extractor",id:"reflection-based-private-field-extractor",level:3},{value:"SQL ResultSet Extractor",id:"sql-resultset-extractor",level:3},{value:"Configuration Property Extractor",id:"configuration-property-extractor",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"When to Create Custom Property Extractors",id:"when-to-create-custom-property-extractors",level:3},{value:"Property Extractor Guidelines",id:"property-extractor-guidelines",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Thread Safety",id:"thread-safety",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Chain of Responsibility Pattern",id:"chain-of-responsibility-pattern",level:3},{value:"Fallback Extractor",id:"fallback-extractor",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Testing Custom Objects",id:"testing-custom-objects",level:3},{value:"Combining with Other Features",id:"combining-with-other-features",level:3},{value:"See Also",id:"see-also",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"property-extractors",children:"Property Extractors"})}),"\n",(0,o.jsx)(r.p,{children:"Property extractors define custom property access logic for objects that don't follow standard JavaBean patterns or require specialized property extraction. They provide a flexible way to access properties from any object structure."}),"\n",(0,o.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(r.p,{children:"Property extractors are used when:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Objects don't follow JavaBean getter conventions"}),"\n",(0,o.jsx)(r.li,{children:"You need to compute properties dynamically"}),"\n",(0,o.jsx)(r.li,{children:"You want to provide custom property names or aliases"}),"\n",(0,o.jsx)(r.li,{children:"Objects use non-standard property access methods"}),"\n",(0,o.jsx)(r.li,{children:"You need to access properties from legacy systems"}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"custom-property-extractors",children:"Custom Property Extractors"}),"\n",(0,o.jsxs)(r.p,{children:["Define custom property access logic by implementing the ",(0,o.jsx)(r.code,{children:"PropertyExtractor"})," interface:"]}),"\n",(0,o.jsx)(r.h3,{id:"basic-property-extractor",children:"Basic Property Extractor"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Database entity extractor\nPropertyExtractor entityExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return obj instanceof DatabaseEntity;\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        DatabaseEntity entity = (DatabaseEntity) obj;\n        switch (prop) {\n            case "id": return entity.getPrimaryKey();\n            case "displayName": return entity.computeDisplayName();\n            default: return entity.getAttribute(prop);\n        }\n    }\n};\n\n// Registration\nvar converter = BasicBeanConverter.builder()\n    .defaultSettings()\n    .addPropertyExtractor(entityExtractor)\n    .build();\n'})}),"\n",(0,o.jsx)(r.h3,{id:"advanced-property-extractor-example",children:"Advanced Property Extractor Example"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Map-based property extractor with type conversion\nPropertyExtractor mapExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return obj instanceof Map;\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        Map<?, ?> map = (Map<?, ?>) obj;\n        \n        // Support special properties\n        if ("size".equals(prop)) {\n            return map.size();\n        }\n        if ("isEmpty".equals(prop)) {\n            return map.isEmpty();\n        }\n        if ("keys".equals(prop)) {\n            return new ArrayList<>(map.keySet());\n        }\n        if ("values".equals(prop)) {\n            return new ArrayList<>(map.values());\n        }\n        \n        // Standard key access\n        return map.get(prop);\n    }\n};\n'})}),"\n",(0,o.jsx)(r.h3,{id:"property-alias-extractor",children:"Property Alias Extractor"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Extractor that provides property aliases\nPropertyExtractor aliasExtractor = new PropertyExtractor() {\n    private final Map<String, String> aliases = Map.of(\n        "fname", "firstName",\n        "lname", "lastName",\n        "email", "emailAddress",\n        "phone", "phoneNumber"\n    );\n    \n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return aliases.containsKey(prop);\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        String actualProp = aliases.get(prop);\n        try {\n            String methodName = "get" + capitalize(actualProp);\n            Method method = obj.getClass().getMethod(methodName);\n            return method.invoke(obj);\n        } catch (Exception e) {\n            throw new RuntimeException("Failed to extract property: " + prop, e);\n        }\n    }\n    \n    private String capitalize(String s) {\n        return s.substring(0, 1).toUpperCase() + s.substring(1);\n    }\n};\n\n// Usage\nassertBean(args().setBeanConverter(converter),\n          user, "fname,lname,email", "John,Doe,john@example.com");\n'})}),"\n",(0,o.jsx)(r.h3,{id:"computed-property-extractor",children:"Computed Property Extractor"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Extractor for computed/derived properties\nPropertyExtractor computedExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return obj instanceof User && prop.startsWith("computed_");\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        User user = (User) obj;\n        switch (prop) {\n            case "computed_fullName":\n                return user.getFirstName() + " " + user.getLastName();\n            case "computed_age":\n                return Period.between(user.getBirthDate(), LocalDate.now()).getYears();\n            case "computed_initials":\n                return user.getFirstName().charAt(0) + "." + user.getLastName().charAt(0) + ".";\n            default:\n                throw new IllegalArgumentException("Unknown computed property: " + prop);\n        }\n    }\n};\n\n// Usage\nassertBean(args().setBeanConverter(converter),\n          user, "computed_fullName,computed_age,computed_initials", \n          "John Doe,30,J.D.");\n'})}),"\n",(0,o.jsx)(r.h2,{id:"complex-property-extraction-examples",children:"Complex Property Extraction Examples"}),"\n",(0,o.jsx)(r.h3,{id:"xmljson-document-extractor",children:"XML/JSON Document Extractor"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"// Extract properties from XML/JSON documents\nPropertyExtractor documentExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return obj instanceof JsonNode || obj instanceof XmlNode;\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        if (obj instanceof JsonNode) {\n            JsonNode node = (JsonNode) obj;\n            return node.get(prop);\n        } else if (obj instanceof XmlNode) {\n            XmlNode node = (XmlNode) obj;\n            return node.getAttribute(prop);\n        }\n        return null;\n    }\n};\n"})}),"\n",(0,o.jsx)(r.h3,{id:"reflection-based-private-field-extractor",children:"Reflection-Based Private Field Extractor"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Access private fields via reflection\nPropertyExtractor privateFieldExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return prop.startsWith("_");  // Private fields prefixed with underscore\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        try {\n            String fieldName = prop.substring(1);  // Remove underscore prefix\n            Field field = obj.getClass().getDeclaredField(fieldName);\n            field.setAccessible(true);\n            return field.get(obj);\n        } catch (Exception e) {\n            throw new RuntimeException("Failed to access field: " + prop, e);\n        }\n    }\n};\n\n// Usage\nassertBean(args().setBeanConverter(converter),\n          myBean, "_privateField1,_privateField2", "value1,value2");\n'})}),"\n",(0,o.jsx)(r.h3,{id:"sql-resultset-extractor",children:"SQL ResultSet Extractor"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Extract columns from ResultSet\nPropertyExtractor resultSetExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return obj instanceof ResultSet;\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        ResultSet rs = (ResultSet) obj;\n        try {\n            // Support column index access\n            if (prop.matches("\\\\d+")) {\n                int index = Integer.parseInt(prop);\n                return rs.getObject(index);\n            }\n            // Support column name access\n            return rs.getObject(prop);\n        } catch (SQLException e) {\n            throw new RuntimeException("Failed to extract column: " + prop, e);\n        }\n    }\n};\n'})}),"\n",(0,o.jsx)(r.h3,{id:"configuration-property-extractor",children:"Configuration Property Extractor"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Extract properties from configuration objects\nPropertyExtractor configExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return obj instanceof Configuration;\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        Configuration config = (Configuration) obj;\n        \n        // Support dot-notation for nested properties\n        if (prop.contains(".")) {\n            String[] parts = prop.split("\\\\.");\n            Object current = config;\n            for (String part : parts) {\n                current = ((Configuration) current).getProperty(part);\n                if (current == null) return null;\n            }\n            return current;\n        }\n        \n        return config.getProperty(prop);\n    }\n};\n\n// Usage\nassertBean(args().setBeanConverter(converter),\n          config, "database.host,database.port,app.name", \n          "localhost,5432,MyApp");\n'})}),"\n",(0,o.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(r.h3,{id:"when-to-create-custom-property-extractors",children:"When to Create Custom Property Extractors"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Non-standard property access patterns"}),"\n",(0,o.jsx)(r.li,{children:"Legacy systems without JavaBean getters"}),"\n",(0,o.jsx)(r.li,{children:"Computed or derived properties"}),"\n",(0,o.jsx)(r.li,{children:"Property aliases or shortcuts"}),"\n",(0,o.jsx)(r.li,{children:"Document/tree structures (XML, JSON)"}),"\n",(0,o.jsx)(r.li,{children:"Database results or cursors"}),"\n",(0,o.jsx)(r.li,{children:"Dynamic property systems"}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"property-extractor-guidelines",children:"Property Extractor Guidelines"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Always implement ",(0,o.jsx)(r.code,{children:"canExtract()"})," to check object compatibility"]}),"\n",(0,o.jsx)(r.li,{children:"Handle null objects and properties gracefully"}),"\n",(0,o.jsx)(r.li,{children:"Throw descriptive exceptions for invalid properties"}),"\n",(0,o.jsx)(r.li,{children:"Document property naming conventions"}),"\n",(0,o.jsx)(r.li,{children:"Consider performance for frequently accessed properties"}),"\n",(0,o.jsx)(r.li,{children:"Keep extraction logic simple and focused"}),"\n",(0,o.jsx)(r.li,{children:"Avoid side effects or state modifications"}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Cache expensive computations\nPropertyExtractor cachedExtractor = new PropertyExtractor() {\n    private final Map<String, Object> cache = new ConcurrentHashMap<>();\n    \n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return obj instanceof ExpensiveObject;\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        String cacheKey = System.identityHashCode(obj) + ":" + prop;\n        return cache.computeIfAbsent(cacheKey, k -> {\n            // Expensive computation here\n            return ((ExpensiveObject) obj).computeProperty(prop);\n        });\n    }\n};\n'})}),"\n",(0,o.jsx)(r.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Robust error handling in property extractors\nPropertyExtractor safeExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return obj instanceof MyObject;\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        try {\n            MyObject myObj = (MyObject) obj;\n            return myObj.getProperty(prop);\n        } catch (PropertyNotFoundException e) {\n            return "<not found>";\n        } catch (Exception e) {\n            return "<error: " + e.getClass().getSimpleName() + ">";\n        }\n    }\n};\n'})}),"\n",(0,o.jsx)(r.h3,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:"// Ensure thread-safe property extraction\nPropertyExtractor threadSafeExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return obj instanceof ThreadSafeObject;\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        ThreadSafeObject tso = (ThreadSafeObject) obj;\n        synchronized (tso) {\n            return tso.getProperty(prop);\n        }\n    }\n};\n"})}),"\n",(0,o.jsx)(r.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,o.jsx)(r.h3,{id:"chain-of-responsibility-pattern",children:"Chain of Responsibility Pattern"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Multiple extractors chained together\nPropertyExtractor chainedExtractor = new PropertyExtractor() {\n    private final List<PropertyExtractor> extractors = Arrays.asList(\n        entityExtractor,\n        mapExtractor,\n        computedExtractor\n    );\n    \n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return extractors.stream()\n            .anyMatch(e -> e.canExtract(conv, obj, prop));\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        for (PropertyExtractor extractor : extractors) {\n            if (extractor.canExtract(conv, obj, prop)) {\n                return extractor.extract(conv, obj, prop);\n            }\n        }\n        throw new IllegalArgumentException("No extractor found for property: " + prop);\n    }\n};\n'})}),"\n",(0,o.jsx)(r.h3,{id:"fallback-extractor",children:"Fallback Extractor"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Try multiple extraction strategies with fallback\nPropertyExtractor fallbackExtractor = new PropertyExtractor() {\n    @Override\n    public boolean canExtract(BeanConverter conv, Object obj, String prop) {\n        return true;  // Universal extractor\n    }\n    \n    @Override\n    public Object extract(BeanConverter conv, Object obj, String prop) {\n        // Try getter method\n        try {\n            String methodName = "get" + capitalize(prop);\n            Method method = obj.getClass().getMethod(methodName);\n            return method.invoke(obj);\n        } catch (Exception e1) {\n            // Try field access\n            try {\n                Field field = obj.getClass().getDeclaredField(prop);\n                field.setAccessible(true);\n                return field.get(obj);\n            } catch (Exception e2) {\n                // Try map access\n                if (obj instanceof Map) {\n                    return ((Map<?, ?>) obj).get(prop);\n                }\n                return null;\n            }\n        }\n    }\n};\n'})}),"\n",(0,o.jsx)(r.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,o.jsx)(r.h3,{id:"testing-custom-objects",children:"Testing Custom Objects"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Test database entity\nDatabaseEntity entity = loadEntity(123);\nassertBean(args().setBeanConverter(converter),\n          entity, "id,displayName,createdDate", "123,John Doe,2023-01-15");\n\n// Test configuration\nConfiguration config = loadConfig();\nassertBean(args().setBeanConverter(converter),\n          config, "database.host,database.port,app.timeout", \n          "localhost,5432,30000");\n\n// Test computed properties\nUser user = loadUser(456);\nassertBean(args().setBeanConverter(converter),\n          user, "computed_fullName,computed_age", "Alice Smith,28");\n'})}),"\n",(0,o.jsx)(r.h3,{id:"combining-with-other-features",children:"Combining with Other Features"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// Use property extractor with nested access\nassertBean(args().setBeanConverter(converter),\n          order, "customer{computed_fullName},items{0{name}}", \n          "{John Doe},{{Laptop}}");\n'})}),"\n",(0,o.jsx)(r.h2,{id:"see-also",children:"See Also"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"/docs/topics/Stringifiers",children:"Stringifiers"})," - Converting objects to strings"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"/docs/topics/Listifiers",children:"Listifiers"})," - Converting collection-like objects to lists"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"/docs/topics/Swappers",children:"Swappers"})," - Transforming objects before processing"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:"/docs/topics/JuneauBctBasics",children:"juneau-bct Basics"})," - Main BCT documentation"]}),"\n"]})]})}function d(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>c,x:()=>i});var n=t(96540);const o={},a=n.createContext(o);function c(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);