"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[2065],{28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var a=t(96540);const o={},i=a.createContext(o);function r(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),a.createElement(i.Provider,{value:e},n.children)}},34624:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"topics/02.04.05.BeancAnnotation","title":"@Beanc Annotation","description":"The @Beanc annotation is used to map constructor arguments to","source":"@site/docs-staging/topics/02.04.05.BeancAnnotation.md","sourceDirName":"topics","slug":"/topics/02.04.05.BeancAnnotation","permalink":"/docs/topics/02.04.05.BeancAnnotation","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.04.05.BeancAnnotation.md","tags":[],"version":"current","frontMatter":{"title":"@Beanc Annotation"},"sidebar":"tutorialSidebar","previous":{"title":"2.4.4. @Beanp Annotation","permalink":"/docs/topics/02.04.04.BeanpAnnotation"},"next":{"title":"2.4.6. @BeanIgnore Annotation","permalink":"/docs/topics/02.04.06.BeanIgnoreAnnotation"}}');var o=t(74848),i=t(28453);const r={title:"@Beanc Annotation"},s=void 0,c={},p=[];function l(n){const e={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.a,{href:"../apidocs/org/apache/juneau/annotation/Beanc.html",children:"@Beanc"})," annotation is used to map constructor arguments to\nproperty names on bean with read-only properties."]}),"\n",(0,o.jsx)(e.p,{children:"Since method parameter names are lost during compilation, this annotation essentially redefines them so that they are\navailable at runtime."}),"\n",(0,o.jsx)(e.p,{children:"The definition of a read-only bean is a bean with properties with only getters, like shown below:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Our read-only bean.\npublic class Person {\n    private final String name;\n    private final int age;\n\n    @Beanc(properties="name,age"})\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Read only properties.\n    // Getters but no setters.\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// Parsing into a read-only bean.\nString json = "{name:\'John Smith\',age:45}";\nPerson person = Json.to(json, Person.class);\nString name = person.getName();  // "John Smith"\nint age = person.getAge();   // 45\n'})}),"\n",(0,o.jsx)(e.p,{children:"Beans can also be defined with a combination of read-only and read-write properties."}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.a,{href:"../apidocs/org/apache/juneau/annotation/Name.html",children:"@Name"})," annotation can also be used instead of\n",(0,o.jsx)(e.code,{children:"@Beanc(properties)"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Beanc\npublic Person(@Name("name") String name, @Name("age") int age) {\n    this.name = name;\n    this.age = age;\n}\n'})}),"\n",(0,o.jsxs)(e.p,{children:["If neither ",(0,o.jsx)(e.code,{children:"@Beanc(properties)"})," or ",(0,o.jsx)(e.a,{href:"../apidocs/org/apache/juneau/annotation/Name.html",children:"@Name"})," is used to identify the\nbean property names, we will try to use the parameter names if they are available in the bytecode."]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}}}]);