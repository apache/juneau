"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[4338],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(96540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}},91198:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"topics/05.11.02.MemoryStore","title":"MemoryStore","description":"The MemoryStore class is simply an in-memory storage","source":"@site/docs-staging/topics/05.11.02.MemoryStore.md","sourceDirName":"topics","slug":"/topics/05.11.02.MemoryStore","permalink":"/docs/topics/05.11.02.MemoryStore","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/05.11.02.MemoryStore.md","tags":[],"version":"current","frontMatter":{"title":"MemoryStore"},"sidebar":"mainSidebar","previous":{"title":"5.11.1. Config Stores Basics","permalink":"/docs/topics/05.11.01.ConfigStoresBasics"},"next":{"title":"5.11.3. File Store","permalink":"/docs/topics/05.11.03.FileStore"}}');var r=t(74848),s=t(28453);const i={title:"MemoryStore"},a=void 0,c={},u=[];function p(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"../apidocs/org/apache/juneau/config/store/MemoryStore.html",children:"MemoryStore"})," class is simply an in-memory storage\nlocation for configuration files."]}),"\n",(0,r.jsx)(n.p,{children:"There is no hard persistence and is used primarily for testing purposes.\nHowever, the implementation provides a good idea on how stores work (especially the write method):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class MemoryStore extends ConfigStore {\n\n    // Some methods ommitted.\n\n    private final ConcurrentHashMap cache = new ConcurrentHashMap();\n\n    @Override /* ConfigStore */\n    public synchronized String read(String name) {\n        return emptyIfNull(cache.get(name));\n    }\n\n    @Override /* ConfigStore */\n    public synchronized String write(String name, String expectedContents, String newContents) {\n\n        // This is a no-op.\n        if (isEquals(expectedContents, newContents))\n            return null;\n\n        String currentContents = read(name);\n\n        if (expectedContents != null && ! isEquals(currentContents, expectedContents))\n            return currentContents;\n\n        update(name, newContents);\n\n        // Success!\n        return null;\n    }\n\n    @Override /* ConfigStore */\n    public synchronized MemoryStore update(String name, String newContents) {\n        cache.put(name, newContents);\n        super.update(name, newContents);  // Trigger any listeners.\n        return this;\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);