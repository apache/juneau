"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[3398],{28453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>l});var s=n(96540);const t={},r=s.createContext(t);function i(e){const a=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:a},e.children)}},79615:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"topics/02.26.08.XmlNamespaces","title":"Namespaces","description":"Let\'s go back to the example of our original Person bean class but add some namespace annotations:","source":"@site/docs-staging/topics/02.26.08.XmlNamespaces.md","sourceDirName":"topics","slug":"/topics/02.26.08.XmlNamespaces","permalink":"/docs/topics/02.26.08.XmlNamespaces","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.26.08.XmlNamespaces.md","tags":[],"version":"current","frontMatter":{"title":"Namespaces"},"sidebar":"mainSidebar","previous":{"title":"2.26.7. @XmlFormat Annotation","permalink":"/docs/topics/02.26.07.XmlFormatAnnotation"},"next":{"title":"2.27.1. HTML Basics","permalink":"/docs/topics/02.27.01.HtmlBasics"}}');var t=n(74848),r=n(28453);const i={title:"Namespaces"},l=void 0,o={},p=[{value:"Sample Beans",id:"sample-beans",level:5},{value:"package-info.java",id:"package-infojava",level:5},{value:"Sample Code",id:"sample-code",level:5}];function d(e){const a={a:"a",code:"code",h5:"h5",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a.p,{children:["Let's go back to the example of our original ",(0,t.jsx)(a.code,{children:"Person"})," bean class but add some namespace annotations:"]}),"\n",(0,t.jsx)(a.h5,{id:"sample-beans",children:"Sample Beans"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'@Xml(prefix="per")\n@Bean(typeName="person")\npublic class Person {\n\n    // Bean properties\n    public String name;\n    @Swap(TemporalCalendarSwap.IsoInstant.class) public Calendar birthDate;\n    public List addresses;\n\n    // Getters/setters omitted\n}\n\n@Xml(prefix="addr")\n@Bean(typeName="address")\npublic class Address {\n\n    // Bean properties\n    @Xml(prefix="mail") public String street, city;\n    @Xml(prefix="mail") public StateEnum state;\n    @Xml(prefix="mail") public int zip;\n    public boolean isCurrent;\n\n    // Getters/setters omitted\n}\n'})}),"\n",(0,t.jsxs)(a.p,{children:["The namespace URLs can either be defined as part of the ",(0,t.jsx)(a.a,{href:"../apidocs/org/apache/juneau/xml/annotation/Xml.html",children:"@Xml"}),"\nannotation, or can be defined at the package level with the ",(0,t.jsx)(a.a,{href:"../apidocs/org/apache/juneau/xml/annotation/XmlSchema.html",children:"@XmlSchema"})," annotation."]}),"\n",(0,t.jsx)(a.p,{children:"Below shows it defined at the package level:"}),"\n",(0,t.jsx)(a.h5,{id:"package-infojava",children:"package-info.java"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'@XmlSchema(\n    prefix="ab",  // Default namespace\n    xmlNs={\n        @XmlNs(prefix="ab", namespaceURI="http://www.apache.org/addressBook/"),\n        @XmlNs(prefix="per", namespaceURI="http://www.apache.org/person/"),\n        @XmlNs(prefix="addr", namespaceURI="http://www.apache.org/address/"),\n        @XmlNs(prefix="mail", namespaceURI="http://www.apache.org/mail/")\n    }\n)\npackage org.apache.juneau.examples.addressbook;\n'})}),"\n",(0,t.jsx)(a.h5,{id:"sample-code",children:"Sample Code"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'Person person = new Person()\n    .name("John Smith")\n    .birthDate("1946-08-12T00:00:00Z")\n    .addresses(\n        new Address()\n            .street("100 Main Street")\n            .city("Anywhereville")\n            .state(NY)\n            .zip(12345)\n            .isCurrent(true);\n    );\n\n// Create a new serializer with readable output, this time with namespaces enabled.\n// Note that this is identical to XmlSerializer.DEFAULT_NS_SQ_READABLE.\nXmlSerializer serializer = XmlSerializer.create().ns().ws().sq().build();\n\nString xml = serializer.serialize(p);\n'})}),"\n",(0,t.jsx)(a.p,{children:"Now when we run this code, we'll see namespaces added to our output:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-xml",children:"<per:person>\n    <per:name>John Smith</per:name>\n    <per:birthDate>1946-08-12T04:00:00Z</per:birthDate>\n    <per:addresses>\n        <addr:address>\n            <mail:street>100 Main Street</mail:street>\n            <mail:city>Anywhereville</mail:city>\n            <mail:state>NY</mail:state>\n            <mail:zip>12345</mail:zip>\n            <addr:isCurrent>true</addr:isCurrent>\n        </addr:address>\n    </per:addresses>\n</per:person>\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Enabling the ",(0,t.jsx)(a.code,{children:"XmlSerializer.XML_addNamespaceUrisToRootsetting"})," results in the namespace URLs being added to the root\nnode:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-xml",children:"<per:person\n        xmlns='http://www.apache.org/2013/Juneau'\n        xmlns:per='http://www.apache.org/person/'\n        xmlns:addr='http://www.apache.org/address/'\n        xmlns:mail='http://www.apache.org/mail/'\n    >\n    <per:name>John Smith</per:name>\n    <per:birthDate>1946-08-12T04:00:00Z</per:birthDate>\n    <per:addresses>\n        <addr:address>\n            <mail:street>100 Main Street</mail:street>\n            <mail:city>Anywhereville</mail:city>\n            <mail:state>NY</mail:state>\n            <mail:zip>12345</mail:zip>\n            <addr:isCurrent>true</addr:isCurrent>\n        </addr:address>\n    </per:addresses>\n</per:person>\n"})}),"\n",(0,t.jsx)(a.p,{children:"We can simplify the output by setting the default namespace on the serializer so that all the elements do not need to be\nprefixed:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:'// Create a new serializer with readable output, this time with namespaces enabled.\nXmlSerializer serializer = XmlSerializer.create().ws().sq().ns()\n    .defaultNamespaceUri("http://www.apache.org/person/")\n\n'})}),"\n",(0,t.jsx)(a.p,{children:"This produces the following equivalent where the elements don't need prefixes since they're already in the default\ndocument namespace:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-xml",children:"<person\n        xmlns:juneau='http://www.apache.org/2013/Juneau'\n        xmlns='http://www.apache.org/person/'\n        xmlns:addr='http://www.apache.org/address/'\n        xmlns:mail='http://www.apache.org/mail/'\n    >\n    <name>John Smith</name>\n    <birthDate>1946-08-12T04:00:00Z</birthDate>\n    <addresses>\n        <addr:address>\n            <mail:street>100 Main Street</mail:street>\n            <mail:city>Anywhereville</mail:city>\n            <mail:state>NY</mail:state>\n            <mail:zip>12345</mail:zip>\n            <addr:isCurrent>true</addr:isCurrent>\n        </addr:address>\n    </addresses>\n</person>\n"})}),"\n",(0,t.jsxs)(a.p,{children:["By default, the XML serializer class will make a first-pass over the data structure to look for namespaces defined on\nclasses and bean properties.\nIn high-performance environments, you may want to consider disabling auto-detection and providing your own explicit list\nof namespaces to the serializer to avoid this scanning step using ",(0,t.jsx)(a.a,{href:"../apidocs/org/apache/juneau/xml/XmlSerializer/Builder.html#disableAutoDetectNamespaces()",children:"XmlSerializer.Builder.disableAutoDetectNamespaces()"}),"."]}),"\n",(0,t.jsx)(a.p,{children:"The following code will produce the same output as before but will perform slightly better since it avoids this pre-scan\nstep."}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-java",children:"// Create a new serializer with readable output, this time with namespaces enabled.\nXmlSerializer serializer = XmlSerializer.create()\n    .ws()\n    .sq()\n    .autoDetectNamespaces(false)\n    .namespaces(\"{per:'http://www.apache.org/person/'}\")\n    .build();\n"})})]})}function c(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);