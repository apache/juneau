"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[5655],{10655:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"topics/02.13.01.BeanDictionaryBasics","title":"Bean Dictionary Basics","description":"While parsing into beans, Juneau attempts to determine the class types of bean properties through reflection on the bean","source":"@site/docs-staging/topics/02.13.01.BeanDictionaryBasics.md","sourceDirName":"topics","slug":"/topics/02.13.01.BeanDictionaryBasics","permalink":"/docs/topics/02.13.01.BeanDictionaryBasics","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.13.01.BeanDictionaryBasics.md","tags":[],"version":"current","frontMatter":{"title":"Bean Dictionary Basics"},"sidebar":"tutorialSidebar","previous":{"title":"2.12. Dynamically Applied Annotations","permalink":"/docs/topics/02.12.00.DynamicallyAppliedAnnotations"},"next":{"title":"2.13.2. Bean Sub Types","permalink":"/docs/topics/02.13.02.BeanSubTypes"}}');var i=a(74848),s=a(28453);const r={title:"Bean Dictionary Basics"},o=void 0,c={},l=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"While parsing into beans, Juneau attempts to determine the class types of bean properties through reflection on the bean\nproperty getter or setter.\nOften this is insufficient if the property type is an interface or abstract class that cannot be instantiated.\nThis is where bean names and dictionaries come into play."}),"\n",(0,i.jsxs)(n.p,{children:["Bean names and dictionaries are used for identifying class types when they cannot be inferred through reflection.\nBean classes are given names through the ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html#typeName()",children:"@Bean(typeName)"})," annotation.\nThese names are then added to the serialized output as virtual ",(0,i.jsx)(n.code,{children:"_type"})," properties (or element names in XML)."]}),"\n",(0,i.jsx)(n.p,{children:"On the parsing side, these type names are resolved to classes through the use of bean dictionaries."}),"\n",(0,i.jsxs)(n.p,{children:["For example, if a bean property is of type ",(0,i.jsx)(n.code,{children:"Object"}),", then the serializer will add ",(0,i.jsx)(n.code,{children:"_type"})," attributes so that the class\ncan be determined during parsing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Bean(typeName="foo")\npublic class Foo {\n    // A bean property where the object types cannot be inferred since it\'s an Object[].\n    @Beanp(dictionary={Bar.class,Baz.class})\n    public Object[] x = new Object[]{new Bar(), new Baz()};\n}\n\n@Bean(typeName="bar")\npublic class Bar {}\n\n@Bean(typeName="baz")\npublic class Baz {}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When serialized as JSON, ",(0,i.jsx)(n.code,{children:"_type"})," attributes would be added when needed to infer the type during parsing:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"{\n    x: [\n        {_type:'bar'},\n        {_type:'baz'}\n    ]\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Type names can be represented slightly differently in different languages."}),"\n",(0,i.jsxs)(n.p,{children:["For example, the dictionary name is used as element names when serialized to XML.\nThis allows the ",(0,i.jsx)(n.code,{children:"typeName"})," annotation to be used as a shortcut for defining element names for beans."]}),"\n",(0,i.jsx)(n.p,{children:"When serialized as XML, the bean is rendered as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<foo>\n    <x>\n        <bar/>\n        <baz/>\n    </x>\n</foo>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Bean dictionaries are registered through the following:"}),"\n",(0,i.jsxs)("tree",{children:[(0,i.jsx)("node-0",{children:(0,i.jsx)("java-annotation",{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Beanp.html",children:"Beanp"})})}),(0,i.jsx)("node-1",{children:(0,i.jsx)("java-method-annotation",{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Beanp.html#dictionary()",children:"dictionary"})})}),(0,i.jsx)("node-0",{children:(0,i.jsx)("java-annotation",{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html",children:"Bean"})})}),(0,i.jsx)("node-1",{children:(0,i.jsx)("java-method-annotation",{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html#dictionary()",children:"dictionary"})})}),(0,i.jsx)("node-0",{children:(0,i.jsx)("java-class",{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext/Builder.html",children:"BeanContext.Builder"})})}),(0,i.jsx)("node-1",{children:(0,i.jsx)("java-method",{children:(0,i.jsx)(n.a,{href:"/docs/topics/TODO",children:"beanDictionary(Class...)"})})})]}),"\n",(0,i.jsx)(n.p,{children:"The bean dictionary setting can consist of any of the following types:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Any bean class that specifies a value for ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html#typeName()",children:"@Bean(typeName)"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Any subclass of ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanDictionaryList.html",children:"BeanDictionaryList"})," containing a collection of bean classes with type name annotations."]}),"\n",(0,i.jsxs)(n.li,{children:["Any subclass of ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanDictionaryMap.html",children:"BeanDictionaryMap"})," containing a mapping of type names to classes without type name annotations."]}),"\n",(0,i.jsx)(n.li,{children:"Any array or collection of the objects above."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Create a parser and tell it which classes to try to resolve.\nReaderParser parser = JsonParser\n    .create()\n    .dictionary(Foo.class, Bar.class)\n    .build();\n\n// Use the predefined HTML5 bean dictionary which is a BeanDictionaryList.\nReaderParser parser = HtmlParser\n    .create()\n    .dictionary(HtmlBeanDictionary.class)\n    .build();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"_type"})," property name can be overridden through the following:"]}),"\n",(0,i.jsxs)("tree",{children:[(0,i.jsx)("node-0",{children:(0,i.jsx)("java-annotation",{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html",children:"Bean"})})}),(0,i.jsx)("node-1",{children:(0,i.jsx)("java-method",{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/annotation/Bean.html#typePropertyName()",children:"typePropertyName"})})}),(0,i.jsx)("node-0",{children:(0,i.jsx)("java-class",{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext/Builder.html",children:"BeanContext.Builder"})})}),(0,i.jsx)("node-1",{children:(0,i.jsx)("java-method",{children:(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/BeanContext/Builder.html#typePropertyName(String)",children:"typePropertyName(String)"})})})]}),"\n",(0,i.jsx)(n.p,{children:"When using the annotation, you'll typically want to define it on an interface class so that it can be inherited by all\nsubclasses."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Bean(typePropertyName="mytype", dictionary={MyClass1.class,MyClass2.class})\npublic interface MyInterface {...}\n\n@Bean(typeName="C1")\npublic class MyClass1 implements MyInterface {...}\n\n@Bean(typeName="C2")\npublic class MyClass2 implements MyInterface {...}\n\nMyInterface[] x = new MyInterface[]{ new MyClass1(), new MyClass2() };\n\n// Produces "[{mytype:\'C1\',...},{mytype:\'C2\',...}]"\nString json = JsonSerializer.DEFAULT.serialize(x);\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Type names do not need to be universally unique. However, they must be unique within a dictionary."}),"\n",(0,i.jsxs)(n.li,{children:["The following reserved words cannot be used as type names: ",(0,i.jsx)(n.code,{children:"object"}),", ",(0,i.jsx)(n.code,{children:"array"}),", ",(0,i.jsx)(n.code,{children:"number"}),", ",(0,i.jsx)(n.code,{children:"boolean"}),", ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Serialized type names are DISABLED by default. They must be enabled on the serializer using the ",(0,i.jsx)(n.a,{href:"../apidocs/org/apache/juneau/serializer/Serializer/Builder.html#addBeanTypes()",children:"Serializer.Builder.addBeanTypes()"})," setting."]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(96540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);