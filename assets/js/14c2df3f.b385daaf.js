"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[2246],{28453:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>o});var t=r(96540);const s={},n=t.createContext(s);function i(e){const a=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(n.Provider,{value:a},e.children)}},31617:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"topics/02.05.00.HttpPartSerializersParsers","title":"HTTP Part Serializers and Parsers","description":"There is a separate set of serializers and parsers for marshalling HTTP parts (query, form-data, headers, path","source":"@site/docs/topics/02.05.00.HttpPartSerializersParsers.md","sourceDirName":"topics","slug":"/topics/HttpPartSerializersParsers","permalink":"/docs/topics/HttpPartSerializersParsers","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/02.05.00.HttpPartSerializersParsers.md","tags":[],"version":"current","frontMatter":{"title":"HTTP Part Serializers and Parsers","slug":"HttpPartSerializersParsers"},"sidebar":"mainSidebar","previous":{"title":"2.4.10. Bypass Serialization","permalink":"/docs/topics/BypassSerialization"},"next":{"title":"2.6. Context Settings","permalink":"/docs/topics/ContextSettings"}}');var s=r(74848),n=r(28453);const i={title:"HTTP Part Serializers and Parsers",slug:"HttpPartSerializersParsers"},o=void 0,c={},l=[];function p(e){const a={code:"code",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.p,{children:"There is a separate set of serializers and parsers for marshalling HTTP parts (query, form-data, headers, path\nvariables, and plain-text request bodies).\nThe distinction is that these are designed to marshall directly to-and-from strings based on OpenAPI schema\ninformation."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:'// Schema information about our part.\nHttpPartSchema schema = HttpPartSchema\n    .tArrayPipes()\n    .items(\n        HttpPartSchema\n            .tArrayCsv()\n            .items(\n                HttpPartSchema.tInt64("integer","int64")\n            )\n    )\n    .build();\n\n// Our value to serialize\nObject value = new long[][]{{1,2,3},{4,5,6},{7,8,9}};\n\n// Produces "1,2,3|4,5,6|7,8,9"\nString output = OpenApi.of(HttpPartType.HEADER, schema, value);\n\n// Produces "[[1,2,3],[4,5,6],[7,8,9]]\nlong[][] value = OpenApi.to(HttpPartType.HEADER, schema, output, long[][].class);\n'})}),"\n",(0,s.jsxs)(a.p,{children:["The ",(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/httppart/HttpPartSchema.html",target:"_blank",children:"HttpPartSchema"})," class also provides convenience static\nmethods for creation of custom schemas."]}),"\n",(0,s.jsx)(a.p,{children:"The equivalent to the schema above can be structured like so:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-java",children:"import static org.apache.juneau.httppart.HttpPartSchema.*;\n\n// Schema information about our part.\nHttpPartSchema schema = tArrayPipes(tArrayCsv(tInt64())).build();\n"})}),"\n",(0,s.jsx)(a.p,{children:"The class hierarchy for the part marshallers are:"}),"\n",(0,s.jsxs)("tree",{children:[(0,s.jsx)("node-0",{children:(0,s.jsx)("java-interface",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/httppart/HttpPartSerializer.html",target:"_blank",children:"HttpPartSerializer"})})}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/httppart/SimplePartSerializer.html",target:"_blank",children:"SimplePartSerializer"})})," - Serializes directly to strings."]}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/uon/UonSerializer.html",target:"_blank",children:"UonSerializer"})})," - Serializes to UON notation."]}),(0,s.jsxs)("node-2",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/oapi/OpenApiSerializer.html",target:"_blank",children:"OpenApiSerializer"})})," - Serializes using OpenAPI schema rules."]}),(0,s.jsx)("node-0",{children:(0,s.jsx)("java-interface",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/httppart/HttpPartParser.html",target:"_blank",children:"HttpPartParser"})})}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/httppart/SimplePartParser.html",target:"_blank",children:"SimplePartParser"})})," - Parses directly from strings."]}),(0,s.jsxs)("node-1",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/uon/UonParser.html",target:"_blank",children:"UonParser"})})," - Parses from UON notation."]}),(0,s.jsxs)("node-2",{children:[(0,s.jsx)("java-class",{children:(0,s.jsx)("a",{href:"/site/apidocs/org/apache/juneau/oapi/OpenApiParser.html",target:"_blank",children:"OpenApiParser"})})," - Parses using OpenAPI schema rules."]})]})]})}function h(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);