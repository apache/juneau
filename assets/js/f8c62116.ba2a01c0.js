"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[4800],{28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>c});var a=s(96540);const n={},o=a.createContext(n);function r(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(o.Provider,{value:t},e.children)}},56743:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"topics/02.09.00.ComplexDataTypes","title":"Complex Data Types","description":"The Juneau parsers have the ability to parse into complex data types that consist of multidimensional arrays and nested","source":"@site/docs-staging/topics/02.09.00.ComplexDataTypes.md","sourceDirName":"topics","slug":"/topics/02.09.00.ComplexDataTypes","permalink":"/docs/topics/02.09.00.ComplexDataTypes","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/main/juneau-docs-poc/juneau-documentation/docs-staging/topics/02.09.00.ComplexDataTypes.md","tags":[],"version":"current","frontMatter":{"title":"Complex Data Types"},"sidebar":"mainSidebar","previous":{"title":"2.8. JsonMap","permalink":"/docs/topics/02.08.00.JsonMap"},"next":{"title":"2.10. Serializer/Parser Sets","permalink":"/docs/topics/02.10.00.SerializerSetsParserSets"}}');var n=s(74848),o=s(28453);const r={title:"Complex Data Types"},c=void 0,i={},p=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["The Juneau parsers have the ability to parse into complex data types that consist of multidimensional arrays and nested\n",(0,n.jsx)(t.code,{children:"Maps"})," and ",(0,n.jsx)(t.code,{children:"Collections"})," using the methods below:"]}),"\n",(0,n.jsxs)("tree",{children:[(0,n.jsx)("node-0",{children:(0,n.jsx)("java-class",{children:(0,n.jsx)(t.a,{href:"../apidocs/org/apache/juneau/parser/Parser.html",children:"Parser"})})}),(0,n.jsx)("node-1",{children:(0,n.jsx)("java-method",{children:(0,n.jsx)(t.a,{href:"../apidocs/org/apache/juneau/parser/Parser.html#parse(Object,Class)",children:"parse(Object,Class)"})})}),(0,n.jsx)("node-1",{children:(0,n.jsx)("java-method",{children:(0,n.jsx)(t.a,{href:"../apidocs/org/apache/juneau/parser/Parser.html#parse(Object,Type,Type...)",children:"parse(Object,Type,Type...)"})})})]}),"\n",(0,n.jsx)(t.p,{children:"Arrays are simple enough and can be constructed using the first method:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'String json = "[1,2,3]";\nint[] array = Json.to(json, int[].class);\n'})}),"\n",(0,n.jsxs)(t.p,{children:["For data types consisting of nested ",(0,n.jsx)(t.code,{children:"Collections"})," and ",(0,n.jsx)(t.code,{children:"Maps"})," such as ",(0,n.jsx)(t.code,{children:"Map<String,List<MyBean>>"}),", you need to use the second parse method that\nallows you to define the parameter types of the ",(0,n.jsx)(t.code,{children:"Collections"})," classes."]}),"\n",(0,n.jsx)(t.admonition,{title:"Example",type:"tip",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"String json = \"{foo:[{bar:'baz'}]}\";\nTreeMap map = Json.to(\n    json,             // Input being parsed.\n    TreeMap.class,    // Top-level data type.\n    String.class,     // Key type of map.\n    LinkedList.class, // Value type of map.\n    MyBean.class      // Value type of list.\n);\n"})})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"Collection"})," classes are assumed to be followed by zero or one objects indicating the element type."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"Map"})," classes are assumed to be followed by zero or two meta objects indicating the key and value types.\nThe arguments can be arbitrarily long to indicate arbitrarily complex data structures."]}),"\n",(0,n.jsxs)(t.p,{children:["Similar methods for converting to complex types can be found on the ",(0,n.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/httppart/RequestContent.html",children:"RequestContent"})," and ",(0,n.jsx)(t.a,{href:"../apidocs/org/apache/juneau/rest/httppart/RequestHttpPart.html",children:"RequestHttpPart"})," classes, and the ",(0,n.jsx)(t.a,{href:"../apidocs/org/apache/juneau/BeanSession.html#convertToType(Object,Type,Type...)",children:"BeanSession.convertToType(Object,Type,Type...)"})," method."]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);