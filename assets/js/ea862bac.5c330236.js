"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[7015],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(96540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},34250:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"topics/02.16.00.ParsingIntoGenericModels","title":"Parsing into Generic Models","description":"The Juneau parsers are not limited to parsing back into the original bean classes.","source":"@site/docs/topics/02.16.00.ParsingIntoGenericModels.md","sourceDirName":"topics","slug":"/topics/ParsingIntoGenericModels","permalink":"/docs/topics/ParsingIntoGenericModels","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/02.16.00.ParsingIntoGenericModels.md","tags":[],"version":"current","frontMatter":{"title":"Parsing into Generic Models","slug":"ParsingIntoGenericModels"},"sidebar":"mainSidebar","previous":{"title":"2.15. Recursion","permalink":"/docs/topics/02.15.00.Recursion"},"next":{"title":"2.17. Reading Continuous Streams","permalink":"/docs/topics/ReadingContinuousStreams"}}');var a=s(74848),r=s(28453);const o={title:"Parsing into Generic Models",slug:"ParsingIntoGenericModels"},i=void 0,c={},d=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The Juneau parsers are not limited to parsing back into the original bean classes.\nIf the bean classes are not available on the parsing side, the parser can also be used to parse into a generic model\nconsisting of ",(0,a.jsx)(n.code,{children:"Maps"}),", ",(0,a.jsx)(n.code,{children:"Collections"}),", and primitive objects."]}),"\n",(0,a.jsxs)(n.p,{children:["You can parse into any ",(0,a.jsx)(n.code,{children:"Map"})," type (e.g. ",(0,a.jsx)(n.code,{children:"HashMap"}),", ",(0,a.jsx)(n.code,{children:"TreeMap"}),") but using ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/collections/JsonMap.html",target:"_blank",children:"JsonMap"})," is recommended since it has many convenience methods for converting values to various types.\nThe same is true when parsing ",(0,a.jsx)(n.code,{children:"collections"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["You can use any ",(0,a.jsx)(n.code,{children:"Collection<T>"})," (e.g. ",(0,a.jsx)(n.code,{children:"HashSet<String>"}),", ",(0,a.jsx)(n.code,{children:"LinkedList<MyBean>"}),") or array (e.g. ",(0,a.jsx)(n.code,{children:"Object[]"}),", ",(0,a.jsx)(n.code,{children:"String[]"}),", ",(0,a.jsx)(n.code,{children:"String[][]"}),") but using ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/collections/JsonList.html",target:"_blank",children:"JsonList"})," is recommended."]}),"\n",(0,a.jsxs)(n.p,{children:["When the map or list type is not specified, or is the abstract ",(0,a.jsx)(n.code,{children:"Map<String,Object>"}),", ",(0,a.jsx)(n.code,{children:"Collection<Object>"}),", or ",(0,a.jsx)(n.code,{children:"List<Object>"})," types, the parser will use\n",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/collections/JsonMap.html",target:"_blank",children:"JsonMap"})," and ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/collections/JsonList.html",target:"_blank",children:"JsonList"})," by default."]}),"\n",(0,a.jsx)(n.p,{children:"For example, given the following JSON:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"{\n    id: 1,\n    name: 'John Smith',\n    uri: 'http://sample/addressBook/person/1',\n    addressBookUri: 'http://sample/addressBook',\n    birthDate: '1946-08-12T00:00:00Z',\n    addresses: [\n        {\n            uri: 'http://sample/addressBook/address/1',\n            personUri: 'http://sample/addressBook/person/1',\n            id: 1,\n            street: '100 Main Street',\n            city: 'Anywhereville',\n            state: 'NY',\n            zip: 12345,\n            isCurrent: true\n        }\n    ]\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We can parse this into a generic ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/collections/JsonMap.html",target:"_blank",children:"JsonMap"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Parse JSON into a generic POJO model.\nJsonMap map = Json.to(json, JsonMap.class);\n\n// Convert it back to JSON.\nString json = Json5.of(map);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["What we end up with is the exact same output.\nEven the numbers and booleans are preserved because they are parsed into ",(0,a.jsx)(n.code,{children:"Number"})," and ",(0,a.jsx)(n.code,{children:"Boolean"})," objects when parsing\ninto generic models."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"{\n    id: 1,\n    name: 'John Smith',\n    uri: 'http://sample/addressBook/person/1',\n    addressBookUri: 'http://sample/addressBook',\n    birthDate: '1946-08-12T00:00:00Z',\n    addresses: [\n        {\n            uri: 'http://sample/addressBook/address/1',\n            personUri: 'http://sample/addressBook/person/1',\n            id: 1,\n            street: '100 Main Street',\n            city: 'Anywhereville',\n            state: 'NY',\n            zip: 12345,\n            isCurrent: true\n        }\n    ]\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Once parsed into a generic model, various convenience methods are provided on the ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/collections/JsonMap.html",target:"_blank",children:"JsonMap"})," and ",(0,a.jsx)("a",{href:"/site/apidocs/org/apache/juneau/collections/JsonList.html",target:"_blank",children:"JsonList"})," classes to\nretrieve values:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Parse JSON into a generic POJO model.\nJsonMap map = Json.to(json, JsonMap.class);\n\n// Get some simple values.\nString name = map.getString("name");\nint id = map.getInt("id");\n\n// Get a value convertable from a String.\nURI uri = map.get(URI.class, "uri");\n\n// Get a value using a swap.\nTemporalCalendarSwap swap = new TemporalCalendarSwap.IsoInstant();\nCalendar birthDate = map.get(swap, "birthDate");\n\n// Get the addresses.\nJsonList addresses = map.getList("addresses");\n\n// Get the first address and convert it to a bean.\nAddress address = addresses.get(Address.class, 0);\n'})}),"\n",(0,a.jsx)(n.p,{children:"As a general rule, parsing into beans is often more efficient than parsing into generic models.\nAnd working with beans is often less error prone than working with generic models."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);