"use strict";(self.webpackChunkjuneau_documentation=self.webpackChunkjuneau_documentation||[]).push([[1603],{28453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>a});var n=t(96540);const s={},r=n.createContext(s);function l(e){const i=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(r.Provider,{value:i},e.children)}},38538:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"topics/07.01.02.Listifiers","title":"Listifiers","description":"Listifiers convert collection-like objects into lists for use in BCT assertions. They provide a unified way to work with various collection types, iterators, streams, and other iterable data structures.","source":"@site/docs/topics/07.01.02.Listifiers.md","sourceDirName":"topics","slug":"/topics/Listifiers","permalink":"/docs/topics/Listifiers","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/juneau/tree/master/juneau-docs/docs/topics/07.01.02.Listifiers.md","tags":[],"version":"current","frontMatter":{"title":"Listifiers","slug":"Listifiers"},"sidebar":"mainSidebar","previous":{"title":"7.1.1. Stringifiers","permalink":"/docs/topics/Stringifiers"},"next":{"title":"7.1.3. Swappers","permalink":"/docs/topics/Swappers"}}');var s=t(74848),r=t(28453);const l={title:"Listifiers",slug:"Listifiers"},a="Listifiers",o={},c=[{value:"Built-in Listifiers",id:"built-in-listifiers",level:2},{value:"Available Built-in Listifiers",id:"available-built-in-listifiers",level:3},{value:"Custom Listifiers",id:"custom-listifiers",level:2},{value:"Basic Custom Listifier",id:"basic-custom-listifier",level:3},{value:"Advanced Listifier Example",id:"advanced-listifier-example",level:3},{value:"Tree Structure Listifier",id:"tree-structure-listifier",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Testing Custom Collections",id:"testing-custom-collections",level:3},{value:"Combining with assertBean",id:"combining-with-assertbean",level:3},{value:"Important Notes",id:"important-notes",level:2},{value:"Consuming vs Non-Consuming Listifiers",id:"consuming-vs-non-consuming-listifiers",level:3},{value:"Thread Safety",id:"thread-safety",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"When to Create Custom Listifiers",id:"when-to-create-custom-listifiers",level:3},{value:"Listifier Guidelines",id:"listifier-guidelines",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"listifiers",children:"Listifiers"})}),"\n",(0,s.jsx)(i.p,{children:"Listifiers convert collection-like objects into lists for use in BCT assertions. They provide a unified way to work with various collection types, iterators, streams, and other iterable data structures."}),"\n",(0,s.jsx)(i.h2,{id:"built-in-listifiers",children:"Built-in Listifiers"}),"\n",(0,s.jsx)(i.p,{children:"BCT comes with comprehensive built-in listifiers for collection-like Java types:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'// Collection types\nList<String> list = List.of("a", "b", "c");\nassertList(list, "a", "b", "c");  // Uses collectionListifier()\n\nSet<Integer> set = Set.of(1, 2, 3);\nassertList(set, "1", "2", "3");  // Uses iterableListifier()\n\n// Iterator types\nIterator<String> iterator = List.of("x", "y", "z").iterator();\nassertList(iterator, "x", "y", "z");  // Uses iteratorListifier()\n\n// Stream types\nStream<String> stream = Stream.of("p", "q", "r");\nassertList(stream, "p", "q", "r");  // Uses streamListifier()\n\n// Enumeration types\nVector<String> vector = new Vector<>(List.of("m", "n", "o"));\nEnumeration<String> enumeration = vector.elements();\nassertList(enumeration, "m", "n", "o");  // Uses enumerationListifier()\n\n// Map types\nMap<String, String> map = Map.of("key1", "value1", "key2", "value2");\nassertList(map, "key1=value1", "key2=value2");  // Uses mapListifier()\n'})}),"\n",(0,s.jsx)(i.h3,{id:"available-built-in-listifiers",children:"Available Built-in Listifiers"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"collectionListifier()"})," - Converts Collection objects to ",(0,s.jsx)(i.code,{children:"List&lt;Object&gt;"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"iterableListifier()"})," - Converts Iterable objects to ",(0,s.jsx)(i.code,{children:"List&lt;Object&gt;"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"iteratorListifier()"})," - Converts Iterator objects to ",(0,s.jsx)(i.code,{children:"List&lt;Object&gt;"})," (consumes the iterator)"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"streamListifier()"})," - Converts Stream objects to ",(0,s.jsx)(i.code,{children:"List&lt;Object&gt;"})," (terminates the stream)"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"enumerationListifier()"})," - Converts Enumeration objects to ",(0,s.jsx)(i.code,{children:"List&lt;Object&gt;"})," (consumes the enumeration)"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"mapListifier()"})," - Converts Map objects to ",(0,s.jsx)(i.code,{children:"List&lt;Map.Entry&gt;"})," objects"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"custom-listifiers",children:"Custom Listifiers"}),"\n",(0,s.jsx)(i.p,{children:"Define custom listifiers for domain-specific collection types:"}),"\n",(0,s.jsx)(i.h3,{id:"basic-custom-listifier",children:"Basic Custom Listifier"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"// Custom collection type\nListifier<CustomCollection> customListifier = (conv, collection) -> {\n    if (collection == null) return null;\n    List<Object> result = new ArrayList<>();\n    collection.forEach(result::add);\n    return result;\n};\n\n// Registration\nvar converter = BasicBeanConverter.builder()\n    .defaultSettings()\n    .addListifier(CustomCollection.class, customListifier)\n    .build();\n"})}),"\n",(0,s.jsx)(i.h3,{id:"advanced-listifier-example",children:"Advanced Listifier Example"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"// Paginated result listifier\nListifier<PaginatedResult> paginatedListifier = (conv, page) -> {\n    if (page == null) return null;\n    // Extract items from paginated wrapper\n    return new ArrayList<>(page.getItems());\n};\n\n// Database result set listifier\nListifier<ResultSet> resultSetListifier = (conv, rs) -> {\n    if (rs == null) return null;\n    List<Object> rows = new ArrayList<>();\n    try {\n        int columnCount = rs.getMetaData().getColumnCount();\n        while (rs.next()) {\n            Map<String, Object> row = new LinkedHashMap<>();\n            for (int i = 1; i <= columnCount; i++) {\n                row.put(rs.getMetaData().getColumnName(i), rs.getObject(i));\n            }\n            rows.add(row);\n        }\n    } catch (SQLException e) {\n        throw new RuntimeException(e);\n    }\n    return rows;\n};\n\n// Registration\nvar converter = BasicBeanConverter.builder()\n    .defaultSettings()\n    .addListifier(PaginatedResult.class, paginatedListifier)\n    .addListifier(ResultSet.class, resultSetListifier)\n    .build();\n"})}),"\n",(0,s.jsx)(i.h3,{id:"tree-structure-listifier",children:"Tree Structure Listifier"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"// Convert tree to flat list (breadth-first)\nListifier<TreeNode> treeBreadthFirstListifier = (conv, root) -> {\n    if (root == null) return null;\n    List<Object> result = new ArrayList<>();\n    Queue<TreeNode> queue = new LinkedList<>();\n    queue.add(root);\n    \n    while (!queue.isEmpty()) {\n        TreeNode node = queue.poll();\n        result.add(node.getValue());\n        queue.addAll(node.getChildren());\n    }\n    \n    return result;\n};\n\n// Convert tree to flat list (depth-first)\nListifier<TreeNode> treeDepthFirstListifier = (conv, root) -> {\n    if (root == null) return null;\n    List<Object> result = new ArrayList<>();\n    collectDepthFirst(root, result);\n    return result;\n};\n\nprivate void collectDepthFirst(TreeNode node, List<Object> result) {\n    if (node != null) {\n        result.add(node.getValue());\n        node.getChildren().forEach(child -> collectDepthFirst(child, result));\n    }\n}\n"})}),"\n",(0,s.jsx)(i.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(i.h3,{id:"testing-custom-collections",children:"Testing Custom Collections"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'// Test paginated results\nPaginatedResult<User> page = userService.getUsers(pageNumber);\nassertList(args().setBeanConverter(converter),\n          page, "Alice", "Bob", "Charlie");\n\n// Test database results\nResultSet rs = statement.executeQuery("SELECT name FROM users");\nassertList(args().setBeanConverter(converter),\n          rs, \n          predicate(row -> ((Map)row).get("name").equals("Alice")),\n          predicate(row -> ((Map)row).get("name").equals("Bob")));\n'})}),"\n",(0,s.jsx)(i.h3,{id:"combining-with-assertbean",children:"Combining with assertBean"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'// Test collection properties\nassertBean(args().setBeanConverter(converter),\n          paginatedResult, \n          "items{#{name}},totalCount", \n          "[{Alice},{Bob},{Charlie}],3");\n'})}),"\n",(0,s.jsx)(i.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,s.jsx)(i.h3,{id:"consuming-vs-non-consuming-listifiers",children:"Consuming vs Non-Consuming Listifiers"}),"\n",(0,s.jsx)(i.p,{children:"Some listifiers consume their input:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'// Iterator is consumed - can only be used once\nIterator<String> iterator = list.iterator();\nassertList(iterator, "a", "b", "c");\n// iterator is now exhausted and cannot be reused\n\n// Stream is terminated - can only be used once\nStream<String> stream = Stream.of("a", "b", "c");\nassertList(stream, "a", "b", "c");\n// stream is now closed and cannot be reused\n\n// Enumeration is consumed - can only be used once\nEnumeration<String> enumeration = vector.elements();\nassertList(enumeration, "a", "b", "c");\n// enumeration is now exhausted\n'})}),"\n",(0,s.jsx)(i.h3,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:"// Ensure thread-safe listifiers for concurrent testing\nListifier<ThreadSafeCollection> threadSafeListifier = (conv, collection) -> {\n    if (collection == null) return null;\n    synchronized (collection) {\n        return new ArrayList<>(collection.getItems());\n    }\n};\n"})}),"\n",(0,s.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(i.h3,{id:"when-to-create-custom-listifiers",children:"When to Create Custom Listifiers"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Custom collection implementations"}),"\n",(0,s.jsx)(i.li,{children:"Wrapper objects containing collections"}),"\n",(0,s.jsx)(i.li,{children:"Database result sets or cursors"}),"\n",(0,s.jsx)(i.li,{children:"Paginated results"}),"\n",(0,s.jsx)(i.li,{children:"Tree or graph structures that need flattening"}),"\n",(0,s.jsx)(i.li,{children:"Legacy collection types"}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"listifier-guidelines",children:"Listifier Guidelines"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Always handle null input appropriately"}),"\n",(0,s.jsx)(i.li,{children:"Return null for null input (not empty list)"}),"\n",(0,s.jsx)(i.li,{children:"Create defensive copies when necessary"}),"\n",(0,s.jsx)(i.li,{children:"Consider whether the listifier consumes its input"}),"\n",(0,s.jsx)(i.li,{children:"Document consumption behavior clearly"}),"\n",(0,s.jsx)(i.li,{children:"Ensure thread safety for shared listifiers"}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Avoid copying large collections unnecessarily"}),"\n",(0,s.jsx)(i.li,{children:"Use streaming approaches for large datasets"}),"\n",(0,s.jsx)(i.li,{children:"Consider lazy evaluation for expensive conversions"}),"\n",(0,s.jsx)(i.li,{children:"Be aware of memory implications for large lists"}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-java",children:'// Robust listifier with error handling\nListifier<DataSource> safeListifier = (conv, source) -> {\n    if (source == null) return null;\n    try {\n        return source.fetchAll();\n    } catch (Exception e) {\n        // Return list with error indication\n        return List.of("Error: " + e.getMessage());\n    }\n};\n'})}),"\n",(0,s.jsx)(i.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/topics/Stringifiers",children:"Stringifiers"})," - Converting objects to strings"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/topics/Swappers",children:"Swappers"})," - Transforming objects before processing"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/topics/PropertyExtractors",children:"PropertyExtractors"})," - Custom property access logic"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.a,{href:"/docs/topics/JuneauBctBasics",children:"juneau-bct Basics"})," - Main BCT documentation"]}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);